{"version":3,"sources":["webpack:///src/app/debit-entry/debit-entry.component.html","webpack:///src/app/debit-entry/debit-entry-routing.module.ts","webpack:///src/app/debit-entry/debit-entry.component.scss","webpack:///src/app/debit-entry/debit-entry.component.ts","webpack:///src/app/debit-entry/debit-entry.module.ts","webpack:///src/app/debit-entry/services/debit-entry.service.ts","webpack:///src/app/debit-entry/services/index.ts"],"names":["routes","path","component","DebitEntryRoutingModule","imports","forChild","exports","DebitEntryComponent","debitService","fb","balance","table","corpusData","searchForm","group","employeeNo","compose","required","text","debitAmount","purpose","type","date","fire","title","icon","accountData","userId","debit","particulars","mode","chequeDate","chequeNo","bankName","sendData","subscribe","result","then","isConfirm","error1","get","value","console","log","getData","nameData","length","i","credit","name","$event","target","getBankList","bankList","getCorpusData","selector","template","DebitEntryModule","declarations","providers","DebitEntryService","http","url","headers","append","data","post","providedIn","services"],"mappings":"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","file":"debit-entry-debit-entry-module-es5.js","sourcesContent":["export default \"<sb-layout-dashboard>\\n    <sb-dashboard-head title=\\\"{{'Accountant.Pages.Debit'| translate}}\\\"></sb-dashboard-head>\\n    <hr class=\\\"rounded\\\">\\n    <br>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n        <div class=\\\"col-xl-8 col-md-10\\\">\\n            <sb-card>\\n                <div class=\\\"card-header\\\"><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>{{'Accountant.Pages.Debit'| translate}}</div>\\n                <div class=\\\"card-body table-responsive\\\">\\n                    <form class=\\\"form-inline\\\" [formGroup]=\\\"searchForm\\\" (ngSubmit)=\\\"showTable()\\\">\\n                        <label>\\n                            <input type=\\\"text\\\" placeholder=\\\"Enter Employee No\\\" formControlName=\\\"employeeNo\\\"/>\\n                        </label>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"!searchForm.valid\\\">{{'Accountant.GetInfo'| translate}}</button>\\n                    </form>\\n                    <table class=\\\"table table-striped\\\" *ngIf=\\\"table\\\" id=\\\"content\\\">\\n                        <tbody>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.EmployeeNo'| translate}}</td>\\n                            <td>{{text}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.EmployeeName'| translate}}</td>\\n                            <td>{{name}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Corpus'| translate}}</td>\\n                            <td>{{corpusData| indianCurrency}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Balance'| translate}}</td>\\n                            <td>{{balance| indianCurrency}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Date'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"date\\\" [(ngModel)]=\\\"date\\\" name=\\\"date\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.DebitAmount'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"number\\\" [(ngModel)]=\\\"debitAmount\\\" (focusout)=\\\"debit($event)\\\" name=\\\"amount\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Mode' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <select class=\\\"custom-select\\\" [(ngModel)]=\\\"type\\\">\\n                                        <option>{{'Accountant.Tables.Cash' | translate}}</option>\\n                                        <option>{{'Accountant.Tables.Cheque' | translate}}</option>\\n                                    </select>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\n                            <td>{{'Accountant.Tables.BankName' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <select class=\\\"custom-select\\\" name=\\\"bankName\\\" [(ngModel)]=\\\"bankName\\\">\\n                                        <option *ngFor=\\\"let val of bankList\\\">{{val.bankName}}</option>\\n                                    </select>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\n                            <td>{{'Accountant.Tables.ChequeDate' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"date\\\" [(ngModel)]=\\\"chequeDate\\\" name=\\\"chequeDate\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\n                            <td>{{'Accountant.Tables.ChequeNo' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"chequeNo\\\" name=\\\"chequeNo\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Remark'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"purpose\\\" name=\\\"purpose\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </table>\\n                    <button *ngIf=\\\"table\\\" (click)=\\\"send()\\\">{{'Accountant.Tables.Submit'| translate}}</button>\\n                </div>\\n            </sb-card>\\n        </div>\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n    </div>\\n</sb-layout-dashboard>\\n\\n\\n\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DebitEntryComponent } from './debit-entry.component';\n\nconst routes: Routes = [{ path: '', component: DebitEntryComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DebitEntryRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2RlYml0LWVudHJ5L2RlYml0LWVudHJ5LmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { DebitEntryService } from '@app/debit-entry/services';\n// @ts-ignore\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { CreditEntryService } from '@app/credit-entry/services';\n@Component({\n    selector: 'sb-debit-entry',\n    templateUrl: './debit-entry.component.html',\n    styleUrls: ['./debit-entry.component.scss'],\n})\nexport class DebitEntryComponent implements OnInit {\n    searchForm: FormGroup;\n    text: any;\n    debitAmount: any;\n    purpose: any;\n    type: any;\n    data: any;\n    bankName: any;\n    chequeNo: any;\n    chequeDate: any;\n    name: any;\n    date: any;\n    balance = 0;\n    table = false;\n    bankList: any;\n    corpusData = 0;\n    constructor(private debitService: DebitEntryService, public fb: FormBuilder) {\n        this.searchForm = this.fb.group({\n            employeeNo: new FormControl('', Validators.compose([Validators.required])),\n        });\n    }\n    send() {\n        if (!this.text || !this.debitAmount || !this.purpose || !this.type || !this.date) {\n            Swal.fire({\n                title: 'Oops!',\n                text: 'Fill all the details!',\n                icon: 'error',\n            });\n        } else {\n            const accountData = {\n                userId: this.text,\n                debit: this.debitAmount,\n                particulars: this.purpose,\n                mode: this.type,\n                type: 'Operational',\n                date: this.date,\n                chequeDate: this.chequeDate,\n                chequeNo: this.chequeNo,\n                bankName: this.bankName,\n            };\n            this.debitService.sendData(accountData).subscribe(\n                result => {\n                    Swal.fire({\n                        text: 'Sent!',\n                        icon: 'success',\n                    }).then((isConfirm: any) => {\n                        if (isConfirm) {\n                            // @ts-ignore\n                            this.table = false;\n                            this.text = null;\n                            this.debitAmount = null;\n                            this.purpose = null;\n                            this.date = null;\n                            this.chequeDate = null;\n                            this.chequeNo = null;\n                            this.bankName = null;\n                            this.balance = 0;\n                            this.type = null;\n                            this.searchForm = this.fb.group({\n                                employeeNo: new FormControl('', Validators.compose([Validators.required])),\n                            });\n                        }\n                    });\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        }\n    }\n    showTable() {\n        // @ts-ignore\n        this.text = this.searchForm.get('employeeNo').value;\n        console.log(this.text);\n        this.debitService.getData(this.text).subscribe(\n            result => {\n                console.log(result);\n                if (result.nameData.length === 0) {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'This user does not exists!',\n                        icon: 'error',\n                    });\n                } else {\n                    console.log(result);\n                    // tslint:disable-next-line:prefer-for-of\n                    for (let i = 0; i < result.balance.length; i++) {\n                        this.balance =\n                            this.balance + result.balance[i].credit - result.balance[i].debit;\n                    }\n                    console.log(this.balance);\n                    this.name = result.nameData[0].name;\n                    this.table = true;\n                }\n            },\n            error1 => {\n                Swal.fire({\n                    title: 'Oops!',\n                    text: 'Try again!',\n                    icon: 'error',\n                });\n            }\n        );\n        return this.balance;\n    }\n    debit($event: any) {\n        console.log(this.balance);\n        if ($event.target.value > this.balance) {\n            Swal.fire({\n                title: 'Oops!',\n                text: 'Balance is less than debit amount',\n                icon: 'error',\n            });\n        }\n    }\n    ngOnInit() {\n        this.debitService.getBankList().subscribe(result => {\n            this.bankList = result;\n            console.log(this.bankList);\n        });\n        this.debitService.getCorpusData().subscribe(\n            result => {\n                console.log(result);\n                // tslint:disable-next-line:prefer-for-of\n                for (let i = 0; i < result.balance.length; i++) {\n                    this.corpusData =\n                        this.corpusData + result.balance[i].credit - result.balance[i].debit;\n                }\n                console.log(this.corpusData);\n            },\n            error1 => {\n                Swal.fire({\n                    title: 'Oops!',\n                    text: 'Try again!',\n                    icon: 'error',\n                });\n            }\n        );\n        return this.corpusData;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppCommonModule } from '@app/app-common/app-common.module';\nimport { NavigationModule } from '@app/navigation/navigation.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { DebitEntryRoutingModule } from './debit-entry-routing.module';\nimport { DebitEntryComponent } from './debit-entry.component';\nimport * as service from './services';\nimport { LayoutDashboardModule } from '@app/layout-dashboard/layout-dashboard.module';\n\n@NgModule({\n    declarations: [DebitEntryComponent],\n    imports: [\n        CommonModule,\n        DebitEntryRoutingModule,\n        TranslateModule,\n        FormsModule,\n        AppCommonModule,\n        NavigationModule,\n        LayoutDashboardModule,\n        ReactiveFormsModule,\n    ],\n    providers: [...service.services],\n})\nexport class DebitEntryModule {}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DebitEntryService {\n    constructor(private http: HttpClient) {}\n    getBankList(): Observable<any> {\n        const url = 'http://drsunitanayak.com/getBankList';\n        const headers = new HttpHeaders();\n        headers.append('Access-Control-Allow-Origin', '*');\n        headers.append('Access-Control-Allow-Methods', 'POST,GET,OPTIONS,PUT');\n        headers.append('Accept', 'application/json');\n        headers.append('content-type', 'application/json');\n        return this.http.get<any>(url, { headers });\n    }\n    getData(text: any): Observable<any> {\n        console.log(text);\n        const url = 'http://drsunitanayak.com/getOperationalAccountData';\n        const data = {\n            userId: text,\n        };\n        return this.http.post<any>(url, data);\n    }\n    getCorpusData(): Observable<any> {\n        const url = 'http://drsunitanayak.com/getCorpusData';\n        return this.http.get<any>(url);\n    }\n    sendData(data: any): Observable<any> {\n        console.log(data);\n        const url = 'http://drsunitanayak.com/sendDebitEntry';\n        return this.http.post<any>(url, data);\n    }\n}\n","import { DebitEntryService } from './debit-entry.service';\n\nexport const services = [DebitEntryService];\n\nexport * from './debit-entry.service';\n"]}