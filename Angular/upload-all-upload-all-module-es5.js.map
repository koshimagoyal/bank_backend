{"version":3,"sources":["webpack:///src/app/upload-all/dialog/dialog.component.html","webpack:///src/app/upload-all/upload-all.component.html","webpack:///src/app/upload-all/dialog/dialog.component.scss","webpack:///src/app/upload-all/dialog/dialog.component.ts","webpack:///src/app/upload-all/upload-all-routing.module.ts","webpack:///src/app/upload-all/upload-all.component.scss","webpack:///src/app/upload-all/upload-all.component.ts","webpack:///src/app/upload-all/upload-all.module.ts"],"names":["vfs","pdfMake","DialogComponent","data","dialogRef","start","end","accountData","loanData","category","console","log","loan","body","columns","text","style","push","forEach","val","isDate","date","dateOfClosure","closeLoan","format","loanAmount","toString","loanDuration","loanType","closeStatus","userId","loanBook","createLoanBookTable","closeData","createCloseTable","chequeData","colSpan","alignment","table","widths","headerRows","createLoanBookBody","particulars","credit","createCloseBody","mode","chequeDate","bankName","chequeNo","fillColor","debit","type","account","cheque","createChequeTable","createChequeBody","createCDEChequeTable","createCDEChequeBody","docDefinition","pageSize","pageOrientation","pageMargins","content","document","getElementById","innerHTML","layout","createLoanBody","styles","header","fontSize","bold","margin","subheader","tableExample","nestedTable","tableHeader","color","defaultStyle","createPdf","download","createCashBody","createChequeTranBody","createCreditBody","createDebitBody","innerText","createBody","createCDEBody","close","d","result","Date","parse","selector","template","routes","path","component","UploadAllRoutingModule","imports","forChild","exports","UploadAllComponent","service","dialog","fb","employeeAccount","bankAccount","report","disable","check","employeeForm","group","employeeId","compose","required","employeeName","fatherName","permAddress","currAddress","email","mobileNo","min","max","altMobileNo","landlineNo","pattern","pan","aadharNo","enrollDate","amount","purpose","bankForm","bankAddress","accountNo","accountType","nickName","code","minLength","reportForm","startDate","endDate","getBankList","subscribe","bankList","get","value","fire","title","icon","pass","str","i","char","Math","floor","random","length","charAt","passw","slice","name","password","permanentAddress","currentAddress","mobileNo1","mobileNo2","landline","enrollmentDate","roleId","closeAccount","sendData","then","isConfirm","error1","event","target","checked","setValue","getLoanData","open","height","width","afterClosed","ress","getCreditData","getDebitData","getExpenseData","getCreditDebitExpenseData","getCashData","getChequeData","nickname","sendBankData","UploadAllModule","declarations","providers","entryComponents"],"mappings":"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","file":"upload-all-upload-all-module-es5.js","sourcesContent":["export default \"<div>\\n    <h1 mat-dialog-title align=\\\"center\\\" *ngIf=\\\"category == 'Loan Disbursal Records'\\\">Loan Disbursal Records</h1>\\n    <h1 mat-dialog-title align=\\\"center\\\" *ngIf=\\\"category == 'All Cash Transactions'\\\">All Cash Transactions</h1>\\n    <h1 mat-dialog-title align=\\\"center\\\" *ngIf=\\\"category == 'All Cheque Transactions'\\\">All Cheque Transactions</h1>\\n    <h1 mat-dialog-title align=\\\"center\\\" *ngIf=\\\"category == 'Credit Transactions'\\\">Credit Transactions</h1>\\n    <h1 mat-dialog-title align=\\\"center\\\" *ngIf=\\\"category == 'Debit Transactions'\\\">Debit Transactions</h1>\\n    <h1 mat-dialog-title align=\\\"center\\\" *ngIf=\\\"category == 'Expense Deductions'\\\">Expense Deductions</h1>\\n    <h1 mat-dialog-title align=\\\"center\\\" *ngIf=\\\"category == 'Credit+Debit+Expense Transactions'\\\">Credit+Debit+Expense Transactions</h1>\\n    <mat-dialog-content class=\\\"mat-typography\\\">\\n        <br>\\n        <table id=\\\"tab\\\" class=\\\"table table-borderless text-center\\\">\\n            <thead>\\n            <tr>\\n                <th>Start Date</th>\\n                <th>End Date</th>\\n            </tr>\\n            </thead>\\n            <tbody>\\n            <tr>\\n                <td id=\\\"start\\\">{{start| date:'dd-MM-yyyy'}}</td>\\n                <td id=\\\"end\\\">{{end| date:'dd-MM-yyyy'}}</td>\\n            </tr>\\n            </tbody>\\n        </table>\\n        <br>\\n        <ng-container *ngIf=\\\"category == 'Loan Disbursal Records'\\\">\\n            <h1>Loan Details</h1>\\n            <table class=\\\"table table-bordered\\\">\\n                <thead>\\n                <tr>\\n                    <th>Loan Date</th>\\n                    <th>Loan Amount</th>\\n                    <th>Loan Duration</th>\\n                    <th>Loan Type</th>\\n                    <th>Close Loan</th>\\n                    <th>Closure Status</th>\\n                    <th>Date of Loan Closure</th>\\n                    <th>User Id</th>\\n                </tr>\\n                </thead>\\n                <tbody *ngFor=\\\"let data of loanData;\\\">\\n                <tr>\\n                    <td *ngIf=\\\"isDate(data.loanData.date); else notDate\\\">{{data.loanData.date| date:'dd-MM-yyyy'}}</td>\\n                    <ng-template #notDate>\\n                        <td>{{data.loanData.date}}</td>\\n                    </ng-template>\\n                    <td *ngIf=\\\"data.loanData.loanAmount; else not\\\">{{data.loanData.loanAmount| indianCurrency}}</td>\\n                    <td *ngIf=\\\"data.loanData.loanDuration; else not\\\">{{data.loanData.loanDuration}}</td>\\n                    <td *ngIf=\\\"data.loanData.loanType; else not\\\">{{data.loanData.loanType}}</td>\\n                    <td *ngIf=\\\"data.loanData.closeLoan; else not\\\">{{data.loanData.closeLoan}}</td>\\n                    <td *ngIf=\\\"data.loanData.closeStatus; else not\\\">{{data.loanData.closeStatus}}</td>\\n                    <td *ngIf=\\\"isDate(data.loanData.dateOfClosure); else notDate\\\">{{data.loanData.dateOfClosure| date:'dd-MM-yyyy'}}</td>\\n                    <ng-template #notDate>\\n                        <td>{{data.loanData.dateOfClosure}}</td>\\n                    </ng-template>\\n                    <td *ngIf=\\\"data.loanData.userId; else not\\\">{{data.loanData.userId}}</td>\\n                </tr>\\n                <tr>\\n                    <td *ngIf=\\\"data.loanBook\\\" align=\\\"center\\\" colspan=\\\"8\\\">\\n                        <h3 style=\\\"font-weight: bold\\\">EMI Details</h3>\\n                        <table style=\\\"width: 100%;\\\">\\n                            <thead>\\n                            <tr>\\n                                <th style=\\\"width: 16.66%;\\\">EMI Date</th>\\n                                <th style=\\\"width: 60%;\\\">Particulars</th>\\n                                <th>EMI Paid</th>\\n                            </tr>\\n                            </thead>\\n                            <tbody>\\n                            <tr *ngFor=\\\"let value of data.loanBook\\\">\\n                                <td *ngIf=\\\"isDate(value.date); else notDate\\\">{{value.date}}</td>\\n                                <ng-template #notDate>\\n                                    <td>{{value.date}}</td>\\n                                </ng-template>\\n                                <td class=\\\"col-5\\\" *ngIf=\\\"value.particulars; else not\\\">{{value.particulars}}</td>\\n                                <td *ngIf=\\\"value.credit; else not\\\">{{value.credit| indianCurrency}}</td>\\n                            </tr>\\n                            </tbody>\\n                        </table>\\n                    </td>\\n                </tr>\\n                <tr>\\n                    <td *ngIf=\\\"data.closeData && data.closeData[0].mode==='Cash';else cheque\\\" align=\\\"center\\\" colspan=\\\"8\\\">\\n                        <h3 style=\\\"font-weight: bold\\\">Loan Closure Details</h3>\\n                        <table style=\\\"width: 100%;\\\">\\n                            <thead>\\n                            <tr>\\n                                <th style=\\\"width: 16.66%;\\\">Date</th>\\n                                <th>Loan Status</th>\\n                                <th>Mode of Payment</th>\\n                                <th>Paid Amount</th>\\n                            </tr>\\n                            </thead>\\n                            <tbody>\\n                            <tr>\\n                                <td *ngIf=\\\"isDate(data.closeData[0].date); else notDate\\\">{{data.closeData[0].date| date:'dd-MM-yyyy'}}</td>\\n                                <ng-template #notDate>\\n                                    <td>{{data.closeData[0].date}}</td>\\n                                </ng-template>\\n                                <td *ngIf=\\\"data.loanData.closeStatus; else not\\\">{{data.loanData.closeStatus}}</td>\\n                                <td *ngIf=\\\"data.closeData[0].mode; else not\\\">{{data.closeData[0].mode}}</td>\\n                                <td *ngIf=\\\"data.closeData[0].credit; else not\\\">{{data.closeData[0].credit| indianCurrency}}</td>\\n                            </tr>\\n                            </tbody>\\n                        </table>\\n                    </td>\\n                    <ng-template #cheque>\\n                        <td *ngIf=\\\"data.closeData && data.closeData[0].mode==='Cheque';\\\" align=\\\"center\\\" colspan=\\\"8\\\">\\n                            <h3 style=\\\"font-weight: bold\\\">Loan Closure Details</h3>\\n                            <table style=\\\"width: 100%;\\\">\\n                                <thead>\\n                                <tr>\\n                                    <th style=\\\"width: 16.66%;\\\">Date</th>\\n                                    <th>Loan Status</th>\\n                                    <th>Mode of Payment</th>\\n                                    <th>Paid Amount</th>\\n                                    <th>Cheque Date</th>\\n                                    <th>Bank Name</th>\\n                                    <th>Cheque Number</th>\\n                                </tr>\\n                                </thead>\\n                                <tbody>\\n                                <tr>\\n                                    <td *ngIf=\\\"isDate(data.closeData[0].date); else notDate\\\">{{data.closeData[0].date| date:'dd-MM-yyyy'}}</td>\\n                                    <ng-template #notDate>\\n                                        <td>{{data.closeData[0].date}}</td>\\n                                    </ng-template>\\n                                    <td *ngIf=\\\"data.loanData.closeStatus; else not\\\">{{data.loanData.closeStatus}}</td>\\n                                    <td *ngIf=\\\"data.closeData[0].mode; else not\\\">{{data.closeData[0].mode}}</td>\\n                                    <td *ngIf=\\\"data.closeData[0].credit; else not\\\">{{data.closeData[0].credit| indianCurrency}}</td>\\n                                    <td *ngIf=\\\"data.chequeData[0].chequeDate; else not\\\">{{data.chequeData[0].chequeDate| date: 'dd-MM-yyyy'}}</td>\\n                                    <td *ngIf=\\\"data.chequeData[0].bankName; else not\\\">{{data.chequeData[0].bankName}}</td>\\n                                    <td *ngIf=\\\"data.chequeData[0].chequeNo; else not\\\">{{data.chequeData[0].chequeNo}}</td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </td>\\n                    </ng-template>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"category == 'All Cash Transactions'\\\">\\n            <h1>Cash Transactions</h1>\\n            <table class=\\\"table table-bordered\\\">\\n                <thead>\\n                <tr>\\n                    <th style=\\\"width: 16.66%;\\\">Date</th>\\n                    <th style=\\\"width: 60%;\\\">Particulars</th>\\n                    <th>Credit</th>\\n                    <th>Debit</th>\\n                    <th>Type</th>\\n                    <th>User Id</th>\\n                </tr>\\n                </thead>\\n                <tbody *ngFor=\\\"let val of accountData\\\">\\n                <tr>\\n                    <td *ngIf=\\\"isDate(val.date); else notDate\\\">{{val.date| date:'dd-MM-yyyy'}}</td>\\n                    <ng-template #notDate>\\n                        <td>{{val.date}}</td>\\n                    </ng-template>\\n                    <td *ngIf=\\\"val.particulars; else not\\\">{{val.particulars}}</td>\\n                    <td class=\\\"table-success\\\" *ngIf=\\\"val.credit; else not\\\">{{val.credit| indianCurrency}}</td>\\n                    <td class=\\\"table-danger\\\" *ngIf=\\\"val.debit; else not\\\">{{val.debit| indianCurrency}}</td>\\n                    <td *ngIf=\\\"val.type; else not\\\">{{val.type}}</td>\\n                    <td *ngIf=\\\"val.userId; else not\\\">{{val.userId}}</td>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"category == 'All Cheque Transactions'\\\">\\n            <h1>Cheque Transactions</h1>\\n            <table class=\\\"table table-bordered\\\">\\n                <thead>\\n                <tr>\\n                    <th style=\\\"width: 16.66%;\\\">Date</th>\\n                    <th style=\\\"width: 60%;\\\">Particulars</th>\\n                    <th>Credit</th>\\n                    <th>Debit</th>\\n                    <th>Type</th>\\n                    <th>User Id</th>\\n                </tr>\\n                </thead>\\n                <tbody *ngFor=\\\"let val of accountData\\\">\\n                <tr>\\n                    <td *ngIf=\\\"isDate(val.account.date); else notDate\\\">{{val.account.date| date:'dd-MM-yyyy'}}</td>\\n                    <ng-template #notDate>\\n                        <td>{{val.account.date}}</td>\\n                    </ng-template>\\n                    <td *ngIf=\\\"val.account.particulars; else not\\\">{{val.account.particulars}}</td>\\n                    <td class=\\\"table-success\\\" *ngIf=\\\"val.account.credit; else not\\\">{{val.account.credit| indianCurrency}}</td>\\n                    <td class=\\\"table-danger\\\" *ngIf=\\\"val.account.debit; else not\\\">{{val.account.debit| indianCurrency}}</td>\\n                    <td *ngIf=\\\"val.account.type; else not\\\">{{val.account.type}}</td>\\n                    <td *ngIf=\\\"val.account.userId; else not\\\">{{val.account.userId}}</td>\\n                </tr>\\n                <tr>\\n                    <td *ngIf=\\\"val.cheque\\\" align=\\\"center\\\" colspan=\\\"6\\\">\\n                        <h3 style=\\\"font-weight: bold\\\">Cheque Details</h3>\\n                        <table style=\\\"width: 100%;\\\">\\n                            <thead>\\n                            <tr>\\n                                <th style=\\\"width: 16.66%;\\\">Cheque Date</th>\\n                                <th style=\\\"width: 60%;\\\">Bank Name</th>\\n                                <th>Cheque Number</th>\\n                            </tr>\\n                            </thead>\\n                            <tbody>\\n                            <tr>\\n                                <td *ngIf=\\\"val.cheque[0].chequeDate; else not\\\">{{val.cheque[0].chequeDate| date:'dd-MM-yyyy'}}</td>\\n                                <td class=\\\"col-5\\\" *ngIf=\\\"val.cheque[0].bankName; else not\\\">{{val.cheque[0].bankName}}</td>\\n                                <td *ngIf=\\\"val.cheque[0].chequeNo; else not\\\">{{val.cheque[0].chequeNo}}</td>\\n                            </tr>\\n                            </tbody>\\n                        </table>\\n                    </td>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"category == 'Credit Transactions'\\\">\\n            <h1>Credit Transactions</h1>\\n            <table class=\\\"table table-bordered\\\">\\n                <thead>\\n                <tr>\\n                    <th style=\\\"width: 16.66%;\\\">Date</th>\\n                    <th style=\\\"width: 60%;\\\">Particulars</th>\\n                    <th>Mode</th>\\n                    <th>Credit</th>\\n                    <th>Type</th>\\n                    <th>User Id</th>\\n                </tr>\\n                </thead>\\n                <tbody *ngFor=\\\"let val of accountData\\\">\\n                <tr>\\n                    <td *ngIf=\\\"isDate(val.account.date); else notDate\\\">{{val.account.date| date:'dd-MM-yyyy'}}</td>\\n                    <ng-template #notDate>\\n                        <td>{{val.account.date}}</td>\\n                    </ng-template>\\n                    <td *ngIf=\\\"val.account.particulars; else not\\\">{{val.account.particulars}}</td>\\n                    <td *ngIf=\\\"val.account.mode; else not\\\">{{val.account.mode}}</td>\\n                    <td class=\\\"table-success\\\" *ngIf=\\\"val.account.credit; else not\\\">{{val.account.credit| indianCurrency}}</td>\\n                    <td *ngIf=\\\"val.account.type; else not\\\">{{val.account.type}}</td>\\n                    <td *ngIf=\\\"val.account.userId; else not\\\">{{val.account.userId}}</td>\\n                </tr>\\n                <tr>\\n                    <td *ngIf=\\\"val.cheque\\\" align=\\\"center\\\" colspan=\\\"6\\\">\\n                        <h3 style=\\\"font-weight: bold\\\">Cheque Details</h3>\\n                        <table style=\\\"width: 100%;\\\">\\n                            <thead>\\n                            <tr>\\n                                <th style=\\\"width: 16.66%;\\\">Cheque Date</th>\\n                                <th style=\\\"width: 60%;\\\">Bank Name</th>\\n                                <th>Cheque Number</th>\\n                            </tr>\\n                            </thead>\\n                            <tbody>\\n                            <tr>\\n                                <td *ngIf=\\\"val.cheque[0].chequeDate; else not\\\">{{val.cheque[0].chequeDate| date:'dd-MM-yyyy'}}</td>\\n                                <td class=\\\"col-5\\\" *ngIf=\\\"val.cheque[0].bankName; else not\\\">{{val.cheque[0].bankName}}</td>\\n                                <td *ngIf=\\\"val.cheque[0].chequeNo; else not\\\">{{val.cheque[0].chequeNo}}</td>\\n                            </tr>\\n                            </tbody>\\n                        </table>\\n                    </td>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"category == 'Debit Transactions'\\\">\\n            <h1>Debit Transactions</h1>\\n            <table class=\\\"table table-bordered\\\">\\n                <thead>\\n                <tr>\\n                    <th style=\\\"width: 16.66%;\\\">Date</th>\\n                    <th style=\\\"width: 60%;\\\">Particulars</th>\\n                    <th>Mode</th>\\n                    <th>Debit</th>\\n                    <th>Type</th>\\n                    <th>User Id</th>\\n                </tr>\\n                </thead>\\n                <tbody *ngFor=\\\"let val of accountData\\\">\\n                <tr>\\n                    <td *ngIf=\\\"isDate(val.account.date); else notDate\\\">{{val.account.date| date:'dd-MM-yyyy'}}</td>\\n                    <ng-template #notDate>\\n                        <td>{{val.account.date}}</td>\\n                    </ng-template>\\n                    <td *ngIf=\\\"val.account.particulars; else not\\\">{{val.account.particulars}}</td>\\n                    <td *ngIf=\\\"val.account.mode; else not\\\">{{val.account.mode}}</td>\\n                    <td class=\\\"table-danger\\\" *ngIf=\\\"val.account.debit; else not\\\">{{val.account.debit| indianCurrency}}</td>\\n                    <td *ngIf=\\\"val.account.type; else not\\\">{{val.account.type}}</td>\\n                    <td *ngIf=\\\"val.account.userId; else not\\\">{{val.account.userId}}</td>\\n                </tr>\\n                <tr>\\n                    <td *ngIf=\\\"val.cheque\\\" align=\\\"center\\\" colspan=\\\"6\\\">\\n                        <h3 style=\\\"font-weight: bold\\\">Cheque Details</h3>\\n                        <table style=\\\"width: 100%;\\\">\\n                            <thead>\\n                            <tr>\\n                                <th style=\\\"width: 16.66%;\\\">Cheque Date</th>\\n                                <th style=\\\"width: 60%;\\\">Bank Name</th>\\n                                <th>Cheque Number</th>\\n                            </tr>\\n                            </thead>\\n                            <tbody>\\n                            <tr>\\n                                <td *ngIf=\\\"val.cheque[0].chequeDate; else not\\\">{{val.cheque[0].chequeDate| date:'dd-MM-yyyy'}}</td>\\n                                <td class=\\\"col-5\\\" *ngIf=\\\"val.cheque[0].bankName; else not\\\">{{val.cheque[0].bankName}}</td>\\n                                <td *ngIf=\\\"val.cheque[0].chequeNo; else not\\\">{{val.cheque[0].chequeNo}}</td>\\n                            </tr>\\n                            </tbody>\\n                        </table>\\n                    </td>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"category == 'Expense Deductions'\\\">\\n            <h1 id=\\\"subDetail\\\">Expense Details</h1>\\n            <table class=\\\"table table-bordered\\\">\\n                <thead>\\n                <tr id=\\\"headers\\\">\\n                    <th style=\\\"width: 16.66%;\\\">Date</th>\\n                    <th style=\\\"width: 60%;\\\">Particulars</th>\\n                    <th>Mode</th>\\n                    <th>Credit</th>\\n                    <th>Debit</th>\\n                    <th>User Id</th>\\n                </tr>\\n                </thead>\\n                <tbody *ngFor=\\\"let val of accountData\\\">\\n                <tr>\\n                    <td *ngIf=\\\"isDate(val.account.date); else notDate\\\" id=\\\"date\\\">{{val.account.date| date:'dd-MM-yyyy'}}</td>\\n                    <ng-template #notDate>\\n                        <td>{{val.account.date}}</td>\\n                    </ng-template>\\n                    <td *ngIf=\\\"val.account.particulars; else not\\\">{{val.account.particulars}}</td>\\n                    <td *ngIf=\\\"val.account.mode; else not\\\">{{val.account.mode}}</td>\\n                    <td class=\\\"table-success\\\" *ngIf=\\\"val.account.credit; else not\\\">{{val.account.credit| indianCurrency}}</td>\\n                    <td class=\\\"table-danger\\\" *ngIf=\\\"val.account.debit; else not\\\" id=\\\"debit\\\">{{val.account.debit| indianCurrency}}</td>\\n                    <td *ngIf=\\\"val.account.userId; else not\\\">{{val.account.userId}}</td>\\n                </tr>\\n                <tr>\\n                    <td *ngIf=\\\"val.cheque\\\" align=\\\"center\\\" colspan=\\\"6\\\">\\n                        <h3 style=\\\"font-weight: bold\\\">Cheque Details</h3>\\n                        <table style=\\\"width: 100%;\\\">\\n                            <thead>\\n                            <tr>\\n                                <th style=\\\"width: 16.66%;\\\">Cheque Date</th>\\n                                <th style=\\\"width: 60%;\\\">Bank Name</th>\\n                                <th>Cheque Number</th>\\n                            </tr>\\n                            </thead>\\n                            <tbody>\\n                            <tr>\\n                                <td *ngIf=\\\"val.cheque[0].chequeDate; else not\\\">{{val.cheque[0].chequeDate| date:'dd-MM-yyyy'}}</td>\\n                                <td class=\\\"col-5\\\" *ngIf=\\\"val.cheque[0].bankName; else not\\\">{{val.cheque[0].bankName}}</td>\\n                                <td *ngIf=\\\"val.cheque[0].chequeNo; else not\\\">{{val.cheque[0].chequeNo}}</td>\\n                            </tr>\\n                            </tbody>\\n                        </table>\\n                    </td>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"category == 'Credit+Debit+Expense Transactions'\\\">\\n            <h1>Credit + Debit + Expense Transactions</h1>\\n            <table class=\\\"table table-bordered\\\">\\n                <thead>\\n                <tr>\\n                    <th style=\\\"width: 16.66%;\\\">Date</th>\\n                    <th style=\\\"width: 60%;\\\">Particulars</th>\\n                    <th>Mode</th>\\n                    <th>Credit</th>\\n                    <th>Debit</th>\\n                    <th>Type</th>\\n                    <th>User Id</th>\\n                </tr>\\n                </thead>\\n                <tbody *ngFor=\\\"let val of accountData\\\">\\n                <tr>\\n                    <td *ngIf=\\\"isDate(val.account.date); else notDate\\\">{{val.account.date| date:'dd-MM-yyyy'}}</td>\\n                    <ng-template #notDate>\\n                        <td>{{val.account.date}}</td>\\n                    </ng-template>\\n                    <td *ngIf=\\\"val.account.particulars; else not\\\">{{val.account.particulars}}</td>\\n                    <td *ngIf=\\\"val.account.mode; else not\\\">{{val.account.mode}}</td>\\n                    <td class=\\\"table-success\\\" *ngIf=\\\"val.account.credit; else not\\\">{{val.account.credit| indianCurrency}}</td>\\n                    <td class=\\\"table-danger\\\" *ngIf=\\\"val.account.debit; else not\\\">{{val.account.debit| indianCurrency}}</td>\\n                    <td *ngIf=\\\"val.account.type; else not\\\">{{val.account.type}}</td>\\n                    <td *ngIf=\\\"val.account.userId; else not\\\">{{val.account.userId}}</td>\\n                </tr>\\n                <tr>\\n                    <td *ngIf=\\\"val.cheque\\\" align=\\\"center\\\" colspan=\\\"7\\\">\\n                        <h3 style=\\\"font-weight: bold\\\">Cheque Details</h3>\\n                        <table style=\\\"width: 100%;\\\">\\n                            <thead>\\n                            <tr>\\n                                <th style=\\\"width: 16.66%;\\\">Cheque Date</th>\\n                                <th style=\\\"width: 60%;\\\">Bank Name</th>\\n                                <th>Cheque Number</th>\\n                            </tr>\\n                            </thead>\\n                            <tbody>\\n                            <tr>\\n                                <td *ngIf=\\\"val.cheque[0].chequeDate; else not\\\">{{val.cheque[0].chequeDate| date:'dd-MM-yyyy'}}</td>\\n                                <td class=\\\"col-5\\\" *ngIf=\\\"val.cheque[0].bankName; else not\\\">{{val.cheque[0].bankName}}</td>\\n                                <td *ngIf=\\\"val.cheque[0].chequeNo; else not\\\">{{val.cheque[0].chequeNo}}</td>\\n                            </tr>\\n                            </tbody>\\n                        </table>\\n                    </td>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </ng-container>\\n        <br>\\n        <ng-template #not>\\n            <td>-</td>\\n        </ng-template>\\n    </mat-dialog-content>\\n</div>\\n<mat-dialog-actions align=\\\"end\\\">\\n    <button class=\\\"btn-danger\\\" mat-button mat-dialog-close>Cancel</button>\\n    <button class=\\\"btn-success\\\" mat-button (click)=\\\"onConfirmClick()\\\" cdkFocusInitial>Download</button>\\n</mat-dialog-actions>\\n\\n\";","export default \"<sb-layout-dashboard>\\n    <sb-dashboard-head title=\\\"{{'Accountant.Pages.Upload'| translate}}\\\"></sb-dashboard-head>\\n    <hr class=\\\"rounded\\\">\\n    <br>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-sm-2\\\"></div>\\n        <div class=\\\"col\\\">\\n            <button class=\\\"btn-primary\\\" (click)=\\\"showEmployeeAccountInfo()\\\">{{'Accountant.Tables.CreateEmp'| translate}}</button>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <button class=\\\"btn-primary\\\" (click)=\\\"showBankAccountInfo()\\\">{{'Accountant.Tables.CreateBank'| translate}}</button>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <button class=\\\"btn-primary\\\" (click)=\\\"showReportInfo()\\\">{{'Accountant.Tables.Generate'| translate}}</button>\\n        </div>\\n        <div class=\\\"col-sm-2\\\"></div>\\n    </div>\\n    <br>\\n    <br>\\n    <div class=\\\"row\\\" *ngIf=\\\"employeeAccount\\\">\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n        <div class=\\\"col-xl-8 col-md-10\\\">\\n            <sb-card>\\n                <div class=\\\"card-header\\\"><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>{{'Accountant.Tables.CreateEmp'| translate}}</div>\\n                <div class=\\\"card-body table-responsive\\\">\\n                    <form [formGroup]=\\\"employeeForm\\\" (ngSubmit)=\\\"send()\\\">\\n                        <table class=\\\"table table-striped\\\">\\n                            <tbody>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.EmployeeNo'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"number form-control\\\" formControlName=\\\"employeeId\\\" required />\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('employeeId').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.EmployeeName'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"text\\\" formControlName=\\\"employeeName\\\" required />\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('employeeName').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.Father'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"text\\\" formControlName=\\\"fatherName\\\" />\\n                                    </label>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.PermAddress'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"text\\\" formControlName=\\\"permAddress\\\" />\\n                                    </label>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.SameAddress'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"checkbox\\\" (click)=\\\"sameAddress($event)\\\" />\\n                                    </label>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.CurrAddress'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"text\\\" formControlName=\\\"currAddress\\\" />\\n                                    </label>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.Email'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"email\\\" formControlName=\\\"email\\\" />\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('email').hasError('email')\\\">Provide valid email</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.MobNo'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"number\\\" formControlName=\\\"mobileNo\\\" minlength=\\\"10\\\" maxlength=\\\"10\\\" />\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('mobileNo').hasError('min')\\\">Number should be of 10 digits</div>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('mobileNo').hasError('max')\\\">Number should be of 10 digits</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.AltMobNo'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"number\\\" formControlName=\\\"altMobileNo\\\" minlength=\\\"10\\\" maxlength=\\\"10\\\" />\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('altMobileNo').hasError('min')\\\">Number should be of 10 digits</div>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('altMobileNo').hasError('max')\\\">Number should be of 10 digits</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.Landline'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"number\\\" formControlName=\\\"landlineNo\\\" />\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('landlineNo').hasError('pattern')\\\">Invalid Number!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.PAN'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"number\\\" formControlName=\\\"pan\\\" />\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('pan').hasError('pattern')\\\">Invalid Number!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.Aadhar'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"number\\\" formControlName=\\\"aadharNo\\\" />\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('aadharNo').hasError('pattern')\\\">Invalid Number!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.EnrollDate'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"date\\\" formControlName=\\\"enrollDate\\\" required/>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('enrollDate').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.Fee'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"number\\\" formControlName=\\\"amount\\\" required/>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('amount').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.Mode' | translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <select class=\\\"custom-select\\\" formControlName=\\\"type\\\" required>\\n                                            <option>{{'Accountant.Tables.Cash' | translate}}</option>\\n                                            <option>{{'Accountant.Tables.Cheque' | translate}}</option>\\n                                        </select>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('type').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr *ngIf=\\\"employeeForm.get('type').value == 'Cheque';\\\">\\n                                <td>{{'Accountant.Tables.BankName' | translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <select class=\\\"custom-select\\\" formControlName=\\\"bankName\\\">\\n                                            <option *ngFor=\\\"let val of bankList\\\">{{val.bankName}}</option>\\n                                        </select>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('bankName').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr *ngIf=\\\"employeeForm.get('type').value == 'Cheque'\\\">\\n                                <td>{{'Accountant.Tables.ChequeDate' | translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"date\\\" formControlName=\\\"chequeDate\\\"/>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('chequeDate').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr *ngIf=\\\"employeeForm.get('type').value == 'Cheque'\\\">\\n                                <td>{{'Accountant.Tables.ChequeNo' | translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"text\\\" formControlName=\\\"chequeNo\\\"/>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('chequeNo').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.Remark'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"text\\\" formControlName=\\\"purpose\\\" maxlength=\\\"1000\\\"/>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"employeeForm.get('purpose').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            </tbody>\\n                        </table>\\n                        <button type=\\\"submit\\\">{{'Accountant.Tables.Submit'| translate}}</button>\\n                    </form>\\n                </div>\\n            </sb-card>\\n        </div>\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"report\\\">\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n        <div class=\\\"col-xl-8 col-md-10\\\">\\n            <sb-card>\\n                <div class=\\\"card-header\\\"><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>{{'Accountant.Tables.Generate'| translate}}</div>\\n                <div class=\\\"card-body table-responsive\\\">\\n                    <form [formGroup]=\\\"reportForm\\\" (ngSubmit)=\\\"openDialog()\\\">\\n                        <table class=\\\"table table-striped\\\" id=\\\"content\\\">\\n                        <tbody>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Start'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"date\\\" formControlName=\\\"startDate\\\"/>\\n                                </label>\\n                                <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"reportForm.get('startDate').hasError('required')\\\">Required!</div>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.End'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"date\\\" formControlName=\\\"endDate\\\"/>\\n                                </label>\\n                                <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"reportForm.get('endDate').hasError('required')\\\">Required!</div>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Category'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <select class=\\\"custom-select\\\" formControlName=\\\"category\\\">\\n                                        <option>{{'Accountant.Tables.LoanRecord'| translate}}</option>\\n                                        <option>{{'Accountant.Tables.CreditRecord'| translate}}</option>\\n                                        <option>{{'Accountant.Tables.DebitRecord'| translate}}</option>\\n                                        <option>{{'Accountant.Tables.ExpenseRecord'| translate}}</option>\\n                                        <option>{{'Accountant.Tables.CdeRecord'| translate}}</option>\\n                                        <option>{{'Accountant.Tables.CashRecord'| translate}}</option>\\n                                        <option>{{'Accountant.Tables.ChequeRecord'| translate}}</option>\\n                                    </select>\\n                                </label>\\n                                <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"reportForm.get('category').hasError('required')\\\">Required!</div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </table>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"!this.reportForm.valid\\\">{{'Accountant.Tables.Submit'| translate}}</button>\\n                    </form>\\n                </div>\\n            </sb-card>\\n        </div>\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"bankAccount\\\">\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n        <div class=\\\"col-xl-8 col-md-10\\\">\\n            <sb-card>\\n                <div class=\\\"card-header\\\"><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>{{'Accountant.Tables.CreateBank'| translate}}</div>\\n                <div class=\\\"card-body table-responsive\\\">\\n                    <form [formGroup]=\\\"bankForm\\\" (ngSubmit)=\\\"sendBankData()\\\">\\n                        <table class=\\\"table table-striped\\\">\\n                        <tbody>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.BankName' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"text\\\" formControlName=\\\"bankName\\\" required />\\n                                </label>\\n                                <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"bankForm.get('bankName').hasError('required')\\\">Required!</div>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Address' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" maxlength=\\\"1000\\\" formControlName=\\\"bankAddress\\\"/>\\n                                </label>\\n                                <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"bankForm.get('bankAddress').hasError('required')\\\">Required!</div>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.AccountNo' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"number\\\" class=\\\"form-control\\\" formControlName=\\\"accountNo\\\" pattern=\\\"^\\\\d{9,18}$\\\"/>\\n                                </label>\\n                                <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"bankForm.get('accountNo').hasError('required')\\\">Required!</div>\\n                                <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"bankForm.get('accountNo').hasError('pattern')\\\">Length should be from 9 to 18</div>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.TypeAccount' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <select class=\\\"custom-select form-control\\\" required formControlName=\\\"accountType\\\">\\n                                        <option>{{'Accountant.Tables.SavingAcc' | translate}}</option>\\n                                        <option>{{'Accountant.Tables.Current' | translate}}</option>\\n                                    </select>\\n                                </label>\\n                                <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"bankForm.get('accountType').hasError('required')\\\">Required!</div>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Nickname' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"text\\\" formControlName=\\\"nickName\\\" maxlength=\\\"12\\\" required/>\\n                                </label>\\n                                <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"bankForm.get('nickName').hasError('required')\\\">Required!</div>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Code' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"text\\\" formControlName=\\\"code\\\" required pattern=\\\"^[A-Z]{4}[0][A-Z0-9]{6}$\\\" minlength=\\\"11\\\" maxlength=\\\"11\\\" />\\n                                </label>\\n                                <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"bankForm.get('code').hasError('required')\\\">Required!</div>\\n                                <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"bankForm.get('code').hasError('pattern')\\\">Invalid Format!</div>\\n                                <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"bankForm.get('code').hasError('minlength')\\\">Minimum Length should be 11</div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </table>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"!this.bankForm.valid\\\">{{'Accountant.Tables.Submit'| translate}}</button>\\n                    </form>\\n                </div>\\n            </sb-card>\\n        </div>\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n    </div>\\n</sb-layout-dashboard>\\n\\n\\n\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3VwbG9hZC1hbGwvZGlhbG9nL2RpYWxvZy5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, ElementRef, Inject, OnInit, ViewChild } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as moment from 'moment';\nimport pdfMake from 'pdfmake/build/pdfmake';\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\n@Component({\n    selector: 'sb-dialog',\n    templateUrl: './dialog.component.html',\n    styleUrls: ['./dialog.component.scss'],\n})\nexport class DialogComponent {\n    start = '';\n    end = '';\n    accountData = [];\n    loanData = [];\n    category = '';\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private data: any,\n        private dialogRef: MatDialogRef<DialogComponent>\n    ) {\n        console.log(data);\n        if (data) {\n            this.accountData = data.accountData || this.accountData;\n            this.loanData = data.loan || this.loanData;\n            this.category = data.category || this.category;\n            this.start = data.start || this.start;\n            this.end = data.end || this.end;\n        }\n    }\n    createLoanBody(data: any[]) {\n        const body: any[][] = [];\n        const columns = [\n            { text: 'Loan Date', style: 'tableHeader' },\n            { text: 'Loan Amount', style: 'tableHeader' },\n            { text: 'Loan Duration', style: 'tableHeader' },\n            { text: 'Loan Type', style: 'tableHeader' },\n            { text: 'Close Loan', style: 'tableHeader' },\n            { text: 'Closure Status', style: 'tableHeader' },\n            { text: 'Date of Loan Closure', style: 'tableHeader' },\n            { text: 'User Id', style: 'tableHeader' },\n        ];\n        body.push(columns);\n        data.forEach(val => {\n            if (this.isDate(val.loanData.date)) {\n                if (this.isDate(val.loanData.dateOfClosure)) {\n                    if (val.loanData.closeLoan === 0) {\n                        body.push([\n                            // @ts-ignore\n                            moment(val.loanData.date).format('DD-MM-YYYY'),\n                            val.loanData.loanAmount.toString(),\n                            val.loanData.loanDuration.toString(),\n                            val.loanData.loanType.toString(),\n                            'No',\n                            val.loanData.closeStatus.toString(),\n                            // @ts-ignore\n                            moment(val.loanData.dateOfClosure).format('DD-MM-YYYY'),\n                            val.loanData.userId,\n                        ]);\n                    } else {\n                        body.push([\n                            // @ts-ignore\n                            moment(val.loanData.date).format('DD-MM-YYYY'),\n                            val.loanData.loanAmount.toString(),\n                            val.loanData.loanDuration.toString(),\n                            val.loanData.loanType.toString(),\n                            'Yes',\n                            val.loanData.closeStatus.toString(),\n                            // @ts-ignore\n                            moment(val.loanData.dateOfClosure).format('DD-MM-YYYY'),\n                            val.loanData.userId,\n                        ]);\n                    }\n                } else {\n                    if (val.loanData.closeLoan === 0) {\n                        body.push([\n                            // @ts-ignore\n                            moment(val.loanData.date).format('DD-MM-YYYY'),\n                            val.loanData.loanAmount.toString(),\n                            val.loanData.loanDuration.toString(),\n                            val.loanData.loanType.toString(),\n                            'No',\n                            val.loanData.closeStatus,\n                            val.loanData.dateOfClosure,\n                            val.loanData.userId,\n                        ]);\n                    } else {\n                        body.push([\n                            // @ts-ignore\n                            moment(val.loanData.date).format('DD-MM-YYYY'),\n                            val.loanData.loanAmount.toString(),\n                            val.loanData.loanDuration.toString(),\n                            val.loanData.loanType.toString(),\n                            'Yes',\n                            val.loanData.closeStatus,\n                            val.loanData.dateOfClosure,\n                            val.loanData.userId,\n                        ]);\n                    }\n                }\n            } else {\n                if (this.isDate(val.loanData.dateOfClosure)) {\n                    if (val.loanData.closeLoan === 0) {\n                        body.push([\n                            val.loanData.date.toString(),\n                            val.loanData.loanAmount.toString(),\n                            val.loanData.loanDuration.toString(),\n                            val.loanData.loanType.toString(),\n                            'No',\n                            val.loanData.closeStatus,\n                            // @ts-ignore\n                            moment(val.loanData.dateOfClosure).format('DD-MM-YYYY'),\n                            val.loanData.userId,\n                        ]);\n                    } else {\n                        body.push([\n                            val.loanData.date.toString(),\n                            val.loanData.loanAmount.toString(),\n                            val.loanData.loanDuration.toString(),\n                            val.loanData.loanType.toString(),\n                            'Yes',\n                            val.loanData.closeStatus,\n                            // @ts-ignore\n                            moment(val.loanData.dateOfClosure).format('DD-MM-YYYY'),\n                            val.loanData.userId,\n                        ]);\n                    }\n                } else {\n                    if (val.loanData.closeLoan === 0) {\n                        body.push([\n                            val.loanData.date.toString(),\n                            val.loanData.loanAmount.toString(),\n                            val.loanData.loanDuration.toString(),\n                            val.loanData.loanType.toString(),\n                            'No',\n                            val.loanData.closeStatus,\n                            // @ts-ignore\n                            moment(val.loanData.dateOfClosure).format('DD-MM-YYYY'),\n                            val.loanData.userId,\n                        ]);\n                    } else {\n                        body.push([\n                            val.loanData.date.toString(),\n                            val.loanData.loanAmount.toString(),\n                            val.loanData.loanDuration.toString(),\n                            val.loanData.loanType.toString(),\n                            'Yes',\n                            val.loanData.closeStatus,\n                            // @ts-ignore\n                            moment(val.loanData.dateOfClosure).format('DD-MM-YYYY'),\n                            val.loanData.userId,\n                        ]);\n                    }\n                    body.push([\n                        val.loanData.date.toString(),\n                        val.loanData.loanAmount.toString(),\n                        val.loanData.loanDuration.toString(),\n                        val.loanData.loanType.toString(),\n                        val.loanData.closeLoan.toString(),\n                        val.loanData.closeStatus,\n                        val.loanData.dateOfClosure,\n                        val.loanData.userId,\n                    ]);\n                }\n            }\n            if (val.loanBook) {\n                body.push([this.createLoanBookTable(val.loanBook), {}, {}, {}, {}, {}, {}, {}]);\n            }\n            if (val.closeData) {\n                body.push([\n                    this.createCloseTable(val.closeData, val.loanData, val.chequeData),\n                    {},\n                    {},\n                    {},\n                    {},\n                    {},\n                    {},\n                    {},\n                ]);\n            }\n        });\n        console.log(body);\n        return body;\n    }\n    createLoanBookTable(data: any) {\n        return {\n            colSpan: 8,\n            alignment: 'center',\n            style: 'nestedTable',\n            table: {\n                widths: ['*', '*', '*', '*', '*', '*', '*', '*'],\n                headerRows: 1,\n                body: this.createLoanBookBody(data),\n            },\n        };\n    }\n    createLoanBookBody(data: any[]) {\n        const body: any[][] = [];\n        body.push([\n            { text: 'EMI Details', colSpan: 8, style: 'subheader', alignment: 'center' },\n            {},\n            {},\n            {},\n            {},\n            {},\n            {},\n        ]);\n        body.push([\n            { text: 'EMI Date', colSpan: 2, style: 'tableHeader', alignment: 'center' },\n            {},\n            { text: 'Particulars', colSpan: 3, style: 'tableHeader', alignment: 'center' },\n            {},\n            {},\n            { text: 'EMI Paid', colSpan: 3, style: 'tableHeader', alignment: 'center' },\n            {},\n            {},\n        ]);\n        data.forEach(val => {\n            console.log(val);\n            if (this.isDate(val.date)) {\n                body.push([\n                    {\n                        // @ts-ignore\n                        text: moment(val.date).format('DD-MM-YYYY'),\n                        colSpan: 2,\n                        alignment: 'center',\n                    },\n                    {},\n                    { text: val.particulars.toString(), colSpan: 3, alignment: 'center' },\n                    {},\n                    {},\n                    { text: val.credit.toString(), colSpan: 3, alignment: 'center' },\n                    {},\n                    {},\n                ]);\n            } else {\n                body.push([\n                    { text: val.date.toString(), colSpan: 2, alignment: 'center' },\n                    {},\n                    { text: val.particulars.toString(), colSpan: 3, alignment: 'center' },\n                    {},\n                    {},\n                    { text: val.credit.toString(), colSpan: 3, alignment: 'center' },\n                    {},\n                    {},\n                ]);\n            }\n        });\n\n        return body;\n    }\n    createCloseTable(data: any, loanData: any, chequeData: any) {\n        return {\n            colSpan: 8,\n            alignment: 'center',\n            style: 'nestedTable',\n            table: {\n                widths: ['14.66%', 'auto', '*', '*', '*', '*', '*', 'auto'],\n                headerRows: 1,\n                body: this.createCloseBody(data, loanData, chequeData),\n            },\n        };\n    }\n    createCloseBody(data: any[], loanData: any, chequeData: any[]) {\n        const body: any[][] = [];\n        body.push([\n            { text: 'Loan Closure Details', colSpan: 8, style: 'subheader', alignment: 'center' },\n            {},\n            {},\n            {},\n            {},\n            {},\n            {},\n            {},\n        ]);\n        if (data[0].mode === 'Cash') {\n            body.push([\n                { text: 'Date', colSpan: 2, style: 'tableHeader', alignment: 'center' },\n                {},\n                { text: 'Loan Status', colSpan: 2, style: 'tableHeader', alignment: 'center' },\n                {},\n                { text: 'Mode of Payment', colSpan: 2, style: 'tableHeader', alignment: 'center' },\n                {},\n                { text: 'Paid Amount', colSpan: 2, style: 'tableHeader', alignment: 'center' },\n                {},\n            ]);\n            if (this.isDate(data[0].date)) {\n                body.push([\n                    {\n                        // @ts-ignore\n                        text: moment(data[0].date).format('DD-MM-YYYY'),\n                        colSpan: 2,\n                        alignment: 'center',\n                    },\n                    {},\n                    { text: loanData.closeStatus, colSpan: 2, alignment: 'center' },\n                    {},\n                    { text: data[0].mode.toString(), colSpan: 2, alignment: 'center' },\n                    {},\n                    { text: data[0].credit.toString(), colSpan: 2, alignment: 'center' },\n                    {},\n                ]);\n            } else {\n                body.push([\n                    {\n                        text: data[0].date.toString(),\n                        colSpan: 2,\n                        alignment: 'center',\n                    },\n                    {},\n                    { text: loanData.closeStatus, colSpan: 2, alignment: 'center' },\n                    {},\n                    { text: data[0].mode.toString(), colSpan: 2, alignment: 'center' },\n                    {},\n                    { text: data[0].credit.toString(), colSpan: 2, alignment: 'center' },\n                    {},\n                ]);\n            }\n\n            return body;\n        } else {\n            body.push([\n                { text: 'Date', style: 'tableHeader', alignment: 'center' },\n                { text: 'Loan Status', style: 'tableHeader', alignment: 'center' },\n                { text: 'Mode of Payment', style: 'tableHeader', alignment: 'center' },\n                { text: 'Paid Amount', style: 'tableHeader', alignment: 'center' },\n                { text: 'Cheque Date', style: 'tableHeader', alignment: 'center' },\n                { text: 'Bank Name', style: 'tableHeader', alignment: 'center' },\n                { text: 'Cheque Number', colSpan: 2, style: 'tableHeader', alignment: 'center' },\n                {},\n            ]);\n            if (this.isDate(data[0].date)) {\n                if (this.isDate(chequeData[0].chequeDate)) {\n                    body.push([\n                        {\n                            // @ts-ignore\n                            text: moment(data[0].date).format('DD-MM-YYYY'),\n                            alignment: 'center',\n                        },\n                        { text: loanData.closeStatus, alignment: 'center' },\n                        { text: data[0].mode.toString(), alignment: 'center' },\n                        { text: data[0].credit.toString(), alignment: 'center' },\n                        {\n                            // @ts-ignore\n                            text: moment(chequeData[0].chequeDate).format('DD-MM-YYYY'),\n                            alignment: 'center',\n                        },\n                        { text: chequeData[0].bankName.toString(), alignment: 'center' },\n                        {\n                            text: chequeData[0].chequeNo.toString(),\n                            colSpan: 2,\n                            alignment: 'center',\n                        },\n                        {},\n                    ]);\n                } else {\n                    body.push([\n                        {\n                            // @ts-ignore\n                            text: moment(data[0].date).format('DD-MM-YYYY'),\n                            alignment: 'center',\n                        },\n                        { text: loanData.closeStatus, alignment: 'center' },\n                        { text: data[0].mode.toString(), alignment: 'center' },\n                        { text: data[0].credit.toString(), alignment: 'center' },\n                        {\n                            text: chequeData[0].chequeDate,\n                            alignment: 'center',\n                        },\n                        { text: chequeData[0].bankName.toString(), alignment: 'center' },\n                        {\n                            text: chequeData[0].chequeNo.toString(),\n                            colSpan: 2,\n                            alignment: 'center',\n                        },\n                        {},\n                    ]);\n                }\n            } else {\n                if (this.isDate(chequeData[0].chequeDate)) {\n                    body.push([\n                        {\n                            text: data[0].date,\n                            alignment: 'center',\n                        },\n                        { text: loanData.closeStatus, alignment: 'center' },\n                        { text: data[0].mode.toString(), alignment: 'center' },\n                        { text: data[0].credit.toString(), alignment: 'center' },\n                        {\n                            // @ts-ignore\n                            text: moment(chequeData[0].chequeDate).format('DD-MM-YYYY'),\n                            alignment: 'center',\n                        },\n                        { text: chequeData[0].bankName.toString(), alignment: 'center' },\n                        {\n                            text: chequeData[0].chequeNo.toString(),\n                            colSpan: 2,\n                            alignment: 'center',\n                        },\n                        {},\n                    ]);\n                } else {\n                    body.push([\n                        {\n                            text: data[0].date,\n                            alignment: 'center',\n                        },\n                        { text: loanData.closeStatus, alignment: 'center' },\n                        { text: data[0].mode.toString(), alignment: 'center' },\n                        { text: data[0].credit.toString(), alignment: 'center' },\n                        {\n                            text: chequeData[0].chequeDate,\n                            alignment: 'center',\n                        },\n                        { text: chequeData[0].bankName.toString(), alignment: 'center' },\n                        {\n                            text: chequeData[0].chequeNo.toString(),\n                            colSpan: 2,\n                            alignment: 'center',\n                        },\n                        {},\n                    ]);\n                }\n            }\n\n            return body;\n        }\n    }\n    createCashBody(data: any[]) {\n        const columns = [\n            { text: 'Date', style: 'tableHeader' },\n            { text: 'Particulars', style: 'tableHeader' },\n            { text: 'Credit', style: 'tableHeader', fillColor: '#7CFC00' },\n            { text: 'Debit', style: 'tableHeader', fillColor: '#DC143C' },\n            { text: 'Type', style: 'tableHeader' },\n            { text: 'User Id', style: 'tableHeader' },\n        ];\n        const body: any[][] = [];\n        body.push(columns);\n        data.forEach(val => {\n            if (this.isDate(val.date)) {\n                if (val.credit === null) {\n                    body.push([\n                        // @ts-ignore\n                        moment(val.date).format('DD-MM-YYYY'),\n                        val.particulars.toString(),\n                        { text: '-', fillColor: '#7CFC00' },\n                        { text: val.debit, fillColor: '#DC143C' },\n                        val.type,\n                        val.userId.toString(),\n                    ]);\n                } else {\n                    body.push([\n                        // @ts-ignore\n                        moment(val.date).format('DD-MM-YYYY'),\n                        val.particulars.toString(),\n                        { text: val.credit.toString(), fillColor: '#7CFC00' },\n                        { text: '-', fillColor: '#DC143C' },\n                        val.type,\n                        val.userId.toString(),\n                    ]);\n                }\n            } else {\n                if (val.credit === null) {\n                    body.push([\n                        val.date,\n                        val.particulars.toString(),\n                        { text: '-', fillColor: '#7CFC00' },\n                        { text: val.debit, fillColor: '#DC143C' },\n                        val.type,\n                        val.userId.toString(),\n                    ]);\n                } else {\n                    body.push([\n                        val.date.toString(),\n                        val.particulars.toString(),\n                        { text: val.credit.toString(), fillColor: '#7CFC00' },\n                        { text: '-', fillColor: '#DC143C' },\n                        val.type,\n                        val.userId.toString(),\n                    ]);\n                }\n            }\n        });\n        console.log(body);\n        return body;\n    }\n    createChequeTranBody(data: any[]) {\n        const columns = [\n            { text: 'Date', style: 'tableHeader' },\n            { text: 'Particulars', style: 'tableHeader' },\n            { text: 'Credit', style: 'tableHeader', fillColor: '#7CFC00' },\n            { text: 'Debit', style: 'tableHeader', fillColor: '#DC143C' },\n            { text: 'Type', style: 'tableHeader' },\n            { text: 'User Id', style: 'tableHeader' },\n        ];\n        const body: any[][] = [];\n        body.push(columns);\n        data.forEach(val => {\n            if (this.isDate(val.account.date)) {\n                if (val.account.credit === null) {\n                    body.push([\n                        // @ts-ignore\n                        moment(val.account.date).format('DD-MM-YYYY'),\n                        val.account.particulars.toString(),\n                        { text: '-', fillColor: '#7CFC00' },\n                        { text: val.account.debit, fillColor: '#DC143C' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                } else {\n                    body.push([\n                        // @ts-ignore\n                        moment(val.account.date).format('DD-MM-YYYY'),\n                        val.account.particulars.toString(),\n                        { text: val.account.credit, fillColor: '#7CFC00' },\n                        { text: '-', fillColor: '#DC143C' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                }\n            } else {\n                if (val.account.credit === null) {\n                    body.push([\n                        val.account.date,\n                        val.account.particulars.toString(),\n                        { text: '-', fillColor: '#7CFC00' },\n                        { text: val.account.debit, fillColor: '#DC143C' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                } else {\n                    body.push([\n                        val.account.date.toString(),\n                        val.account.particulars.toString(),\n                        val.account.mode.toString(),\n                        { text: val.account.credit, fillColor: '#7CFC00' },\n                        { text: '-', fillColor: '#DC143C' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                }\n            }\n            if (val.cheque) {\n                body.push([this.createChequeTable(val.cheque), {}, {}, {}, {}, {}]);\n            }\n        });\n        console.log(body);\n        return body;\n    }\n    createCreditBody(data: any[]) {\n        const body: any[][] = [];\n        const columns = [\n            { text: 'Date', style: 'tableHeader' },\n            { text: 'Particulars', style: 'tableHeader' },\n            { text: 'Mode', style: 'tableHeader' },\n            { text: 'Credit', style: 'tableHeader', fillColor: '#7CFC00' },\n            { text: 'Type', style: 'tableHeader' },\n            { text: 'User Id', style: 'tableHeader' },\n        ];\n        body.push(columns);\n        data.forEach(val => {\n            if (this.isDate(val.account.date)) {\n                if (val.account.credit === null) {\n                    body.push([\n                        // @ts-ignore\n                        moment(val.account.date).format('DD-MM-YYYY'),\n                        val.account.particulars.toString(),\n                        val.account.mode,\n                        { text: '-', fillColor: '#7CFC00' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                } else {\n                    body.push([\n                        // @ts-ignore\n                        moment(val.account.date).format('DD-MM-YYYY'),\n                        val.account.particulars.toString(),\n                        val.account.mode,\n                        { text: val.account.credit.toString(), fillColor: '#7CFC00' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                }\n            } else {\n                if (val.account.credit === null) {\n                    body.push([\n                        val.account.date,\n                        val.account.particulars.toString(),\n                        val.account.mode,\n                        { text: '-', fillColor: '#7CFC00' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                } else {\n                    body.push([\n                        val.account.date.toString(),\n                        val.account.particulars.toString(),\n                        val.account.mode,\n                        { text: val.account.credit.toString(), fillColor: '#7CFC00' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                }\n            }\n            if (val.cheque) {\n                body.push([this.createChequeTable(val.cheque), {}, {}, {}, {}, {}]);\n            }\n        });\n        console.log(body);\n        return body;\n    }\n    createDebitBody(data: any[]) {\n        const body: any[][] = [];\n        const columns = [\n            { text: 'Date', style: 'tableHeader' },\n            { text: 'Particulars', style: 'tableHeader' },\n            { text: 'Mode', style: 'tableHeader' },\n            { text: 'Debit', style: 'tableHeader', fillColor: '#DC143C' },\n            { text: 'Type', style: 'tableHeader' },\n            { text: 'User Id', style: 'tableHeader' },\n        ];\n        body.push(columns);\n        data.forEach(val => {\n            if (this.isDate(val.account.date)) {\n                if (val.account.debit === null) {\n                    body.push([\n                        // @ts-ignore\n                        moment(val.account.date).format('DD-MM-YYYY'),\n                        val.account.particulars.toString(),\n                        val.account.mode.toString(),\n                        { text: '-', fillColor: '#DC143C' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                } else {\n                    body.push([\n                        // @ts-ignore\n                        moment(val.account.date).format('DD-MM-YYYY'),\n                        val.account.particulars.toString(),\n                        val.account.mode.toString(),\n                        { text: val.account.debit.toString(), fillColor: '#DC143C' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                }\n            } else {\n                if (val.account.debit === null) {\n                    body.push([\n                        val.account.date,\n                        val.account.particulars.toString(),\n                        val.account.mode.toString(),\n                        { text: '-', fillColor: '#DC143C' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                } else {\n                    body.push([\n                        val.account.date.toString(),\n                        val.account.particulars.toString(),\n                        val.account.mode.toString(),\n                        { text: val.account.debit.toString(), fillColor: '#DC143C' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                }\n            }\n            if (val.cheque) {\n                body.push([this.createChequeTable(val.cheque), {}, {}, {}, {}, {}]);\n            }\n        });\n        console.log(body);\n        return body;\n    }\n    createBody(data: any[]) {\n        const body: any[][] = [];\n        const columns = [\n            { text: 'Date', style: 'tableHeader' },\n            { text: 'Particulars', style: 'tableHeader' },\n            { text: 'Mode', style: 'tableHeader' },\n            { text: 'Credit', style: 'tableHeader', fillColor: '#7CFC00' },\n            { text: 'Debit', style: 'tableHeader', fillColor: '#DC143C' },\n            { text: 'User Id', style: 'tableHeader' },\n        ];\n        body.push(columns);\n        data.forEach(val => {\n            if (this.isDate(val.account.date)) {\n                if (val.account.credit === null) {\n                    body.push([\n                        // @ts-ignore\n                        moment(val.account.date).format('DD-MM-YYYY'),\n                        val.account.particulars.toString(),\n                        val.account.mode.toString(),\n                        { text: '-', fillColor: '#7CFC00' },\n                        { text: val.account.debit, fillColor: '#DC143C' },\n                        val.account.userId.toString(),\n                    ]);\n                } else {\n                    body.push([\n                        // @ts-ignore\n                        moment(val.account.date).format('DD-MM-YYYY'),\n                        val.account.particulars.toString(),\n                        val.account.mode.toString(),\n                        { text: val.account.credit, fillColor: '#7CFC00' },\n                        { text: '-', fillColor: '#DC143C' },\n                        val.account.userId.toString(),\n                    ]);\n                }\n            } else {\n                if (val.account.credit === null) {\n                    body.push([\n                        val.account.date,\n                        val.account.particulars.toString(),\n                        val.account.mode.toString(),\n                        { text: '-', fillColor: '#7CFC00' },\n                        { text: val.account.debit, fillColor: '#DC143C' },\n                        val.account.userId.toString(),\n                    ]);\n                } else {\n                    body.push([\n                        val.account.date.toString(),\n                        val.account.particulars.toString(),\n                        val.account.mode.toString(),\n                        { text: val.account.credit, fillColor: '#7CFC00' },\n                        { text: '-', fillColor: '#DC143C' },\n                        val.account.userId.toString(),\n                    ]);\n                }\n            }\n            if (val.cheque) {\n                body.push([this.createChequeTable(val.cheque), {}, {}, {}, {}, {}]);\n            }\n        });\n        console.log(body);\n        return body;\n    }\n    createChequeTable(data: any) {\n        return {\n            colSpan: 6,\n            alignment: 'center',\n            style: 'nestedTable',\n            table: {\n                widths: ['16.66%', '*', '16.66%', '*', '16.66%', '*'],\n                headerRows: 1,\n                body: this.createChequeBody(data),\n            },\n        };\n    }\n    createChequeBody(data: any[]) {\n        const body: any[][] = [];\n        body.push([\n            { text: 'Cheque Details', colSpan: 6, style: 'subheader', alignment: 'center' },\n            {},\n            {},\n            {},\n            {},\n            {},\n        ]);\n        body.push([\n            { text: 'Cheque Date', colSpan: 2, style: 'tableHeader', alignment: 'center' },\n            {},\n            { text: 'Bank Name', colSpan: 2, style: 'tableHeader', alignment: 'center' },\n            {},\n            { text: 'Cheque Number', colSpan: 2, style: 'tableHeader', alignment: 'center' },\n            {},\n        ]);\n        data.forEach(val => {\n            if (this.isDate(val.chequeDate)) {\n                body.push([\n                    {\n                        // @ts-ignore\n                        text: moment(val.chequeDate.toString()).format('DD-MM-YYYY'),\n                        colSpan: 2,\n                        alignment: 'center',\n                    },\n                    {},\n                    { text: val.bankName.toString(), colSpan: 2, alignment: 'center' },\n                    {},\n                    { text: val.chequeNo.toString(), colSpan: 2, alignment: 'center' },\n                    {},\n                ]);\n            } else {\n                body.push([\n                    { text: val.chequeDate.toString(), colSpan: 2, alignment: 'center' },\n                    {},\n                    { text: val.bankName.toString(), colSpan: 2, alignment: 'center' },\n                    {},\n                    { text: val.chequeNo.toString(), colSpan: 2, alignment: 'center' },\n                    {},\n                ]);\n            }\n        });\n\n        return body;\n    }\n    createCDEBody(data: any[]) {\n        const body: any[][] = [];\n        const columns = [\n            { text: 'Date', style: 'tableHeader' },\n            { text: 'Particulars', style: 'tableHeader' },\n            { text: 'Mode', style: 'tableHeader' },\n            { text: 'Credit', style: 'tableHeader', fillColor: '#7CFC00' },\n            { text: 'Debit', style: 'tableHeader', fillColor: '#DC143C' },\n            { text: 'Type', style: 'tableHeader' },\n            { text: 'User Id', style: 'tableHeader' },\n        ];\n        body.push(columns);\n        data.forEach(val => {\n            if (this.isDate(val.account.date)) {\n                if (val.account.credit === null) {\n                    body.push([\n                        // @ts-ignore\n                        moment(val.account.date).format('DD-MM-YYYY'),\n                        val.account.particulars.toString(),\n                        val.account.mode,\n                        { text: '-', fillColor: '#7CFC00' },\n                        { text: val.account.debit, fillColor: '#DC143C' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                } else {\n                    body.push([\n                        // @ts-ignore\n                        moment(val.account.date).format('DD-MM-YYYY'),\n                        val.account.particulars.toString(),\n                        val.account.mode,\n                        { text: val.account.credit, fillColor: '#7CFC00' },\n                        { text: '-', fillColor: '#DC143C' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                }\n            } else {\n                if (val.account.credit === null) {\n                    body.push([\n                        val.account.date,\n                        val.account.particulars.toString(),\n                        val.account.mode,\n                        { text: '-', fillColor: '#7CFC00' },\n                        { text: val.account.debit, fillColor: '#DC143C' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                } else {\n                    body.push([\n                        val.account.date.toString(),\n                        val.account.particulars.toString(),\n                        val.account.mode,\n                        { text: val.account.credit, fillColor: '#7CFC00' },\n                        { text: '-', fillColor: '#DC143C' },\n                        val.account.type,\n                        val.account.userId.toString(),\n                    ]);\n                }\n            }\n            if (val.cheque) {\n                body.push([this.createCDEChequeTable(val.cheque), {}, {}, {}, {}, {}]);\n            }\n        });\n        console.log(body);\n        return body;\n    }\n    createCDEChequeTable(data: any) {\n        return {\n            colSpan: 7,\n            alignment: 'center',\n            style: 'nestedTable',\n            table: {\n                widths: ['14.66%', '*', '14.66%', '*', '*', '14.66%', '*'],\n                headerRows: 1,\n                body: this.createCDEChequeBody(data),\n            },\n        };\n    }\n    createCDEChequeBody(data: any[]) {\n        const body: any[][] = [];\n        body.push([\n            { text: 'Cheque Details', colSpan: 7, style: 'subheader', alignment: 'center' },\n            {},\n            {},\n            {},\n            {},\n            {},\n            {},\n        ]);\n        body.push([\n            { text: 'Cheque Date', colSpan: 2, style: 'tableHeader', alignment: 'center' },\n            {},\n            { text: 'Bank Name', colSpan: 3, style: 'tableHeader', alignment: 'center' },\n            {},\n            {},\n            { text: 'Cheque Number', colSpan: 2, style: 'tableHeader', alignment: 'center' },\n            {},\n        ]);\n        data.forEach(val => {\n            if (this.isDate(val.chequeDate)) {\n                body.push([\n                    {\n                        // @ts-ignore\n                        text: moment(val.chequeDate.toString()).format('DD-MM-YYYY'),\n                        colSpan: 2,\n                        alignment: 'center',\n                    },\n                    {},\n                    { text: val.bankName.toString(), colSpan: 3, alignment: 'center' },\n                    {},\n                    {},\n                    { text: val.chequeNo.toString(), colSpan: 2, alignment: 'center' },\n                    {},\n                ]);\n            } else {\n                body.push([\n                    { text: val.chequeDate.toString(), colSpan: 2, alignment: 'center' },\n                    {},\n                    { text: val.bankName.toString(), colSpan: 3, alignment: 'center' },\n                    {},\n                    {},\n                    { text: val.chequeNo.toString(), colSpan: 2, alignment: 'center' },\n                    {},\n                ]);\n            }\n        });\n\n        return body;\n    }\n    onConfirmClick(): void {\n        if (this.category === 'Loan Disbursal Records') {\n            // @ts-ignore\n            const docDefinition = {\n                pageSize: 'A4',\n                pageOrientation: 'landscape',\n                pageMargins: [20, 20, 20, 30],\n                content: [\n                    { text: this.category, style: 'header', alignment: 'center' },\n                    { text: '\\n' },\n                    { text: '\\n' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['12%', '*', '*', '*', '*', '*', '*', '*', '*', '*', '15%'],\n                            body: [\n                                [\n                                    {\n                                        text: 'Start Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right ',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('start').innerHTML,\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {\n                                        text: 'End Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('end').innerHTML,\n                                ],\n                            ],\n                        },\n                        layout: 'noBorders',\n                        alignment: 'center',\n                    },\n                    { text: '\\n' },\n                    { text: 'Loan Details', style: 'subheader' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['10%', '*', '*', '*', '*', '*', '*', '*'],\n                            headerRows: 1,\n                            body: this.createLoanBody(this.loanData),\n                        },\n                    },\n                ],\n                styles: {\n                    header: {\n                        fontSize: 18,\n                        bold: true,\n                        margin: [0, 0, 0, 10],\n                    },\n                    subheader: {\n                        fontSize: 16,\n                        bold: true,\n                        margin: [0, 10, 0, 5],\n                    },\n                    tableExample: {\n                        margin: [0, 15, 0, 15],\n                    },\n                    nestedTable: {\n                        margin: [5, 5, 5, 5],\n                    },\n                    tableHeader: {\n                        bold: true,\n                        fontSize: 13,\n                        color: 'black',\n                    },\n                },\n                defaultStyle: {\n                    alignment: 'justify',\n                },\n            };\n            // @ts-ignore\n            pdfMake.createPdf(docDefinition).download('Loan Disbursal Records.pdf');\n        } else if (this.category === 'All Cash Transactions') {\n            // @ts-ignore\n            const docDefinition = {\n                pageSize: 'A4',\n                pageOrientation: 'landscape',\n                pageMargins: [20, 20, 20, 30],\n                content: [\n                    { text: this.category, style: 'header', alignment: 'center' },\n                    { text: '\\n' },\n                    { text: '\\n' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['12%', '*', '*', '*', '*', '*', '*', '*', '*', '*', '15%'],\n                            body: [\n                                [\n                                    {\n                                        text: 'Start Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right ',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('start').innerHTML,\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {\n                                        text: 'End Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('end').innerHTML,\n                                ],\n                            ],\n                        },\n                        layout: 'noBorders',\n                        alignment: 'center',\n                    },\n                    { text: '\\n' },\n                    { text: 'Cash Transactions', style: 'subheader' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['14%', '50%', '*', '*', '*', '*'],\n                            headerRows: 1,\n                            body: this.createCashBody(this.accountData),\n                        },\n                    },\n                ],\n                styles: {\n                    header: {\n                        fontSize: 18,\n                        bold: true,\n                        margin: [0, 0, 0, 10],\n                    },\n                    subheader: {\n                        fontSize: 16,\n                        bold: true,\n                        margin: [0, 10, 0, 5],\n                    },\n                    tableExample: {\n                        margin: [0, 15, 0, 15],\n                    },\n                    nestedTable: {\n                        margin: [5, 5, 5, 5],\n                    },\n                    tableHeader: {\n                        bold: true,\n                        fontSize: 13,\n                        color: 'black',\n                    },\n                },\n                defaultStyle: {\n                    alignment: 'justify',\n                },\n            };\n            // @ts-ignore\n            pdfMake.createPdf(docDefinition).download('Cash Transactions.pdf');\n        } else if (this.category === 'All Cheque Transactions') {\n            // @ts-ignore\n            const docDefinition = {\n                pageSize: 'A4',\n                pageOrientation: 'landscape',\n                pageMargins: [20, 20, 20, 30],\n                content: [\n                    { text: this.category, style: 'header', alignment: 'center' },\n                    { text: '\\n' },\n                    { text: '\\n' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['12%', '*', '*', '*', '*', '*', '*', '*', '*', '*', '15%'],\n                            body: [\n                                [\n                                    {\n                                        text: 'Start Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right ',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('start').innerHTML,\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {\n                                        text: 'End Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('end').innerHTML,\n                                ],\n                            ],\n                        },\n                        layout: 'noBorders',\n                        alignment: 'center',\n                    },\n                    { text: '\\n' },\n                    { text: '\\n' },\n                    { text: 'Cheque Transactions', style: 'subheader' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['14%', '50%', '*', '*', '*', '*'],\n                            headerRows: 1,\n                            body: this.createChequeTranBody(this.accountData),\n                        },\n                    },\n                ],\n                styles: {\n                    header: {\n                        fontSize: 18,\n                        bold: true,\n                        margin: [0, 0, 0, 10],\n                    },\n                    subheader: {\n                        fontSize: 16,\n                        bold: true,\n                        margin: [0, 10, 0, 5],\n                    },\n                    tableExample: {\n                        margin: [0, 15, 0, 15],\n                    },\n                    nestedTable: {\n                        margin: [5, 5, 5, 5],\n                    },\n                    tableHeader: {\n                        bold: true,\n                        fontSize: 13,\n                        color: 'black',\n                    },\n                },\n                defaultStyle: {\n                    alignment: 'justify',\n                },\n            };\n            // @ts-ignore\n            pdfMake.createPdf(docDefinition).download('Cheque Transactions.pdf');\n        } else if (this.category === 'Credit Transactions') {\n            // @ts-ignore\n            const docDefinition = {\n                pageSize: 'A4',\n                pageOrientation: 'landscape',\n                pageMargins: [20, 20, 20, 30],\n                content: [\n                    { text: this.category, style: 'header', alignment: 'center' },\n                    { text: '\\n' },\n                    { text: '\\n' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['12%', '*', '*', '*', '*', '*', '*', '*', '*', '*', '15%'],\n                            body: [\n                                [\n                                    {\n                                        text: 'Start Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right ',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('start').innerHTML,\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {\n                                        text: 'End Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('end').innerHTML,\n                                ],\n                            ],\n                        },\n                        layout: 'noBorders',\n                        alignment: 'center',\n                    },\n                    { text: '\\n' },\n                    { text: 'Credit Transactions', style: 'subheader' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['*', '50%', '*', '*', '*', '*'],\n                            headerRows: 1,\n                            body: this.createCreditBody(this.accountData),\n                        },\n                    },\n                ],\n                styles: {\n                    header: {\n                        fontSize: 18,\n                        bold: true,\n                        margin: [0, 0, 0, 10],\n                    },\n                    subheader: {\n                        fontSize: 16,\n                        bold: true,\n                        margin: [0, 10, 0, 5],\n                    },\n                    tableExample: {\n                        margin: [0, 15, 0, 15],\n                    },\n                    nestedTable: {\n                        margin: [5, 5, 5, 5],\n                    },\n                    tableHeader: {\n                        bold: true,\n                        fontSize: 13,\n                        color: 'black',\n                    },\n                },\n                defaultStyle: {\n                    alignment: 'justify',\n                },\n            };\n            // @ts-ignore\n            pdfMake.createPdf(docDefinition).download('Credit Transactions.pdf');\n        } else if (this.category === 'Debit Transactions') {\n            // @ts-ignore\n            const docDefinition = {\n                pageSize: 'A4',\n                pageOrientation: 'landscape',\n                pageMargins: [20, 20, 20, 30],\n                content: [\n                    { text: this.category, style: 'header', alignment: 'center' },\n                    { text: '\\n' },\n                    { text: '\\n' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['12%', '*', '*', '*', '*', '*', '*', '*', '*', '*', '15%'],\n                            body: [\n                                [\n                                    {\n                                        text: 'Start Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right ',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('start').innerHTML,\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {\n                                        text: 'End Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('end').innerHTML,\n                                ],\n                            ],\n                        },\n                        layout: 'noBorders',\n                        alignment: 'center',\n                    },\n                    { text: '\\n' },\n                    { text: 'Debit Transactions', style: 'subheader' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['*', '50%', '*', '*', '*', '*'],\n                            headerRows: 1,\n                            body: this.createDebitBody(this.accountData),\n                        },\n                    },\n                ],\n                styles: {\n                    header: {\n                        fontSize: 18,\n                        bold: true,\n                        margin: [0, 0, 0, 10],\n                    },\n                    subheader: {\n                        fontSize: 16,\n                        bold: true,\n                        margin: [0, 10, 0, 5],\n                    },\n                    tableExample: {\n                        margin: [0, 15, 0, 15],\n                    },\n                    nestedTable: {\n                        margin: [5, 5, 5, 5],\n                    },\n                    tableHeader: {\n                        bold: true,\n                        fontSize: 13,\n                        color: 'black',\n                    },\n                },\n                defaultStyle: {\n                    alignment: 'justify',\n                },\n            };\n            // @ts-ignore\n            pdfMake.createPdf(docDefinition).download('Debit Transactions.pdf');\n        } else if (this.category === 'Expense Deductions') {\n            // @ts-ignore\n            const docDefinition = {\n                pageSize: 'A4',\n                pageOrientation: 'landscape',\n                pageMargins: [20, 20, 20, 30],\n                content: [\n                    { text: this.category, style: 'header', alignment: 'center' },\n                    { text: '\\n' },\n                    { text: '\\n' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['12%', '*', '*', '*', '*', '*', '*', '*', '*', '*', '15%'],\n                            body: [\n                                [\n                                    {\n                                        text: 'Start Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right ',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('start').innerHTML,\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {\n                                        text: 'End Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('end').innerHTML,\n                                ],\n                            ],\n                        },\n                        layout: 'noBorders',\n                        alignment: 'center',\n                    },\n                    { text: '\\n' },\n                    // @ts-ignore\n                    { text: document.getElementById('subDetail').innerText, style: 'subheader' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['16.66%', '50%', '*', '*', '*', '*'],\n                            headerRows: 1,\n                            body: this.createBody(this.accountData),\n                        },\n                    },\n                ],\n                styles: {\n                    header: {\n                        fontSize: 18,\n                        bold: true,\n                        margin: [0, 0, 0, 10],\n                    },\n                    subheader: {\n                        fontSize: 16,\n                        bold: true,\n                        margin: [0, 10, 0, 5],\n                    },\n                    tableExample: {\n                        margin: [0, 15, 0, 15],\n                    },\n                    nestedTable: {\n                        margin: [5, 5, 5, 5],\n                    },\n                    tableHeader: {\n                        bold: true,\n                        fontSize: 13,\n                        color: 'black',\n                    },\n                },\n                defaultStyle: {\n                    alignment: 'justify',\n                },\n            };\n            // @ts-ignore\n            pdfMake.createPdf(docDefinition).download('Expense Deduction Report.pdf');\n        } else {\n            // @ts-ignore\n            const docDefinition = {\n                pageSize: 'A4',\n                pageOrientation: 'landscape',\n                pageMargins: [20, 20, 20, 30],\n                content: [\n                    { text: this.category, style: 'header', alignment: 'center' },\n                    { text: '\\n' },\n                    { text: '\\n' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['12%', '*', '*', '*', '*', '*', '*', '*', '*', '*', '15%'],\n                            body: [\n                                [\n                                    {\n                                        text: 'Start Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right ',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('start').innerHTML,\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {},\n                                    {\n                                        text: 'End Date',\n                                        style: 'tableHeader',\n                                        alignment: 'right',\n                                    },\n                                    // @ts-ignore\n                                    document.getElementById('end').innerHTML,\n                                ],\n                            ],\n                        },\n                        layout: 'noBorders',\n                        alignment: 'center',\n                    },\n                    { text: '\\n' },\n                    { text: 'Credit + Debit + Expense Transactions', style: 'subheader' },\n                    {\n                        style: 'tableExample',\n                        table: {\n                            widths: ['*', '50%', '*', '*', '*', '*', '*'],\n                            headerRows: 1,\n                            body: this.createCDEBody(this.accountData),\n                        },\n                    },\n                ],\n                styles: {\n                    header: {\n                        fontSize: 18,\n                        bold: true,\n                        margin: [0, 0, 0, 10],\n                    },\n                    subheader: {\n                        fontSize: 16,\n                        bold: true,\n                        margin: [0, 10, 0, 5],\n                    },\n                    tableExample: {\n                        margin: [0, 15, 0, 15],\n                    },\n                    nestedTable: {\n                        margin: [5, 5, 5, 5],\n                    },\n                    tableHeader: {\n                        bold: true,\n                        fontSize: 13,\n                        color: 'black',\n                    },\n                },\n                defaultStyle: {\n                    alignment: 'justify',\n                },\n            };\n            // @ts-ignore\n            pdfMake.createPdf(docDefinition).download('Credit+Debit+Expense Transactions.pdf');\n        }\n        this.dialogRef.close(true);\n    }\n    isDate(d: any) {\n        const result = Date.parse(d);\n        if (!result) return false;\n        else return true;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { UploadAllComponent } from './upload-all.component';\n\nconst routes: Routes = [{ path: '', component: UploadAllComponent }];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class UploadAllRoutingModule {}\n","export default \".error-box {\\n  padding: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdXBsb2FkLWFsbC9DOlxcVXNlcnNcXExlbm92b1xcRG93bmxvYWRzXFxTb2NpZXR5X0Jhbmtpbmcvc3JjXFxhcHBcXHVwbG9hZC1hbGxcXHVwbG9hZC1hbGwuY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL3VwbG9hZC1hbGwvdXBsb2FkLWFsbC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3VwbG9hZC1hbGwvdXBsb2FkLWFsbC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5lcnJvci1ib3gge1xuICAgIHBhZGRpbmc6IDEwcHg7XG59XG4iLCIuZXJyb3ItYm94IHtcbiAgcGFkZGluZzogMTBweDtcbn0iXX0= */\";","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DialogComponent } from '@app/upload-all/dialog/dialog.component';\nimport { UploadAllService } from '@app/upload-all/services';\n// @ts-ignore\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'sb-upload-all',\n    templateUrl: './upload-all.component.html',\n    styleUrls: ['./upload-all.component.scss'],\n})\nexport class UploadAllComponent implements OnInit {\n    employeeAccount = true;\n    bankAccount = false;\n    report = false;\n    disable = true;\n    check = null;\n    bankForm: FormGroup;\n    employeeForm: FormGroup;\n    reportForm: FormGroup;\n    bankList: any;\n    constructor(\n        private service: UploadAllService,\n        private dialog: MatDialog,\n        public fb: FormBuilder\n    ) {\n        this.employeeForm = this.fb.group({\n            employeeId: new FormControl('', Validators.compose([Validators.required])),\n            employeeName: new FormControl('', Validators.compose([Validators.required])),\n            fatherName: new FormControl(''),\n            permAddress: new FormControl(''),\n            check: new FormControl(''),\n            currAddress: new FormControl(''),\n            email: new FormControl('', Validators.compose([Validators.email])),\n            mobileNo: new FormControl(\n                '',\n                Validators.compose([Validators.min(1000000000), Validators.max(9999999999)])\n            ),\n            altMobileNo: new FormControl(\n                '',\n                Validators.compose([Validators.min(1000000000), Validators.max(9999999999)])\n            ),\n            landlineNo: new FormControl(\n                '',\n                Validators.compose([Validators.pattern('^[0-9]d{2,4}-d{6,8}$')])\n            ),\n            pan: new FormControl(\n                '',\n                Validators.compose([Validators.pattern('[A-Z]{5}[0-9]{4}[A-Z]{1}')])\n            ),\n            aadharNo: new FormControl(\n                '',\n                Validators.compose([Validators.pattern('^[2-9]{1}[0-9]{3}\\\\s[0-9]{4}\\\\s[0-9]{4}$')])\n            ),\n            enrollDate: new FormControl('', Validators.compose([Validators.required])),\n            amount: new FormControl('', Validators.compose([Validators.required])),\n            type: new FormControl('', Validators.compose([Validators.required])),\n            bankName: new FormControl('', Validators.compose([Validators.required])),\n            chequeDate: new FormControl('', Validators.compose([Validators.required])),\n            chequeNo: new FormControl('', Validators.compose([Validators.required])),\n            purpose: new FormControl('', Validators.compose([Validators.required])),\n        });\n        this.bankForm = this.fb.group({\n            bankName: new FormControl('', Validators.compose([Validators.required])),\n            bankAddress: new FormControl('', Validators.compose([Validators.required])),\n            accountNo: new FormControl(\n                '',\n                Validators.compose([Validators.required, Validators.pattern('^\\\\d{9,18}$')])\n            ),\n            accountType: new FormControl('', Validators.compose([Validators.required])),\n            nickName: new FormControl('', Validators.compose([Validators.required])),\n            code: new FormControl(\n                '',\n                Validators.compose([\n                    Validators.required,\n                    Validators.minLength(11),\n                    Validators.pattern('^[A-Z]{4}[0][A-Z0-9]{6}$'),\n                ])\n            ),\n        });\n        this.reportForm = this.fb.group({\n            startDate: new FormControl('', Validators.compose([Validators.required])),\n            endDate: new FormControl('', Validators.compose([Validators.required])),\n            category: new FormControl('', Validators.compose([Validators.required])),\n        });\n    }\n\n    ngOnInit(): void {\n        this.service.getBankList().subscribe(result => {\n            this.bankList = result;\n            console.log(this.bankList);\n        });\n    }\n    send() {\n        if (\n            // @ts-ignore\n            !this.employeeForm.get('employeeId').value ||\n            // @ts-ignore\n            !this.employeeForm.get('employeeName').value ||\n            // @ts-ignore\n            !this.employeeForm.get('enrollDate').value ||\n            // @ts-ignore\n            !this.employeeForm.get('amount').value ||\n            // @ts-ignore\n            !this.employeeForm.get('type').value ||\n            // @ts-ignore\n            !this.employeeForm.get('purpose').value\n        ) {\n            Swal.fire({\n                title: 'Oops!',\n                text: 'Fill Mandatory Fields!',\n                icon: 'error',\n            });\n        } else if (\n            // @ts-ignore\n            this.employeeForm.get('type').value === 'Cheque' &&\n            // @ts-ignore\n            (!this.employeeForm.get('chequeDate').value ||\n                // @ts-ignore\n                !this.employeeForm.get('chequeNo').value ||\n                // @ts-ignore\n                !this.employeeForm.get('bankName').value\n            )\n        ) {\n            Swal.fire({\n                title: 'Oops!',\n                text: 'Fill Mandatory Fields!',\n                icon: 'error',\n            });\n        } else {\n            let pass = '';\n            const str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz0123456789@#$';\n            for (let i = 1; i <= 5; i++) {\n                const char = Math.floor(Math.random() * str.length + 1);\n                pass += str.charAt(char);\n            }\n            // @ts-ignore\n            const passw = pass.slice(0, 3) + this.employeeForm.get('employeeName').value.slice(0, 2) + pass.slice(3);\n            const data = {\n                // @ts-ignore\n                userId: this.employeeForm.get('employeeId').value,\n                // @ts-ignore\n                name: this.employeeForm.get('employeeName').value,\n                password: passw,\n                // @ts-ignore\n                fatherName: this.employeeForm.get('fatherName').value,\n                // @ts-ignore\n                permanentAddress: this.employeeForm.get('permAddress').value,\n                // @ts-ignore\n                currentAddress: this.employeeForm.get('currAddress').value,\n                // @ts-ignore\n                email: this.employeeForm.get('email').value,\n                // @ts-ignore\n                mobileNo1: this.employeeForm.get('mobileNo').value,\n                // @ts-ignore\n                mobileNo2: this.employeeForm.get('altMobileNo').value,\n                // @ts-ignore\n                landline: this.employeeForm.get('landlineNo').value,\n                // @ts-ignore\n                pan: this.employeeForm.get('pan').value,\n                // @ts-ignore\n                aadharNo: this.employeeForm.get('aadharNo').value,\n                // @ts-ignore\n                enrollmentDate: this.employeeForm.get('enrollDate').value,\n                roleId: 2,\n                closeAccount: false,\n                // @ts-ignore\n                credit: this.employeeForm.get('amount').value,\n                // @ts-ignore\n                mode: this.employeeForm.get('type').value,\n                // @ts-ignore\n                bankName: this.employeeForm.get('bankName').value,\n                // @ts-ignore\n                chequeDate: this.employeeForm.get('chequeDate').value,\n                // @ts-ignore\n                chequeNo: this.employeeForm.get('chequeNo').value,\n                // @ts-ignore\n                particulars: this.employeeForm.get('purpose').value,\n            };\n            console.log(data);\n            this.service.sendData(data).subscribe(\n                result => {\n                    if (result) {\n                        Swal.fire({\n                            text: 'Account Created',\n                            icon: 'success',\n                        }).then((isConfirm: any) => {\n                            if (isConfirm) {\n                                this.employeeForm = this.fb.group({\n                                    employeeId: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    employeeName: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    fatherName: new FormControl(''),\n                                    permAddress: new FormControl(''),\n                                    currAddress: new FormControl(''),\n                                    email: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.email])\n                                    ),\n                                    mobileNo: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.minLength(10)])\n                                    ),\n                                    altMobileNo: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.minLength(10)])\n                                    ),\n                                    landlineNo: new FormControl(\n                                        '',\n                                        Validators.compose([\n                                            Validators.pattern('^[0-9]d{2,4}-d{6,8}$'),\n                                        ])\n                                    ),\n                                    pan: new FormControl(\n                                        '',\n                                        Validators.compose([\n                                            Validators.pattern('[A-Z]{5}[0-9]{4}[A-Z]{1}'),\n                                        ])\n                                    ),\n                                    aadharNo: new FormControl(\n                                        '',\n                                        Validators.compose([\n                                            Validators.pattern(\n                                                '^[2-9]{1}[0-9]{3}\\\\s[0-9]{4}\\\\s[0-9]{4}$'\n                                            ),\n                                        ])\n                                    ),\n                                    enrollDate: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    amount: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    type: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    bankName: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    chequeDate: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    chequeNo: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    purpose: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                });\n                            }\n                        });\n                    }\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        }\n    }\n    showEmployeeAccountInfo() {\n        this.employeeAccount = true;\n        this.bankAccount = false;\n        this.report = false;\n    }\n    showBankAccountInfo() {\n        this.bankAccount = true;\n        this.report = false;\n        this.employeeAccount = false;\n    }\n    showReportInfo() {\n        this.report = true;\n        this.employeeAccount = false;\n        this.bankAccount = false;\n    }\n    sameAddress(event: any) {\n        console.log(event.target.checked);\n        if (event.target.checked) {\n            // @ts-ignore\n            this.employeeForm.get('currAddress').setValue(this.employeeForm.get('permAddress').value);\n        } else {\n            // @ts-ignore\n            this.employeeForm.get('currAddress').setValue(null);\n        }\n    }\n    openDialog() {\n        const data = {\n            // @ts-ignore\n            start: this.reportForm.get('startDate').value,\n            // @ts-ignore\n            end: this.reportForm.get('endDate').value,\n            // @ts-ignore\n            category: this.reportForm.get('category').value,\n        };\n        console.log(data);\n        if (\n            // @ts-ignore\n            this.reportForm.get('category').value === 'Loan Disbursal Records'\n        ) {\n            this.service.getLoanData(data).subscribe(\n                result => {\n                    console.log(result);\n                    if (result.loanData.length === 0) {\n                        Swal.fire({\n                            title: 'Oops!',\n                            text: 'Data in this range does not exists!',\n                            icon: 'error',\n                        });\n                    } else {\n                        console.log(result);\n                        const dialogRef = this.dialog.open(DialogComponent, {\n                            data: {\n                                loan: result.loanData,\n                                // @ts-ignore\n                                start: this.reportForm.get('startDate').value,\n                                // @ts-ignore\n                                end: this.reportForm.get('endDate').value,\n                                // @ts-ignore\n                                category: this.reportForm.get('category').value,\n                            },\n                            height: '600px',\n                            width: '850px',\n                        });\n                        dialogRef.afterClosed().subscribe(ress => {\n                            console.log(ress);\n                            if (ress === '') {\n                                console.log(ress);\n                                this.reportForm = this.fb.group({\n                                    startDate: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    endDate: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    category: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                });\n                            }\n                        });\n                    }\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        } else if (\n            // @ts-ignore\n            this.reportForm.get('category').value === 'Credit Transactions'\n        ) {\n            this.service.getCreditData(data).subscribe(\n                result => {\n                    console.log(result);\n                    if (result.accountData.length === 0) {\n                        Swal.fire({\n                            title: 'Oops!',\n                            text: 'Data in this range does not exists!',\n                            icon: 'error',\n                        });\n                    } else {\n                        console.log(result);\n                        const dialogRef = this.dialog.open(DialogComponent, {\n                            data: {\n                                accountData: result.accountData,\n                                // @ts-ignore\n                                start: this.reportForm.get('startDate').value,\n                                // @ts-ignore\n                                end: this.reportForm.get('endDate').value,\n                                // @ts-ignore\n                                category: this.reportForm.get('category').value,\n                            },\n                            height: '600px',\n                            width: '850px',\n                        });\n                        dialogRef.afterClosed().subscribe(ress => {\n                            if (ress === '') {\n                                console.log(ress);\n                                this.reportForm = this.fb.group({\n                                    startDate: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    endDate: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    category: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                });\n                            }\n                        });\n                    }\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        } else if (\n            // @ts-ignore\n            this.reportForm.get('category').value === 'Debit Transactions'\n        ) {\n            this.service.getDebitData(data).subscribe(\n                result => {\n                    console.log(result);\n                    if (result.accountData.length === 0) {\n                        Swal.fire({\n                            title: 'Oops!',\n                            text: 'Data in this range does not exists!',\n                            icon: 'error',\n                        });\n                    } else {\n                        console.log(result);\n                        const dialogRef = this.dialog.open(DialogComponent, {\n                            data: {\n                                accountData: result.accountData,\n                                // @ts-ignore\n                                start: this.reportForm.get('startDate').value,\n                                // @ts-ignore\n                                end: this.reportForm.get('endDate').value,\n                                // @ts-ignore\n                                category: this.reportForm.get('category').value,\n                            },\n                            height: '600px',\n                            width: '850px',\n                        });\n                        dialogRef.afterClosed().subscribe(ress => {\n                            if (ress === '') {\n                                console.log(ress);\n                                this.reportForm = this.fb.group({\n                                    startDate: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    endDate: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    category: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                });\n                            }\n                        });\n                    }\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        } else if (\n            // @ts-ignore\n            this.reportForm.get('category').value === 'Expense Deductions'\n        ) {\n            this.service.getExpenseData(data).subscribe(\n                result => {\n                    console.log(result);\n                    if (result.accountData.length === 0) {\n                        Swal.fire({\n                            title: 'Oops!',\n                            text: 'Data in this range does not exists!',\n                            icon: 'error',\n                        });\n                    } else {\n                        console.log(result);\n                        const dialogRef = this.dialog.open(DialogComponent, {\n                            data: {\n                                accountData: result.accountData,\n                                // @ts-ignore\n                                start: this.reportForm.get('startDate').value,\n                                // @ts-ignore\n                                end: this.reportForm.get('endDate').value,\n                                // @ts-ignore\n                                category: this.reportForm.get('category').value,\n                            },\n                            height: '600px',\n                            width: '850px',\n                        });\n                        dialogRef.afterClosed().subscribe(ress => {\n                            if (ress === '') {\n                                console.log(ress);\n                                this.reportForm = this.fb.group({\n                                    startDate: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    endDate: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    category: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                });\n                            }\n                        });\n                    }\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        } else if (\n            // @ts-ignore\n            this.reportForm.get('category').value === 'Credit+Debit+Expense Transactions'\n        ) {\n            this.service.getCreditDebitExpenseData(data).subscribe(\n                result => {\n                    console.log(result);\n                    if (result.accountData.length === 0) {\n                        Swal.fire({\n                            title: 'Oops!',\n                            text: 'Data in this range does not exists!',\n                            icon: 'error',\n                        });\n                    } else {\n                        console.log(result);\n                        const dialogRef = this.dialog.open(DialogComponent, {\n                            data: {\n                                accountData: result.accountData,\n                                // @ts-ignore\n                                start: this.reportForm.get('startDate').value,\n                                // @ts-ignore\n                                end: this.reportForm.get('endDate').value,\n                                // @ts-ignore\n                                category: this.reportForm.get('category').value,\n                            },\n                            height: '600px',\n                            width: '850px',\n                        });\n                        dialogRef.afterClosed().subscribe(ress => {\n                            if (ress === '') {\n                                console.log(ress);\n                                this.reportForm = this.fb.group({\n                                    startDate: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    endDate: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                    category: new FormControl(\n                                        '',\n                                        Validators.compose([Validators.required])\n                                    ),\n                                });\n                            }\n                        });\n                    }\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        } else if (\n            // @ts-ignore\n            this.reportForm.get('category').value === 'All Cash Transactions'\n        ) {\n            this.service.getCashData(data).subscribe(\n                result => {\n                    console.log(result);\n                    if (result.accountData.length === 0) {\n                        Swal.fire({\n                            title: 'Oops!',\n                            text: 'Data in this range does not exists!',\n                            icon: 'error',\n                        });\n                    } else {\n                        console.log(result);\n                        const dialogRef = this.dialog.open(DialogComponent, {\n                            data: {\n                                accountData: result.accountData,\n                                // @ts-ignore\n                                start: this.reportForm.get('startDate').value,\n                                // @ts-ignore\n                                end: this.reportForm.get('endDate').value,\n                                // @ts-ignore\n                                category: this.reportForm.get('category').value,\n                            },\n                            height: '600px',\n                            width: '850px',\n                        });\n                        dialogRef.afterClosed().subscribe(ress => {\n                            this.reportForm = this.fb.group({\n                                startDate: new FormControl(\n                                    '',\n                                    Validators.compose([Validators.required])\n                                ),\n                                endDate: new FormControl(\n                                    '',\n                                    Validators.compose([Validators.required])\n                                ),\n                                category: new FormControl(\n                                    '',\n                                    Validators.compose([Validators.required])\n                                ),\n                            });\n                        });\n                    }\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        } else {\n            this.service.getChequeData(data).subscribe(\n                result => {\n                    console.log(result);\n                    if (result.accountData.length === 0) {\n                        Swal.fire({\n                            title: 'Oops!',\n                            text: 'Data in this range does not exists!',\n                            icon: 'error',\n                        });\n                    } else {\n                        console.log(result);\n                        const dialogRef = this.dialog.open(DialogComponent, {\n                            data: {\n                                accountData: result.accountData,\n                                // @ts-ignore\n                                start: this.reportForm.get('startDate').value,\n                                // @ts-ignore\n                                end: this.reportForm.get('endDate').value,\n                                // @ts-ignore\n                                category: this.reportForm.get('category').value,\n                            },\n                            height: '600px',\n                            width: '850px',\n                        });\n                        dialogRef.afterClosed().subscribe(ress => {\n                            this.reportForm = this.fb.group({\n                                startDate: new FormControl(\n                                    '',\n                                    Validators.compose([Validators.required])\n                                ),\n                                endDate: new FormControl(\n                                    '',\n                                    Validators.compose([Validators.required])\n                                ),\n                                category: new FormControl(\n                                    '',\n                                    Validators.compose([Validators.required])\n                                ),\n                            });\n                        });\n                    }\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        }\n    }\n    sendBankData() {\n        const data = {\n            // @ts-ignore\n            bankName: this.bankForm.get('bankName').value,\n            // @ts-ignore\n            bankAddress: this.bankForm.get('bankAddress').value,\n            // @ts-ignore\n            accountNo: this.bankForm.get('accountNo').value,\n            // @ts-ignore\n            accountType: this.bankForm.get('accountType').value,\n            // @ts-ignore\n            nickname: this.bankForm.get('nickName').value,\n            // @ts-ignore\n            code: this.bankForm.get('code').value,\n        };\n        console.log(data);\n        this.service.sendBankData(data).subscribe(\n            result => {\n                if (result) {\n                    Swal.fire({\n                        text: 'Account Created',\n                        icon: 'success',\n                    }).then((isConfirm: any) => {\n                        if (isConfirm) {\n                            this.bankForm = this.fb.group({\n                                bankName: new FormControl(\n                                    '',\n                                    Validators.compose([Validators.required])\n                                ),\n                                bankAddress: new FormControl(\n                                    '',\n                                    Validators.compose([Validators.required])\n                                ),\n                                accountNo: new FormControl(\n                                    '',\n                                    Validators.compose([\n                                        Validators.required,\n                                        Validators.pattern('^\\\\d{9,18}$'),\n                                    ])\n                                ),\n                                accountType: new FormControl(\n                                    '',\n                                    Validators.compose([Validators.required])\n                                ),\n                                nickName: new FormControl(\n                                    '',\n                                    Validators.compose([Validators.required])\n                                ),\n                                code: new FormControl(\n                                    '',\n                                    Validators.compose([\n                                        Validators.required,\n                                        Validators.minLength(11),\n                                        Validators.pattern('^[A-Z]{4}[0][A-Z0-9]{6}$'),\n                                    ])\n                                ),\n                            });\n                            this.service.getBankList().subscribe(ress => {\n                                this.bankList = ress;\n                                console.log(this.bankList);\n                            });\n                        }\n                    });\n                }\n            },\n            error1 => {\n                Swal.fire({\n                    title: 'Oops!',\n                    text: 'Try again!',\n                    icon: 'error',\n                });\n            }\n        );\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppCommonModule } from '@app/app-common/app-common.module';\nimport { NavigationModule } from '@app/navigation/navigation.module';\nimport * as service from '@app/upload-all/services';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { DialogComponent } from './dialog/dialog.component';\nimport { UploadAllRoutingModule } from './upload-all-routing.module';\nimport { UploadAllComponent } from './upload-all.component';\nimport { LayoutDashboardModule } from '@app/layout-dashboard/layout-dashboard.module';\n\n@NgModule({\n    declarations: [UploadAllComponent, DialogComponent],\n    imports: [\n        CommonModule,\n        UploadAllRoutingModule,\n        NavigationModule,\n        AppCommonModule,\n        TranslateModule,\n        FormsModule,\n        MatButtonModule,\n        MatDialogModule,\n        MatSnackBarModule,\n        LayoutDashboardModule,\n        ReactiveFormsModule,\n    ],\n    providers: [...service.services],\n    entryComponents: [DialogComponent],\n})\nexport class UploadAllModule {}\n"]}