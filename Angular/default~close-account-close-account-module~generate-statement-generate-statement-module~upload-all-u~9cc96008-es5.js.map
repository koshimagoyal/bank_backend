{"version":3,"sources":["webpack:///node_modules/@angular/cdk/fesm2015/layout.js","webpack:///node_modules/@angular/material/fesm2015/snack-bar.js"],"names":["LayoutModule","decorators","type","args","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","_platform","_matchMedia","isBrowser","window","matchMedia","bind","noopMatchMedia","query","WEBKIT","createEmptyStyleRule","providedIn","ctorParameters","Éµprov","factory","MediaMatcher_Factory","token","has","document","createElement","setAttribute","head","appendChild","sheet","insertRule","add","e","console","error","matches","media","addListener","removeListener","BreakpointState","InternalBreakpointState","Query","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","next","complete","value","queries","splitQueries","some","mediaQuery","_registerQuery","mql","observables","map","observable","stateObservable","pipe","breakpointStates","response","breakpoints","forEach","state","get","queryObservable","observer","handler","run","nextMql","output","set","BreakpointObserver_Factory","split","reduce","a1","a2","concat","trim","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape","MatSnackBarDismiss","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","duration","setTimeout","min","dispose","dismissedByAction","asObservable","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","data","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","selector","template","encapsulation","None","changeDetection","OnPush","host","styles","undefined","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_role","attachComponentPortal","attachTemplatePortal","event","fromState","toState","_completeExit","onEnter","detectChanges","nativeElement","onMicrotaskEmpty","element","panelClasses","panelClass","Array","isArray","cssClass","classList","hasAttached","Error","Default","animations","propDecorators","MatSnackBarModule","imports","exports","declarations","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","component","config","_attach","message","_config","Object","assign","openFromComponent","_openedSnackBarRef","overlayRef","userInjector","viewContainerRef","injector","WeakMap","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","_attachSnackBarContainer","$implicit","_createInjector","contentRef","observe","detachments","overlayElement","className","remove","_animateSnackBar","afterDismissed","clear","enter","afterOpened","_dismissAfter","announce","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","create","parent","MatSnackBar_Factory"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAMA;;;;;;;QAKMA,Y;;;;AAENA,gBAAY,CAACC,UAAb,GAA0B,CACtB;AAAEC,UAAI,EAAE,sDAAR;AAAkBC,UAAI,EAAE,CAAC,EAAD;AAAxB,KADsB,CAA1B;AAIA;;;;;;AAKA;;;;;AAIA,QAAMC,kCAAkC,GAAG,IAAIC,GAAJ,EAA3C;AACA;;;;;AAIA,QAAIC,mBAAJ;AACA;;;;QAGMC,Y;AACF;;;AAGA,4BAAYC,SAAZ,EAAuB;AAAA;;AACnB,aAAKA,SAAL,GAAiBA,SAAjB;AACA,aAAKC,WAAL,GAAmB,KAAKD,SAAL,CAAeE,SAAf,IAA4BC,MAAM,CAACC,UAAnC,GACf;AACA;AACAD,cAAM,CAACC,UAAP,CAAkBC,IAAlB,CAAuBF,MAAvB,CAHe,GAIfG,cAJJ;AAKH;AACD;;;;;;;;;;;;mCAQWC,K,EAAO;AACd,cAAI,KAAKP,SAAL,CAAeQ,MAAnB,EAA2B;AACvBC,gCAAoB,CAACF,KAAD,CAApB;AACH;;AACD,iBAAO,KAAKN,WAAL,CAAiBM,KAAjB,CAAP;AACH;;;;;;AAELR,gBAAY,CAACN,UAAb,GAA0B,CACtB;AAAEC,UAAI,EAAE,wDAAR;AAAoBC,UAAI,EAAE,CAAC;AAAEe,kBAAU,EAAE;AAAd,OAAD;AAA1B,KADsB,CAA1B;AAGA;;AACAX,gBAAY,CAACY,cAAb,GAA8B;AAAA,aAAM,CAChC;AAAEjB,YAAI,EAAE;AAAR,OADgC,CAAN;AAAA,KAA9B;AAGA;;;AAAmBK,gBAAY,CAACa,KAAb,GAAqB,yEAAmB;AAAEC,aAAO,EAAE,SAASC,oBAAT,GAAgC;AAAE,eAAO,IAAIf,YAAJ,CAAiB,+DAAS,8DAAT,CAAjB,CAAP;AAA8C,OAA3F;AAA6FgB,WAAK,EAAEhB,YAApG;AAAkHW,gBAAU,EAAE;AAA9H,KAAnB,CAArB;;AACnB,QAAI,KAAJ,EAAW,CAYV;AACD;;;;;;;;AAMA,aAASD,oBAAT,CAA8BF,KAA9B,EAAqC;AACjC,UAAIX,kCAAkC,CAACoB,GAAnC,CAAuCT,KAAvC,CAAJ,EAAmD;AAC/C;AACH;;AACD,UAAI;AACA,YAAI,CAACT,mBAAL,EAA0B;AACtBA,6BAAmB,GAAGmB,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAtB;AACApB,6BAAmB,CAACqB,YAApB,CAAiC,MAAjC,EAAyC,UAAzC;;AACC;AAAkBF,kBAAQ,CAACG,IAA5B,CAAmCC,WAAnC,CAA+CvB,mBAA/C;AACH;;AACD,YAAIA,mBAAmB,CAACwB,KAAxB,EAA+B;AACzB;AAAkBxB,6BAAmB,CAACwB,KAAxC,CACKC,UADL,kBAC0BhB,KAD1B,2BACuD,CADvD;AAEAX,4CAAkC,CAAC4B,GAAnC,CAAuCjB,KAAvC;AACH;AACJ,OAXD,CAYA,OAAOkB,CAAP,EAAU;AACNC,eAAO,CAACC,KAAR,CAAcF,CAAd;AACH;AACJ;AACD;;;;;;;AAKA,aAASnB,cAAT,CAAwBC,KAAxB,EAA+B;AAC3B;AACA;AACA;AAAQ;AAAkB;AACtBqB,iBAAO,EAAErB,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,EADhB;AAEtBsB,eAAK,EAAEtB,KAFe;AAGtBuB,qBAAW;AAAG;;;AAGd,iCAAM,CAAG,CANa;AAOtBC,wBAAc;AAAG;;;AAGjB,oCAAM,CAAG;AAVa;AAA1B;AAYH;AAED;;;;;;AAKA;;;;;;AAIA,aAASC,eAAT,GAA2B,CAAG;;AAC9B,QAAI,KAAJ,EAAW,CAYV;AACD;;;;;;AAIA,aAASC,uBAAT,GAAmC,CAAG;;AACtC,QAAI,KAAJ,EAAW,CAWV;AACD;;;;;AAGA,aAASC,KAAT,GAAiB,CAAG;;AACpB,QAAI,KAAJ,EAAW,CAKV;AACD;;;;;QAGMC,kB;AACF;;;;AAIA,kCAAYC,aAAZ,EAA2BC,KAA3B,EAAkC;AAAA;;AAC9B,aAAKD,aAAL,GAAqBA,aAArB;AACA,aAAKC,KAAL,GAAaA,KAAb;AACA;;;;AAGA,aAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACA;;;;AAGA,aAAKC,eAAL,GAAuB,IAAI,4CAAJ,EAAvB;AACH;AACD;;;;;;;;sCAIc;AACV,eAAKA,eAAL,CAAqBC,IAArB;;AACA,eAAKD,eAAL,CAAqBE,QAArB;AACH;AACD;;;;;;;;kCAKUC,K,EAAO;AAAA;;AACb;AACA,cAAMC,OAAO,GAAGC,YAAY,CAAC,0EAAYF,KAAZ,CAAD,CAA5B;AACA,iBAAOC,OAAO,CAACE,IAAR;AAAc;;;;AAIrB,oBAAAC,UAAU;AAAA,mBAAI,KAAI,CAACC,cAAL,CAAoBD,UAApB,EAAgCE,GAAhC,CAAoCrB,OAAxC;AAAA,WAJH,CAAP;AAKH;AACD;;;;;;;;;gCAMQe,K,EAAO;AAAA;;AACX;AACA,cAAMC,OAAO,GAAGC,YAAY,CAAC,0EAAYF,KAAZ,CAAD,CAA5B;AACA;;AACA,cAAMO,WAAW,GAAGN,OAAO,CAACO,GAAR;AAAa;;;;AAIjC,oBAAA5C,KAAK;AAAA,mBAAI,MAAI,CAACyC,cAAL,CAAoBzC,KAApB,EAA2B6C,UAA/B;AAAA,WAJe,CAApB;AAKA;;AACA,cAAIC,eAAe,GAAG,2DAAcH,WAAd,CAAtB,CAVW,CAWX;;AACAG,yBAAe,GAAG,oDAAOA,eAAe,CAACC,IAAhB,CAAqB,4DAAK,CAAL,CAArB,CAAP,EAAsCD,eAAe,CAACC,IAAhB,CAAqB,4DAAK,CAAL,CAArB,EAA8B,oEAAa,CAAb,CAA9B,CAAtC,CAAlB;AACA,iBAAOD,eAAe,CAACC,IAAhB,CAAqB;AAAK;;;;AAIjC,oBAACC,gBAAD,EAAsB;AAClB;AACA,gBAAMC,QAAQ,GAAG;AACb5B,qBAAO,EAAE,KADI;AAEb6B,yBAAW,EAAE;AAFA,aAAjB;AAIAF,4BAAgB,CAACG,OAAjB;AAA0B;;;;AAI1B,sBAACC,KAAD,EAAW;AACPH,sBAAQ,CAAC5B,OAAT,GAAmB4B,QAAQ,CAAC5B,OAAT,IAAoB+B,KAAK,CAAC/B,OAA7C;AACA4B,sBAAQ,CAACC,WAAT,CAAqBE,KAAK,CAACpD,KAA3B,IAAoCoD,KAAK,CAAC/B,OAA1C;AACH,aAPD;AAQA,mBAAO4B,QAAP;AACH,WAnB2B,CAArB,CAAP;AAoBH;AACD;;;;;;;;;uCAMejD,K,EAAO;AAAA;;AAClB;AACA,cAAI,KAAK+B,QAAL,CAActB,GAAd,CAAkBT,KAAlB,CAAJ,EAA8B;AAC1B;AAAQ;AAAkB,mBAAK+B,QAAL,CAAcsB,GAAd,CAAkBrD,KAAlB;AAA1B;AACH;AACD;;;AACA,cAAM0C,GAAG,GAAG,KAAKb,aAAL,CAAmBhC,UAAnB,CAA8BG,KAA9B,CAAZ,CANkB,CAOlB;;AACA;;;AACA,cAAMsD,eAAe,GAAG,IAAI,+CAAJ;AAAgB;;;;AAIxC,oBAACC,QAAD,EAAc;AACV;AACA;AACA;AACA;AACA;;AACA;AACA,gBAAMC,OAAO;AAAI;;;;AAIjB,qBAJMA,OAIN,CAACtC,CAAD;AAAA,qBAAO,MAAI,CAACY,KAAL,CAAW2B,GAAX;AAAgB;;;AAGvB;AAAA,uBAAMF,QAAQ,CAACrB,IAAT,CAAchB,CAAd,CAAN;AAAA,eAHO,CAAP;AAAA,aAJA;;AAQAwB,eAAG,CAACnB,WAAJ,CAAgBiC,OAAhB;AACA;AAAQ;;;AAGR,0BAAM;AACFd,mBAAG,CAAClB,cAAJ,CAAmBgC,OAAnB;AACH;AALD;AAMH,WA1BuB,EA0BpBT,IA1BoB,CA0Bf,iEAAUL,GAAV,CA1Be,EA0BC;AAAK;;;;AAI9B,oBAACgB,OAAD;AAAA,mBAAc;AAAE1D,mBAAK,EAALA,KAAF;AAASqB,qBAAO,EAAEqC,OAAO,CAACrC;AAA1B,aAAd;AAAA,WAJyB,CA1BD,EA8B8B,iEAAU,KAAKY,eAAf,CA9B9B,CAAxB,CATkB,CAwClB;;AACA;;AACA,cAAM0B,MAAM,GAAG;AAAEd,sBAAU,EAAES,eAAd;AAA+BZ,eAAG,EAAHA;AAA/B,WAAf;;AACA,eAAKX,QAAL,CAAc6B,GAAd,CAAkB5D,KAAlB,EAAyB2D,MAAzB;;AACA,iBAAOA,MAAP;AACH;;;;;;AAEL/B,sBAAkB,CAAC1C,UAAnB,GAAgC,CAC5B;AAAEC,UAAI,EAAE,wDAAR;AAAoBC,UAAI,EAAE,CAAC;AAAEe,kBAAU,EAAE;AAAd,OAAD;AAA1B,KAD4B,CAAhC;AAGA;;AACAyB,sBAAkB,CAACxB,cAAnB,GAAoC;AAAA,aAAM,CACtC;AAAEjB,YAAI,EAAEK;AAAR,OADsC,EAEtC;AAAEL,YAAI,EAAE;AAAR,OAFsC,CAAN;AAAA,KAApC;AAIA;;;AAAmByC,sBAAkB,CAACvB,KAAnB,GAA2B,yEAAmB;AAAEC,aAAO,EAAE,SAASuD,0BAAT,GAAsC;AAAE,eAAO,IAAIjC,kBAAJ,CAAuB,+DAASpC,YAAT,CAAvB,EAA+C,+DAAS,oDAAT,CAA/C,CAAP;AAA0E,OAA7H;AAA+HgB,WAAK,EAAEoB,kBAAtI;AAA0JzB,gBAAU,EAAE;AAAtK,KAAnB,CAA3B;;AACnB,QAAI,KAAJ,EAAW,CAuBV;AACD;;;;;;;;AAMA,aAASmC,YAAT,CAAsBD,OAAtB,EAA+B;AAC3B,aAAOA,OAAO,CAACO,GAAR;AAAa;;;;AAIpB,gBAAC5C,KAAD;AAAA,eAAWA,KAAK,CAAC8D,KAAN,CAAY,GAAZ,CAAX;AAAA,OAJO,EAKFC,MALE;AAKM;;;;;AAKb,gBAACC,EAAD,EAAKC,EAAL;AAAA,eAAYD,EAAE,CAACE,MAAH,CAAUD,EAAV,CAAZ;AAAA,OAVO,EAWFrB,GAXE;AAWG;;;;AAIV,gBAAA5C,KAAK;AAAA,eAAIA,KAAK,CAACmE,IAAN,EAAJ;AAAA,OAfE,CAAP;AAgBH;AAED;;;;;AAKA;AACA;;AACA;;;;;;;;;;AAQA,QAAMC,WAAW,GAAG;AAChBC,YAAM,EAAE,uBADQ;AAEhBC,WAAK,EAAE,8CAFS;AAGhBC,YAAM,EAAE,+CAHQ;AAIhBC,WAAK,EAAE,gDAJS;AAKhBC,YAAM,EAAE,qBALQ;AAMhBC,aAAO,EAAE,wDACL,oDAPY;AAQhBC,YAAM,EAAE,+EACJ,4EATY;AAUhBC,SAAG,EAAE,qDACD,kDAXY;AAYhBC,qBAAe,EAAE,mDAZD;AAahBC,oBAAc,EAAE,0EAbA;AAchBC,iBAAW,EAAE,gDAdG;AAehBC,sBAAgB,EAAE,oDAfF;AAgBhBC,qBAAe,EAAE,4EAhBD;AAiBhBC,kBAAY,EAAE;AAjBE,KAApB;AAoBA;;;;;;AAMA;;;AAKA;;;;;;;;;;;;;;;;;ACpaA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAYA;;;;;;AAKA;;;;;;AAIA,aAASC,kBAAT,GAA8B,CAAG;;AACjC,QAAI,KAAJ,EAAW,CAMV;AACD;;;;;;AAIA,QAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAAtC;AACA;;;;;QAIMC,c;AACF;;;;AAIA,8BAAYC,iBAAZ,EAA+BC,WAA/B,EAA4C;AAAA;;AAAA;;AACxC,aAAKA,WAAL,GAAmBA,WAAnB;AACA;;;;AAGA,aAAKC,eAAL,GAAuB,IAAI,4CAAJ,EAAvB;AACA;;;;AAGA,aAAKC,YAAL,GAAoB,IAAI,4CAAJ,EAApB;AACA;;;;AAGA,aAAKC,SAAL,GAAiB,IAAI,4CAAJ,EAAjB;AACA;;;;AAGA,aAAKC,kBAAL,GAA0B,KAA1B;AACA,aAAKL,iBAAL,GAAyBA,iBAAzB,CAlBwC,CAmBxC;;AACA,aAAKM,QAAL,GAAgBC,SAAhB;AAA2B;;;AAG3B;AAAA,iBAAM,MAAI,CAACC,OAAL,EAAN;AAAA,SAHA;;AAIAR,yBAAiB,CAACS,OAAlB,CAA0BF,SAA1B;AAAqC;;;AAGrC;AAAA,iBAAM,MAAI,CAACG,cAAL,EAAN;AAAA,SAHA;AAIH;AACD;;;;;;;;kCAIU;AACN,cAAI,CAAC,KAAKR,eAAL,CAAqBS,MAA1B,EAAkC;AAC9B,iBAAKX,iBAAL,CAAuBY,IAAvB;AACH;;AACDC,sBAAY,CAAC,KAAKC,kBAAN,CAAZ;AACH;AACD;;;;;;;4CAIoB;AAChB,cAAI,CAAC,KAAKV,SAAL,CAAeO,MAApB,EAA4B;AACxB,iBAAKN,kBAAL,GAA0B,IAA1B;;AACA,iBAAKD,SAAL,CAAe1D,IAAf;;AACA,iBAAK0D,SAAL,CAAezD,QAAf;AACH;AACJ;AACD;;;;;;;;;0CAMkB;AACd,eAAKoE,iBAAL;AACH;AACD;;;;;;;;sCAKcC,Q,EAAU;AAAA;;AACpB;AACA;AACA,eAAKF,kBAAL,GAA0BG,UAAU;AAAE;;;AAGtC;AAAA,mBAAM,MAAI,CAACT,OAAL,EAAN;AAAA,WAHoC,EAGbX,IAAI,CAACqB,GAAL,CAASF,QAAT,EAAmBpB,WAAnB,CAHa,CAApC;AAIH;AACD;;;;;;;gCAIQ;AACJ,cAAI,CAAC,KAAKO,YAAL,CAAkBQ,MAAvB,EAA+B;AAC3B,iBAAKR,YAAL,CAAkBzD,IAAlB;;AACA,iBAAKyD,YAAL,CAAkBxD,QAAlB;AACH;AACJ;AACD;;;;;;;;yCAKiB;AACb,eAAKsD,WAAL,CAAiBkB,OAAjB;;AACA,cAAI,CAAC,KAAKf,SAAL,CAAeO,MAApB,EAA4B;AACxB,iBAAKP,SAAL,CAAezD,QAAf;AACH;;AACD,eAAKuD,eAAL,CAAqBxD,IAArB,CAA0B;AAAE0E,6BAAiB,EAAE,KAAKf;AAA1B,WAA1B;;AACA,eAAKH,eAAL,CAAqBvD,QAArB;;AACA,eAAK0D,kBAAL,GAA0B,KAA1B;AACH;AACD;;;;;;;yCAIiB;AACb,iBAAO,KAAKH,eAAL,CAAqBmB,YAArB,EAAP;AACH;AACD;;;;;;;sCAIc;AACV,iBAAO,KAAKrB,iBAAL,CAAuBsB,QAA9B;AACH;AACD;;;;;;;mCAIW;AACP,iBAAO,KAAKlB,SAAL,CAAeiB,YAAf,EAAP;AACH;;;;;;AAEL,QAAI,KAAJ,EAAW,CAgDV;AAED;;;;;;AAKA;;;;;;AAIA,QAAME,kBAAkB,GAAG,IAAI,4DAAJ,CAAmB,iBAAnB,CAA3B;AACA;;;;;QAIMC,iB,GACF,6BAAc;AAAA;;AACV;;;AAGA,WAAKC,UAAL,GAAkB,WAAlB;AACA;;;;;AAIA,WAAKC,mBAAL,GAA2B,EAA3B;AACA;;;;AAGA,WAAKV,QAAL,GAAgB,CAAhB;AACA;;;;AAGA,WAAKW,IAAL,GAAY,IAAZ;AACA;;;;AAGA,WAAKC,kBAAL,GAA0B,QAA1B;AACA;;;;AAGA,WAAKC,gBAAL,GAAwB,QAAxB;AACH,K;;AAEL,QAAI,KAAJ,EAAW,CAgDV;AAED;;;;;;AAKA;;;;;;QAIMC,c;AACF;;;;AAIA,8BAAYC,WAAZ,EAAyBJ,IAAzB,EAA+B;AAAA;;AAC3B,aAAKI,WAAL,GAAmBA,WAAnB;AACA,aAAKJ,IAAL,GAAYA,IAAZ;AACH;AACD;;;;;;;;iCAIS;AACL,eAAKI,WAAL,CAAiBhB,iBAAjB;AACH;AACD;;;;;;;4BAIgB;AACZ,iBAAO,CAAC,CAAC,KAAKY,IAAL,CAAUK,MAAnB;AACH;;;;;;AAELF,kBAAc,CAACpI,UAAf,GAA4B,CACxB;AAAEC,UAAI,EAAE,uDAAR;AAAmBC,UAAI,EAAE,CAAC;AACdqI,gBAAQ,EAAE,kBADI;AAEdC,gBAAQ,EAAE,8KAFI;AAGdC,qBAAa,EAAE,gEAAkBC,IAHnB;AAIdC,uBAAe,EAAE,sEAAwBC,MAJ3B;AAKdC,YAAI,EAAE;AACF,mBAAS;AADP,SALQ;AAQdC,cAAM,EAAE,CAAC,6TAAD;AARM,OAAD;AAAzB,KADwB,CAA5B;AAYA;;AACAV,kBAAc,CAAClH,cAAf,GAAgC;AAAA,aAAM,CAClC;AAAEjB,YAAI,EAAEoG;AAAR,OADkC,EAElC;AAAEpG,YAAI,EAAE8I,SAAR;AAAmB/I,kBAAU,EAAE,CAAC;AAAEC,cAAI,EAAE,oDAAR;AAAgBC,cAAI,EAAE,CAAC2H,kBAAD;AAAtB,SAAD;AAA/B,OAFkC,CAAN;AAAA,KAAhC;;AAIA,QAAI,KAAJ,EAAW,CAQV;AAED;;;;;;AAKA;;;;;;;AAKA,QAAMmB,qBAAqB,GAAG;AAC1B;;;AAGAC,mBAAa,EAAE,oEAAQ,OAAR,EAAiB,CAC5B,kEAAM,cAAN,EAAsB,kEAAM;AACxBC,iBAAS,EAAE,YADa;AAExBC,eAAO,EAAE;AAFe,OAAN,CAAtB,CAD4B,EAK5B,kEAAM,SAAN,EAAiB,kEAAM;AACnBD,iBAAS,EAAE,UADQ;AAEnBC,eAAO,EAAE;AAFU,OAAN,CAAjB,CAL4B,EAS5B,uEAAW,cAAX,EAA2B,oEAAQ,kCAAR,CAA3B,CAT4B,EAU5B,uEAAW,wBAAX,EAAqC,oEAAQ,mCAAR,EAA6C,kEAAM;AACpFA,eAAO,EAAE;AAD2E,OAAN,CAA7C,CAArC,CAV4B,CAAjB;AAJW,KAA9B;AAoBA;;;;;;AAKA;;;;;QAIMC,oB;;;;;AACF;;;;;;AAMA,oCAAYC,OAAZ,EAAqBC,WAArB,EAAkCC,kBAAlC,EAAsDC,cAAtD,EAAsE;AAAA;;AAAA;;AAClE;AACA,eAAKH,OAAL,GAAeA,OAAf;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACA,eAAKC,kBAAL,GAA0BA,kBAA1B;AACA,eAAKC,cAAL,GAAsBA,cAAtB;AACA;;;;AAGA,eAAKC,UAAL,GAAkB,KAAlB;AACA;;;;AAGA,eAAK1C,OAAL,GAAe,IAAI,4CAAJ,EAAf;AACA;;;;AAGA,eAAKa,QAAL,GAAgB,IAAI,4CAAJ,EAAhB;AACA;;;;AAGA,eAAK8B,eAAL,GAAuB,MAAvB;AACA;;;;;;AAKA,eAAKC,eAAL;AAAwB;;;;AAIxB,kBAACC,MAAD,EAAY;AACR,iBAAKC,kBAAL;;AACA,iBAAKC,qBAAL;;AACA,iBAAO,OAAKC,aAAL,CAAmBJ,eAAnB,CAAmCC,MAAnC,CAAP;AACH,SARD,CA3BkE,CAoClE;AACA;;;AACA,YAAIJ,cAAc,CAACzB,UAAf,KAA8B,WAA9B,IAA6C,CAACyB,cAAc,CAACxB,mBAAjE,EAAsF;AAClF,iBAAKgC,KAAL,GAAa,OAAb;AACH,SAFD,MAGK,IAAIR,cAAc,CAACzB,UAAf,KAA8B,KAAlC,EAAyC;AAC1C,iBAAKiC,KAAL,GAAa,IAAb;AACH,SAFI,MAGA;AACD,iBAAKA,KAAL,GAAa,QAAb;AACH;;AA9CiE;AA+CrE;AACD;;;;;;;;;;8CAMsBJ,M,EAAQ;AAC1B,eAAKC,kBAAL;;AACA,eAAKC,qBAAL;;AACA,iBAAO,KAAKC,aAAL,CAAmBE,qBAAnB,CAAyCL,MAAzC,CAAP;AACH;AACD;;;;;;;;;6CAMqBA,M,EAAQ;AACzB,eAAKC,kBAAL;;AACA,eAAKC,qBAAL;;AACA,iBAAO,KAAKC,aAAL,CAAmBG,oBAAnB,CAAwCN,MAAxC,CAAP;AACH;AACD;;;;;;;;uCAKeO,K,EAAO;AAAA,cACVC,SADU,GACaD,KADb,CACVC,SADU;AAAA,cACCC,OADD,GACaF,KADb,CACCE,OADD;;AAElB,cAAKA,OAAO,KAAK,MAAZ,IAAsBD,SAAS,KAAK,MAArC,IAAgDC,OAAO,KAAK,QAAhE,EAA0E;AACtE,iBAAKC,aAAL;AACH;;AACD,cAAID,OAAO,KAAK,SAAhB,EAA2B;AACvB;AACA;;AACA;AACA,gBAAME,OAAO,GAAG,KAAK3C,QAArB;;AACA,iBAAKyB,OAAL,CAAa9E,GAAb;AAAkB;;;AAGlB,wBAAM;AACFgG,qBAAO,CAACvH,IAAR;AACAuH,qBAAO,CAACtH,QAAR;AACH,aAND;AAOH;AACJ;AACD;;;;;;;gCAIQ;AACJ,cAAI,CAAC,KAAKwG,UAAV,EAAsB;AAClB,iBAAKC,eAAL,GAAuB,SAAvB;;AACA,iBAAKH,kBAAL,CAAwBiB,aAAxB;AACH;AACJ;AACD;;;;;;;+BAIO;AACH;AACA;AACA;AACA,eAAKd,eAAL,GAAuB,QAAvB,CAJG,CAKH;AACA;AACA;;AACA,eAAKJ,WAAL,CAAiBmB,aAAjB,CAA+B/I,YAA/B,CAA4C,UAA5C,EAAwD,EAAxD;;AACA,iBAAO,KAAKqF,OAAZ;AACH;AACD;;;;;;;sCAIc;AACV,eAAK0C,UAAL,GAAkB,IAAlB;;AACA,eAAKa,aAAL;AACH;AACD;;;;;;;;;wCAMgB;AAAA;;AACZ,eAAKjB,OAAL,CAAaqB,gBAAb,CAA8B/C,YAA9B,GAA6C9D,IAA7C,CAAkD,4DAAK,CAAL,CAAlD,EAA2DgD,SAA3D;AAAsE;;;AAGtE,sBAAM;AACF,kBAAI,CAACE,OAAL,CAAa/D,IAAb;;AACA,kBAAI,CAAC+D,OAAL,CAAa9D,QAAb;AACH,WAND;AAOH;AACD;;;;;;;;gDAKwB;AACpB;AACA,cAAM0H,OAAO,GAAG,KAAKrB,WAAL,CAAiBmB,aAAjC;AACA;;AACA,cAAMG,YAAY,GAAG,KAAKpB,cAAL,CAAoBqB,UAAzC;;AACA,cAAID,YAAJ,EAAkB;AACd,gBAAIE,KAAK,CAACC,OAAN,CAAcH,YAAd,CAAJ,EAAiC;AAC7B;AACAA,0BAAY,CAAC3G,OAAb;AAAsB;;;;AAItB,wBAAA+G,QAAQ;AAAA,uBAAIL,OAAO,CAACM,SAAR,CAAkBlJ,GAAlB,CAAsBiJ,QAAtB,CAAJ;AAAA,eAJR;AAKH,aAPD,MAQK;AACDL,qBAAO,CAACM,SAAR,CAAkBlJ,GAAlB,CAAsB6I,YAAtB;AACH;AACJ;;AACD,cAAI,KAAKpB,cAAL,CAAoBtB,kBAApB,KAA2C,QAA/C,EAAyD;AACrDyC,mBAAO,CAACM,SAAR,CAAkBlJ,GAAlB,CAAsB,sBAAtB;AACH;;AACD,cAAI,KAAKyH,cAAL,CAAoBrB,gBAApB,KAAyC,KAA7C,EAAoD;AAChDwC,mBAAO,CAACM,SAAR,CAAkBlJ,GAAlB,CAAsB,mBAAtB;AACH;AACJ;AACD;;;;;;;;6CAKqB;AACjB,cAAI,KAAKgI,aAAL,CAAmBmB,WAAnB,EAAJ,EAAsC;AAClC,kBAAMC,KAAK,CAAC,0EAAD,CAAX;AACH;AACJ;;;;MA5L8B,oE;;AA8LnC/B,wBAAoB,CAACpJ,UAArB,GAAkC,CAC9B;AAAEC,UAAI,EAAE,uDAAR;AAAmBC,UAAI,EAAE,CAAC;AACdqI,gBAAQ,EAAE,qBADI;AAEdC,gBAAQ,EAAE,+CAFI;AAGd;AACA;AACA;AACA;AACAG,uBAAe,EAAE,sEAAwByC,OAP3B;AAQd3C,qBAAa,EAAE,gEAAkBC,IARnB;AASd2C,kBAAU,EAAE,CAACrC,qBAAqB,CAACC,aAAvB,CATE;AAUdJ,YAAI,EAAE;AACF,yBAAe,OADb;AAEF,mBAAS,yBAFP;AAGF,sBAAY,iBAHV;AAIF,2BAAiB;AAJf,SAVQ;AAgBdC,cAAM,EAAE,CAAC,+XAAD;AAhBM,OAAD;AAAzB,KAD8B,CAAlC;AAoBA;;AACAM,wBAAoB,CAAClI,cAArB,GAAsC;AAAA,aAAM,CACxC;AAAEjB,YAAI,EAAE;AAAR,OADwC,EAExC;AAAEA,YAAI,EAAE;AAAR,OAFwC,EAGxC;AAAEA,YAAI,EAAE;AAAR,OAHwC,EAIxC;AAAEA,YAAI,EAAE6H;AAAR,OAJwC,CAAN;AAAA,KAAtC;;AAMAsB,wBAAoB,CAACkC,cAArB,GAAsC;AAClCvB,mBAAa,EAAE,CAAC;AAAE9J,YAAI,EAAE,uDAAR;AAAmBC,YAAI,EAAE,CAAC,mEAAD,EAAkB;AAAE,oBAAQ;AAAV,SAAlB;AAAzB,OAAD;AADmB,KAAtC;;AAGA,QAAI,KAAJ,EAAW,CA2DV;AAED;;;;;;;QAKMqL,iB;;;;AAENA,qBAAiB,CAACvL,UAAlB,GAA+B,CAC3B;AAAEC,UAAI,EAAE,sDAAR;AAAkBC,UAAI,EAAE,CAAC;AACbsL,eAAO,EAAE,CACL,kEADK,EAEL,gEAFK,EAGL,4DAHK,EAIL,wEAJK,EAKL,sEALK,CADI;AAQbC,eAAO,EAAE,CAACrC,oBAAD,EAAuB,sEAAvB,CARI;AASbsC,oBAAY,EAAE,CAACtC,oBAAD,EAAuBhB,cAAvB,CATD;AAUbuD,uBAAe,EAAE,CAACvC,oBAAD,EAAuBhB,cAAvB;AAVJ,OAAD;AAAxB,KAD2B,CAA/B;AAeA;;;;;;AAKA;;;;;AAIA,QAAMwD,6BAA6B,GAAG,IAAI,4DAAJ,CAAmB,+BAAnB,EAAoD;AACtF3K,gBAAU,EAAE,MAD0E;AAEtFG,aAAO,EAAEyK;AAF6E,KAApD,CAAtC;AAIA;;;;;AAIA,aAASA,qCAAT,GAAiD;AAC7C,aAAO,IAAI/D,iBAAJ,EAAP;AACH;AACD;;;;;QAGMgE,W;AACF;;;;;;;;AAQA,2BAAYC,QAAZ,EAAsBC,KAAtB,EAA6BC,SAA7B,EAAwCC,mBAAxC,EAA6DC,eAA7D,EAA8EC,cAA9E,EAA8F;AAAA;;AAC1F,aAAKL,QAAL,GAAgBA,QAAhB;AACA,aAAKC,KAAL,GAAaA,KAAb;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,mBAAL,GAA2BA,mBAA3B;AACA,aAAKC,eAAL,GAAuBA,eAAvB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA;;;;;;AAKA,aAAKC,uBAAL,GAA+B,IAA/B;AACH;AACD;;;;;;;;;AAqBA;;;;;;;;;0CASkBC,S,EAAWC,M,EAAQ;AACjC;AAAQ;AAAkB,iBAAKC,OAAL,CAAaF,SAAb,EAAwBC,MAAxB;AAA1B;AACH;AACD;;;;;;;;;;;yCAQiB/D,Q,EAAU+D,M,EAAQ;AAC/B,iBAAO,KAAKC,OAAL,CAAahE,QAAb,EAAuB+D,MAAvB,CAAP;AACH;AACD;;;;;;;;;;6BAOKE,O,EAA8B;AAAA,cAArBnE,MAAqB,uEAAZ,EAAY;AAAA,cAARiE,MAAQ;;AAC/B;AACA,cAAMG,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKR,cAAvB,CAAd,EAAsDG,MAAtD,CAAhB,CAF+B,CAG/B;AACA;;;AACAG,iBAAO,CAACzE,IAAR,GAAe;AAAEwE,mBAAO,EAAPA,OAAF;AAAWnE,kBAAM,EAANA;AAAX,WAAf;;AACA,cAAI,CAACoE,OAAO,CAAC1E,mBAAb,EAAkC;AAC9B0E,mBAAO,CAAC1E,mBAAR,GAA8ByE,OAA9B;AACH;;AACD,iBAAO,KAAKI,iBAAL,CAAuBzE,cAAvB,EAAuCsE,OAAvC,CAAP;AACH;AACD;;;;;;;kCAIU;AACN,cAAI,KAAKI,kBAAT,EAA6B;AACzB,iBAAKA,kBAAL,CAAwBhG,OAAxB;AACH;AACJ;AACD;;;;;;sCAGc;AACV;AACA,cAAI,KAAKuF,uBAAT,EAAkC;AAC9B,iBAAKA,uBAAL,CAA6BvF,OAA7B;AACH;AACJ;AACD;;;;;;;;;;iDAOyBiG,U,EAAYR,M,EAAQ;AACzC;AACA,cAAMS,YAAY,GAAGT,MAAM,IAAIA,MAAM,CAACU,gBAAjB,IAAqCV,MAAM,CAACU,gBAAP,CAAwBC,QAAlF;AACA;;AACA,cAAMA,QAAQ,GAAG,IAAI,kEAAJ,CAAmBF,YAAY,IAAI,KAAKf,SAAxC,EAAmD,IAAIkB,OAAJ,CAAY,CAC5E,CAACrF,iBAAD,EAAoByE,MAApB,CAD4E,CAAZ,CAAnD,CAAjB;AAGA;;AACA,cAAMa,eAAe,GAAG,IAAI,mEAAJ,CAAoBhE,oBAApB,EAA0CmD,MAAM,CAACU,gBAAjD,EAAmEC,QAAnE,CAAxB;AACA;;AACA,cAAMG,YAAY,GAAGN,UAAU,CAACO,MAAX,CAAkBF,eAAlB,CAArB;AACAC,sBAAY,CAACE,QAAb,CAAsB/D,cAAtB,GAAuC+C,MAAvC;AACA,iBAAOc,YAAY,CAACE,QAApB;AACH;AACD;;;;;;;;;;;gCAQQC,O,EAASC,U,EAAY;AACzB;AACA,cAAMlB,MAAM,GAAGI,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,IAAI9E,iBAAJ,EAAlB,CAAd,EAA0D,KAAKsE,cAA/D,CAAd,EAA8FqB,UAA9F,CAAf;AACA;;AACA,cAAMV,UAAU,GAAG,KAAKW,cAAL,CAAoBnB,MAApB,CAAnB;AACA;;;AACA,cAAMoB,SAAS,GAAG,KAAKC,wBAAL,CAA8Bb,UAA9B,EAA0CR,MAA1C,CAAlB;AACA;;;AACA,cAAMlE,WAAW,GAAG,IAAIhC,cAAJ,CAAmBsH,SAAnB,EAA8BZ,UAA9B,CAApB;;AACA,cAAIS,OAAO,YAAY,yDAAvB,EAAoC;AAChC;AACA,gBAAM5D,MAAM,GAAG,IAAI,kEAAJ,CAAmB4D,OAAnB;AAA6B;AAAkB,gBAA/C;AAAwD;AAAkB;AACrFK,uBAAS,EAAEtB,MAAM,CAACtE,IADmE;AAErFI,yBAAW,EAAXA;AAFqF,aAA1E,CAAf;AAIAA,uBAAW,CAACkF,QAAZ,GAAuBI,SAAS,CAACzD,oBAAV,CAA+BN,MAA/B,CAAvB;AACH,WAPD,MAQK;AACD;AACA,gBAAMsD,QAAQ,GAAG,KAAKY,eAAL,CAAqBvB,MAArB,EAA6BlE,WAA7B,CAAjB;AACA;;;AACA,gBAAMuB,OAAM,GAAG,IAAI,mEAAJ,CAAoB4D,OAApB,EAA6BzE,SAA7B,EAAwCmE,QAAxC,CAAf;AACA;;;AACA,gBAAMa,UAAU,GAAGJ,SAAS,CAAC1D,qBAAV,CAAgCL,OAAhC,CAAnB,CANC,CAOD;;AACAvB,uBAAW,CAACkF,QAAZ,GAAuBQ,UAAU,CAACR,QAAlC;AACH,WA1BwB,CA2BzB;AACA;AACA;;;AACA,eAAKrB,mBAAL,CAAyB8B,OAAzB,CAAiC,iEAAYrI,eAA7C,EAA8D9B,IAA9D,CAAmE,iEAAUkJ,UAAU,CAACkB,WAAX,EAAV,CAAnE,EAAwGpH,SAAxG;AAAmH;;;;AAInH,oBAAA3C,KAAK,EAAI;AACL;AACA,gBAAM+G,SAAS,GAAG8B,UAAU,CAACmB,cAAX,CAA0BjD,SAA5C;AACA;;AACA,gBAAMkD,SAAS,GAAG,uBAAlB;AACAjK,iBAAK,CAAC/B,OAAN,GAAgB8I,SAAS,CAAClJ,GAAV,CAAcoM,SAAd,CAAhB,GAA2ClD,SAAS,CAACmD,MAAV,CAAiBD,SAAjB,CAA3C;AACH,WAVD;;AAWA,eAAKE,gBAAL,CAAsBhG,WAAtB,EAAmCkE,MAAnC;;AACA,eAAKO,kBAAL,GAA0BzE,WAA1B;AACA,iBAAO,KAAKyE,kBAAZ;AACH;AACD;;;;;;;;;;yCAOiBzE,W,EAAakE,M,EAAQ;AAAA;;AAClC;AACAlE,qBAAW,CAACiG,cAAZ,GAA6BzH,SAA7B;AAAwC;;;AAGxC,sBAAM;AACF;AACA,gBAAI,MAAI,CAACiG,kBAAL,IAA2BzE,WAA/B,EAA4C;AACxC,oBAAI,CAACyE,kBAAL,GAA0B,IAA1B;AACH;;AACD,gBAAIP,MAAM,CAACvE,mBAAX,EAAgC;AAC5B,oBAAI,CAACgE,KAAL,CAAWuC,KAAX;AACH;AACJ,WAXD;;AAYA,cAAI,KAAKzB,kBAAT,EAA6B;AACzB;AACA;AACA,iBAAKA,kBAAL,CAAwBwB,cAAxB,GAAyCzH,SAAzC;AAAoD;;;AAGpD,wBAAM;AACFwB,yBAAW,CAAC/B,iBAAZ,CAA8BkI,KAA9B;AACH,aALD;;AAMA,iBAAK1B,kBAAL,CAAwBhG,OAAxB;AACH,WAVD,MAWK;AACD;AACAuB,uBAAW,CAAC/B,iBAAZ,CAA8BkI,KAA9B;AACH,WA5BiC,CA6BlC;;;AACA,cAAIjC,MAAM,CAACjF,QAAP,IAAmBiF,MAAM,CAACjF,QAAP,GAAkB,CAAzC,EAA4C;AACxCe,uBAAW,CAACoG,WAAZ,GAA0B5H,SAA1B;AAAqC;;;AAGrC;AAAA,qBAAMwB,WAAW,CAACqG,aAAZ;AAA2B;AAAkBnC,oBAAM,CAACjF,QAApD,CAAN;AAAA,aAHA;AAIH;;AACD,cAAIiF,MAAM,CAACvE,mBAAX,EAAgC;AAC5B,iBAAKgE,KAAL,CAAW2C,QAAX,CAAoBpC,MAAM,CAACvE,mBAA3B,EAAgDuE,MAAM,CAACxE,UAAvD;AACH;AACJ;AACD;;;;;;;;;uCAMewE,M,EAAQ;AACnB;AACA,cAAMqC,aAAa,GAAG,IAAI,kEAAJ,EAAtB;AACAA,uBAAa,CAACC,SAAd,GAA0BtC,MAAM,CAACsC,SAAjC;AACA;;AACA,cAAIC,gBAAgB,GAAG,KAAK/C,QAAL,CAAcgD,QAAd,GAAyBC,MAAzB,EAAvB,CALmB,CAMnB;;AACA;;;AACA,cAAMC,KAAK,GAAG1C,MAAM,CAACsC,SAAP,KAAqB,KAAnC;AACA;;AACA,cAAMK,MAAM,GAAI3C,MAAM,CAACrE,kBAAP,KAA8B,MAA9B,IACXqE,MAAM,CAACrE,kBAAP,KAA8B,OAA9B,IAAyC,CAAC+G,KAD/B,IAEX1C,MAAM,CAACrE,kBAAP,KAA8B,KAA9B,IAAuC+G,KAF5C;AAGA;;AACA,cAAME,OAAO,GAAG,CAACD,MAAD,IAAW3C,MAAM,CAACrE,kBAAP,KAA8B,QAAzD;;AACA,cAAIgH,MAAJ,EAAY;AACRJ,4BAAgB,CAACM,IAAjB,CAAsB,GAAtB;AACH,WAFD,MAGK,IAAID,OAAJ,EAAa;AACdL,4BAAgB,CAACO,KAAjB,CAAuB,GAAvB;AACH,WAFI,MAGA;AACDP,4BAAgB,CAACQ,kBAAjB;AACH,WAvBkB,CAwBnB;;;AACA,cAAI/C,MAAM,CAACpE,gBAAP,KAA4B,KAAhC,EAAuC;AACnC2G,4BAAgB,CAACS,GAAjB,CAAqB,GAArB;AACH,WAFD,MAGK;AACDT,4BAAgB,CAACU,MAAjB,CAAwB,GAAxB;AACH;;AACDZ,uBAAa,CAACE,gBAAd,GAAiCA,gBAAjC;AACA,iBAAO,KAAK/C,QAAL,CAAc0D,MAAd,CAAqBb,aAArB,CAAP;AACH;AACD;;;;;;;;;;;wCAQgBrC,M,EAAQlE,W,EAAa;AACjC;AACA,cAAM2E,YAAY,GAAGT,MAAM,IAAIA,MAAM,CAACU,gBAAjB,IAAqCV,MAAM,CAACU,gBAAP,CAAwBC,QAAlF;AACA,iBAAO,IAAI,kEAAJ,CAAmBF,YAAY,IAAI,KAAKf,SAAxC,EAAmD,IAAIkB,OAAJ,CAAY,CAClE,CAAC9G,cAAD,EAAiBgC,WAAjB,CADkE,EAElE,CAACR,kBAAD,EAAqB0E,MAAM,CAACtE,IAA5B,CAFkE,CAAZ,CAAnD,CAAP;AAIH;;;4BA5PwB;AACrB;AACA,cAAMyH,MAAM,GAAG,KAAKvD,eAApB;AACA,iBAAOuD,MAAM,GAAGA,MAAM,CAAC5C,kBAAV,GAA+B,KAAKT,uBAAjD;AACH;AACD;;;;;0BAIuBnJ,K,EAAO;AAC1B,cAAI,KAAKiJ,eAAT,EAA0B;AACtB,iBAAKA,eAAL,CAAqBW,kBAArB,GAA0C5J,KAA1C;AACH,WAFD,MAGK;AACD,iBAAKmJ,uBAAL,GAA+BnJ,KAA/B;AACH;AACJ;;;;;;AA8OL4I,eAAW,CAAC9L,UAAZ,GAAyB,CACrB;AAAEC,UAAI,EAAE,wDAAR;AAAoBC,UAAI,EAAE,CAAC;AAAEe,kBAAU,EAAEsK;AAAd,OAAD;AAA1B,KADqB,CAAzB;AAGA;;AACAO,eAAW,CAAC5K,cAAZ,GAA6B;AAAA,aAAM,CAC/B;AAAEjB,YAAI,EAAE;AAAR,OAD+B,EAE/B;AAAEA,YAAI,EAAE;AAAR,OAF+B,EAG/B;AAAEA,YAAI,EAAE;AAAR,OAH+B,EAI/B;AAAEA,YAAI,EAAE;AAAR,OAJ+B,EAK/B;AAAEA,YAAI,EAAE6L,WAAR;AAAqB9L,kBAAU,EAAE,CAAC;AAAEC,cAAI,EAAE;AAAR,SAAD,EAAqB;AAAEA,cAAI,EAAE;AAAR,SAArB;AAAjC,OAL+B,EAM/B;AAAEA,YAAI,EAAE6H,iBAAR;AAA2B9H,kBAAU,EAAE,CAAC;AAAEC,cAAI,EAAE,oDAAR;AAAgBC,cAAI,EAAE,CAAC0L,6BAAD;AAAtB,SAAD;AAAvC,OAN+B,CAAN;AAAA,KAA7B;AAQA;;;AAAmBE,eAAW,CAAC3K,KAAZ,GAAoB,yEAAmB;AAAEC,aAAO,EAAE,SAASuO,mBAAT,GAA+B;AAAE,eAAO,IAAI7D,WAAJ,CAAgB,+DAAS,4DAAT,CAAhB,EAAmC,+DAAS,+DAAT,CAAnC,EAA4D,+DAAS,sDAAT,CAA5D,EAAgF,+DAAS,uEAAT,CAAhF,EAA8G,+DAASA,WAAT,EAAsB,EAAtB,CAA9G,EAAyI,+DAASF,6BAAT,CAAzI,CAAP;AAA2L,OAAvO;AAAyOtK,WAAK,EAAEwK,WAAhP;AAA6P7K,gBAAU,EAAEsK;AAAzQ,KAAnB,CAApB;;AACnB,QAAI,KAAJ,EAAW,CAuCV;AAED;;;;;;AAMA;;;AAKA","file":"default~close-account-close-account-module~generate-statement-generate-statement-module~upload-all-u~9cc96008-es5.js","sourcesContent":["import { NgModule, Injectable, ÉµÉµdefineInjectable, ÉµÉµinject, NgZone } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/layout-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LayoutModule {\n}\nLayoutModule.decorators = [\n    { type: NgModule, args: [{},] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/media-matcher.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Global registry for all dynamically-created, injected media queries.\n * @type {?}\n */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/**\n * Style tag that holds all of the dynamically-created media queries.\n * @type {?}\n */\nlet mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\nclass MediaMatcher {\n    /**\n     * @param {?} _platform\n     */\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n/** @nocollapse */ MediaMatcher.Éµprov = ÉµÉµdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(ÉµÉµinject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\nif (false) {\n    /**\n     * The internal matchMedia method to return back a MediaQueryList like object.\n     * @type {?}\n     * @private\n     */\n    MediaMatcher.prototype._matchMedia;\n    /**\n     * @type {?}\n     * @private\n     */\n    MediaMatcher.prototype._platform;\n}\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            (/** @type {?} */ (document.head)).appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            ((/** @type {?} */ (mediaQueryStyleNode.sheet)))\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return (/** @type {?} */ ({\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: (/**\n         * @return {?}\n         */\n        () => { }),\n        removeListener: (/**\n         * @return {?}\n         */\n        () => { })\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/breakpoints-observer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The current state of a layout breakpoint.\n * @record\n */\nfunction BreakpointState() { }\nif (false) {\n    /**\n     * Whether the breakpoint is currently matching.\n     * @type {?}\n     */\n    BreakpointState.prototype.matches;\n    /**\n     * A key boolean pair for each query provided to the observe method,\n     * with its current matched state.\n     * @type {?}\n     */\n    BreakpointState.prototype.breakpoints;\n}\n/**\n * The current state of a layout breakpoint.\n * @record\n */\nfunction InternalBreakpointState() { }\nif (false) {\n    /**\n     * Whether the breakpoint is currently matching.\n     * @type {?}\n     */\n    InternalBreakpointState.prototype.matches;\n    /**\n     * The media query being to be matched\n     * @type {?}\n     */\n    InternalBreakpointState.prototype.query;\n}\n/**\n * @record\n */\nfunction Query() { }\nif (false) {\n    /** @type {?} */\n    Query.prototype.observable;\n    /** @type {?} */\n    Query.prototype.mql;\n}\n/**\n * Utility for checking the matching state of \\@media queries.\n */\nclass BreakpointObserver {\n    /**\n     * @param {?} _mediaMatcher\n     * @param {?} _zone\n     */\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**\n         * A map of all media queries currently being listened for.\n         */\n        this._queries = new Map();\n        /**\n         * A subject for all other observables to takeUntil based on.\n         */\n        this._destroySubject = new Subject();\n    }\n    /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    isMatched(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        return queries.some((/**\n         * @param {?} mediaQuery\n         * @return {?}\n         */\n        mediaQuery => this._registerQuery(mediaQuery).mql.matches));\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    observe(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        /** @type {?} */\n        const observables = queries.map((/**\n         * @param {?} query\n         * @return {?}\n         */\n        query => this._registerQuery(query).observable));\n        /** @type {?} */\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map((/**\n         * @param {?} breakpointStates\n         * @return {?}\n         */\n        (breakpointStates) => {\n            /** @type {?} */\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach((/**\n             * @param {?} state\n             * @return {?}\n             */\n            (state) => {\n                response.matches = response.matches || state.matches;\n                response.breakpoints[state.query] = state.matches;\n            }));\n            return response;\n        })));\n    }\n    /**\n     * Registers a specific query to be listened for.\n     * @private\n     * @param {?} query\n     * @return {?}\n     */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return (/** @type {?} */ (this._queries.get(query)));\n        }\n        /** @type {?} */\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        /** @type {?} */\n        const queryObservable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            /** @type {?} */\n            const handler = (/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => this._zone.run((/**\n             * @return {?}\n             */\n            () => observer.next(e))));\n            mql.addListener(handler);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                mql.removeListener(handler);\n            });\n        })).pipe(startWith(mql), map((/**\n         * @param {?} nextMql\n         * @return {?}\n         */\n        (nextMql) => ({ query, matches: nextMql.matches }))), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        /** @type {?} */\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n/** @nocollapse */ BreakpointObserver.Éµprov = ÉµÉµdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(ÉµÉµinject(MediaMatcher), ÉµÉµinject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\nif (false) {\n    /**\n     * A map of all media queries currently being listened for.\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._queries;\n    /**\n     * A subject for all other observables to takeUntil based on.\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._destroySubject;\n    /**\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._mediaMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._zone;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n    return queries.map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    (query) => query.split(',')))\n        .reduce((/**\n     * @param {?} a1\n     * @param {?} a2\n     * @return {?}\n     */\n    (a1, a2) => a1.concat(a2)))\n        .map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    query => query.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/breakpoints.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nconst Breakpoints = {\n    XSmall: '(max-width: 599.99px)',\n    Small: '(min-width: 600px) and (max-width: 959.99px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.99px) and (orientation: portrait), ' +\n        '(max-width: 959.99px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n//# sourceMappingURL=layout.js.map\n","import { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, PortalInjector, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, TemplateRef, Injectable, Injector, Optional, SkipSelf, ÉµÉµdefineInjectable, ÉµÉµinject, INJECTOR } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/snack-bar-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event that is emitted when a snack bar is dismissed.\n * @record\n */\nfunction MatSnackBarDismiss() { }\nif (false) {\n    /**\n     * Whether the snack bar was dismissed using the action button.\n     * @type {?}\n     */\n    MatSnackBarDismiss.prototype.dismissedByAction;\n}\n/**\n * Maximum amount of milliseconds that can be passed into setTimeout.\n * @type {?}\n */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nclass MatSnackBarRef {\n    /**\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe((/**\n         * @return {?}\n         */\n        () => this.dismiss()));\n        containerInstance._onExit.subscribe((/**\n         * @return {?}\n         */\n        () => this._finishDismiss()));\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => this.dismiss()), Math.min(duration, MAX_TIMEOUT));\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @private\n     * @return {?}\n     */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\nif (false) {\n    /**\n     * The instance of the component making up the content of the snack bar.\n     * @type {?}\n     */\n    MatSnackBarRef.prototype.instance;\n    /**\n     * The instance of the component making up the content of the snack bar.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatSnackBarRef.prototype.containerInstance;\n    /**\n     * Subject for notifying the user that the snack bar has been dismissed.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._afterDismissed;\n    /**\n     * Subject for notifying the user that the snack bar has opened and appeared.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._afterOpened;\n    /**\n     * Subject for notifying the user that the snack bar action was called.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._onAction;\n    /**\n     * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n     * dismissed before the duration passes.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._durationTimeoutId;\n    /**\n     * Whether the snack bar was dismissed using the action button.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._dismissedByAction;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._overlayRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/snack-bar-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n}\nif (false) {\n    /**\n     * The politeness level for the MatAriaLiveAnnouncer announcement.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.politeness;\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.announcementMessage;\n    /**\n     * The view container that serves as the parent for the snackbar for the purposes of dependency\n     * injection. Note: this does not affect where the snackbar is inserted in the DOM.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.viewContainerRef;\n    /**\n     * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.duration;\n    /**\n     * Extra CSS classes to be added to the snack bar container.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.panelClass;\n    /**\n     * Text layout direction for the snack bar.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.direction;\n    /**\n     * Data being injected into the child component.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.data;\n    /**\n     * The horizontal position to place the snack bar.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.horizontalPosition;\n    /**\n     * The vertical position to place the snack bar.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.verticalPosition;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/simple-snack-bar.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    /**\n     * @param {?} snackBarRef\n     * @param {?} data\n     */\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.decorators = [\n    { type: Component, args: [{\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar',\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\nif (false) {\n    /**\n     * Data that was injected into the snack bar.\n     * @type {?}\n     */\n    SimpleSnackBar.prototype.data;\n    /** @type {?} */\n    SimpleSnackBar.prototype.snackBarRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/snack-bar-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material snack bar.\n * \\@docs-private\n * @type {?}\n */\nconst matSnackBarAnimations = {\n    /**\n     * Animation that shows and hides a snack bar.\n     */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/snack-bar-container.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} snackBarConfig\n     */\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * \\@breaking-change 10.0.0\n         */\n        this.attachDomPortal = (/**\n         * @param {?} portal\n         * @return {?}\n         */\n        (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        });\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._role = 'alert';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._role = null;\n        }\n        else {\n            this._role = 'status';\n        }\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            /** @type {?} */\n            const onEnter = this._onEnter;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                onEnter.next();\n                onEnter.complete();\n            }));\n        }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @private\n     * @return {?}\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._onExit.next();\n            this._onExit.complete();\n        }));\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @private\n     * @return {?}\n     */\n    _applySnackBarClasses() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach((/**\n                 * @param {?} cssClass\n                 * @return {?}\n                 */\n                cssClass => element.classList.add(cssClass)));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @private\n     * @return {?}\n     */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.decorators = [\n    { type: Component, args: [{\n                selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    '[attr.role]': '_role',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\nif (false) {\n    /**\n     * Whether the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarContainer.prototype._destroyed;\n    /**\n     * The portal outlet inside of this container into which the snack bar content will be loaded.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._portalOutlet;\n    /**\n     * Subject for notifying that the snack bar has exited from view.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._onExit;\n    /**\n     * Subject for notifying that the snack bar has finished entering the view.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._onEnter;\n    /**\n     * The state of the snack bar animations.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._animationState;\n    /**\n     * ARIA role for the snack bar container.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._role;\n    /**\n     * Attaches a DOM portal to the snack bar container.\n     * @deprecated To be turned into a method.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype.attachDomPortal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBarContainer.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBarContainer.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBarContainer.prototype._changeDetectorRef;\n    /**\n     * The snack bar configuration.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype.snackBarConfig;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/snack-bar-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/snack-bar.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify default snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _injector\n     * @param {?} _breakpointObserver\n     * @param {?} _parentSnackBar\n     * @param {?} _defaultConfig\n     */\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened snackbar at *any* level.\n     * @return {?}\n     */\n    get _openedSnackBarRef() {\n        /** @type {?} */\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromComponent(component, config) {\n        return (/** @type {?} */ (this._attach(component, config)));\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    open(message, action = '', config) {\n        /** @type {?} */\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @private\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @private\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    _attach(content, userConfig) {\n        /** @type {?} */\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            /** @type {?} */\n            const portal = new TemplatePortal(content, (/** @type {?} */ (null)), (/** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef\n            })));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            const portal = new ComponentPortal(content, undefined, injector);\n            /** @type {?} */\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => {\n            /** @type {?} */\n            const classList = overlayRef.overlayElement.classList;\n            /** @type {?} */\n            const className = 'mat-snack-bar-handset';\n            state.matches ? classList.add(className) : classList.remove(className);\n        }));\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @private\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        }));\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                snackBarRef.containerInstance.enter();\n            }));\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe((/**\n             * @return {?}\n             */\n            () => snackBarRef._dismissAfter((/** @type {?} */ (config.duration)))));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @private\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        /** @type {?} */\n        const isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @private\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    _createInjector(config, snackBarRef) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    }\n}\nMatSnackBar.decorators = [\n    { type: Injectable, args: [{ providedIn: MatSnackBarModule },] }\n];\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/** @nocollapse */ MatSnackBar.Éµprov = ÉµÉµdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ÉµÉµinject(Overlay), ÉµÉµinject(LiveAnnouncer), ÉµÉµinject(INJECTOR), ÉµÉµinject(BreakpointObserver), ÉµÉµinject(MatSnackBar, 12), ÉµÉµinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nif (false) {\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._snackBarRefAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._live;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._breakpointObserver;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._parentSnackBar;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._defaultConfig;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n//# sourceMappingURL=snack-bar.js.map\n"]}