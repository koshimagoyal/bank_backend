{"version":3,"sources":["webpack:///src/app/miscellaneous-page/miscellaneous-page/miscellaneous-page.component.html","webpack:///src/app/miscellaneous-page/miscellaneous-page-routing.module.ts","webpack:///src/app/miscellaneous-page/miscellaneous-page.module.ts","webpack:///src/app/miscellaneous-page/miscellaneous-page/miscellaneous-page.component.scss","webpack:///src/app/miscellaneous-page/miscellaneous-page/miscellaneous-page.component.ts","webpack:///src/app/miscellaneous-page/services/index.ts","webpack:///src/app/miscellaneous-page/services/miscellaneous.service.ts"],"names":["routes","path","component","MiscellaneousPageRoutingModule","imports","forChild","exports","MiscellaneousPageModule","declarations","providers","MiscellaneousPageComponent","service","session","fb","cheque","cash","search","table","searchForm","group","chequeNo","compose","required","cashForm","date","amount","bankName","chequeForm","chequeDate","getBankList","subscribe","result","bankList","console","log","user","retrieve","text","id","data","userId","get","value","mode","typeCash","typeBank","cashPurpose","bankPurpose","transferCash","fire","icon","then","isConfirm","purpose","employeeId","employeeName","error1","title","withdrawCash","searchCheque","length","particulars","name","credit","debit","selector","template","services","MiscellaneousService","http","url","headers","append","post","providedIn"],"mappings":"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","file":"miscellaneous-page-miscellaneous-page-module-es5.js","sourcesContent":["export default \"<sb-layout-dashboard>\\n    <sb-dashboard-head title=\\\"{{'Accountant.Pages.Transfer'| translate}}\\\"></sb-dashboard-head>\\n    <hr class=\\\"rounded\\\">\\n    <br>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-sm-1\\\"></div>\\n        <div class=\\\"col\\\">\\n            <button class=\\\"btn-primary\\\" (click)=\\\"showSearch()\\\">{{'Accountant.Tables.SearchCheque'| translate}}</button>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <button class=\\\"btn-primary\\\" (click)=\\\"showCash()\\\">{{'Accountant.Tables.TransferCash'| translate}}</button>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <button class=\\\"btn-primary\\\" (click)=\\\"showCheque()\\\">{{'Accountant.Tables.TransferBank'| translate}}</button>\\n        </div>\\n    </div>\\n    <br>\\n    <br>\\n    <div class=\\\"row\\\" *ngIf=\\\"search\\\">\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n        <div class=\\\"col-xl-8 col-md-10\\\">\\n            <sb-card>\\n                <div class=\\\"card-header\\\"><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>{{'Accountant.Tables.SearchCheque'| translate}}</div>\\n                <div class=\\\"card-body table-responsive\\\">\\n                    <form class=\\\"form-inline\\\" [formGroup]=\\\"searchForm\\\" (ngSubmit)=\\\"showTable()\\\">\\n                        <label>\\n                            <input type=\\\"text\\\" placeholder=\\\"Enter Cheque Number\\\" formControlName=\\\"chequeNo\\\"/>\\n                        </label>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"!searchForm.valid\\\">{{'Accountant.GetInfo'| translate}}</button>\\n                    </form>\\n                    <table class=\\\"table table-striped\\\" *ngIf=\\\"table\\\" id=\\\"contennnt\\\">\\n                        <tbody>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.ShowDate'| translate}}</td>\\n                            <td>{{date| date:'dd-MM-yyyy'}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.AmountReceived'| translate}}</td>\\n                            <td>{{amount| indianCurrency}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.ChequeDate'| translate}}</td>\\n                            <td>{{chequeDate| date:'dd-MM-yyyy'}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.BankName'| translate}}</td>\\n                            <td>{{bankName}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.EmployeeNo'| translate}}</td>\\n                            <td>{{employeeId}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.EmployeeName'| translate}}</td>\\n                            <td>{{employeeName}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Purpose'| translate}}</td>\\n                            <td>{{purpose}}</td>\\n                        </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </sb-card>\\n        </div>\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"cash\\\">\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n        <div class=\\\"col-xl-8 col-md-10\\\">\\n            <sb-card>\\n                <div class=\\\"card-header\\\"><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>{{'Accountant.Tables.TransferCash'| translate}}</div>\\n                <div class=\\\"card-body table-responsive\\\">\\n                    <form [formGroup]=\\\"cashForm\\\" (ngSubmit)=\\\"send()\\\">\\n                        <table class=\\\"table table-striped\\\" id=\\\"contennt\\\">\\n                            <tbody>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.Date'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"date\\\" formControlName=\\\"date\\\"/>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"cashForm.get('date').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.Amount'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"number\\\" formControlName=\\\"amount\\\"/>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"cashForm.get('amount').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.BankName' | translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <select class=\\\"custom-select\\\" formControlName=\\\"bankName\\\">\\n                                            <option *ngFor=\\\"let val of bankList\\\">{{val.bankName}}</option>\\n                                        </select>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"cashForm.get('bankName').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            </tbody>\\n                        </table>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"!cashForm.valid\\\">{{'Accountant.Tables.Submit'| translate}}</button>\\n                    </form>\\n                </div>\\n            </sb-card>\\n        </div>\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"cheque\\\">\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n        <div class=\\\"col-xl-8 col-md-10\\\">\\n            <sb-card>\\n                <div class=\\\"card-header\\\"><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>{{'Accountant.Tables.TransferBank'| translate}}</div>\\n                <div class=\\\"card-body table-responsive\\\">\\n                    <form [formGroup]=\\\"chequeForm\\\" (ngSubmit)=\\\"send()\\\">\\n                        <table class=\\\"table table-striped\\\" id=\\\"contentt\\\">\\n                            <tbody>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.Date'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"date\\\" formControlName=\\\"date\\\" required/>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"chequeForm.get('date').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.Amount'| translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"number\\\" formControlName=\\\"amount\\\" required/>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"chequeForm.get('amount').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.BankName' | translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <select class=\\\"custom-select\\\" formControlName=\\\"bankName\\\">\\n                                            <option *ngFor=\\\"let val of bankList\\\">{{val.bankName}}</option>\\n                                        </select>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"chequeForm.get('bankName').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.ChequeDate' | translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"date\\\" formControlName=\\\"chequeDate\\\"/>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"chequeForm.get('chequeDate').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{'Accountant.Tables.ChequeNo' | translate}}</td>\\n                                <td>\\n                                    <label>\\n                                        <input type=\\\"text\\\" formControlName=\\\"chequeNo\\\"/>\\n                                    </label>\\n                                    <div class=\\\"alert alert-danger error-box\\\" *ngIf=\\\"chequeForm.get('chequeNo').hasError('required')\\\">Required!</div>\\n                                </td>\\n                            </tr>\\n                            </tbody>\\n                        </table>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"!chequeForm.valid\\\">{{'Accountant.Tables.Submit'| translate}}</button>\\n                    </form>\\n                </div>\\n            </sb-card>\\n        </div>\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n    </div>\\n</sb-layout-dashboard>\\n\\n\\n\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MiscellaneousPageComponent } from '@app/miscellaneous-page/miscellaneous-page/miscellaneous-page.component';\n\n\nconst routes: Routes = [{ path: '', component: MiscellaneousPageComponent}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class MiscellaneousPageRoutingModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppCommonModule } from '@app/app-common/app-common.module';\nimport * as service from '@app/miscellaneous-page/services';\nimport { NavigationModule } from '@app/navigation/navigation.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { MiscellaneousPageRoutingModule } from './miscellaneous-page-routing.module';\nimport { MiscellaneousPageComponent } from './miscellaneous-page/miscellaneous-page.component';\nimport { LayoutDashboardModule } from '@app/layout-dashboard/layout-dashboard.module';\n\n@NgModule({\n    declarations: [MiscellaneousPageComponent],\n    imports: [\n        CommonModule,\n        MiscellaneousPageRoutingModule,\n        NavigationModule,\n        AppCommonModule,\n        TranslateModule,\n        FormsModule,\n        LayoutDashboardModule,\n        ReactiveFormsModule,\n    ],\n    providers: [...service.services],\n})\nexport class MiscellaneousPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21pc2NlbGxhbmVvdXMtcGFnZS9taXNjZWxsYW5lb3VzLXBhZ2UvbWlzY2VsbGFuZW91cy1wYWdlLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MiscellaneousService } from '@app/miscellaneous-page/services';\nimport { SessionStorageService } from 'ngx-webstorage';\n// @ts-ignore\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\n\n@Component({\n    selector: 'sb-miscellaneous-page',\n    templateUrl: './miscellaneous-page.component.html',\n    styleUrls: ['./miscellaneous-page.component.scss'],\n})\nexport class MiscellaneousPageComponent implements OnInit {\n    cheque = false;\n    cash = false;\n    search = true;\n    table = false;\n    date: any;\n    amount: any;\n    bankName: any;\n    chequeDate: any;\n    chequeNo: any;\n    employeeId: any;\n    employeeName: any;\n    text: any;\n    purpose: any;\n    bankList: any;\n    searchForm: FormGroup;\n    cashForm: FormGroup;\n    chequeForm: FormGroup;\n    constructor(\n        private service: MiscellaneousService,\n        public session: SessionStorageService,\n        public fb: FormBuilder\n    ) {\n        this.searchForm = this.fb.group({\n            chequeNo: new FormControl('', Validators.compose([Validators.required])),\n        });\n        this.cashForm = this.fb.group({\n            date: new FormControl('', Validators.compose([Validators.required])),\n            amount: new FormControl('', Validators.compose([Validators.required])),\n            bankName: new FormControl('', Validators.compose([Validators.required])),\n        });\n        this.chequeForm = this.fb.group({\n            date: new FormControl('', Validators.compose([Validators.required])),\n            amount: new FormControl('', Validators.compose([Validators.required])),\n            bankName: new FormControl('', Validators.compose([Validators.required])),\n            chequeDate: new FormControl('', Validators.compose([Validators.required])),\n            chequeNo: new FormControl('', Validators.compose([Validators.required])),\n        });\n    }\n\n    ngOnInit() {\n        this.service.getBankList().subscribe(result => {\n            this.bankList = result;\n            console.log(this.bankList);\n        });\n        const user = this.session.retrieve('user');\n        this.text = user.id;\n    }\n\n    send() {\n        if (this.cash) {\n            const data = {\n                userId: this.text,\n                // @ts-ignore\n                date: this.cashForm.get('date').value,\n                mode: 'Cash',\n                typeCash: 'Transfer Cash',\n                typeBank: 'Transfer Bank',\n                // @ts-ignore\n                amount: this.cashForm.get('amount').value,\n                // @ts-ignore\n                bankName: this.cashForm.get('bankName').value,\n                cashPurpose:\n                    'Transfered to ' +\n                    // @ts-ignore\n                    this.cashForm.get('bankName').value +\n                    ' on ' +\n                    // @ts-ignore\n                    this.cashForm.get('date').value,\n                // @ts-ignore\n                bankPurpose: 'Transfered from Cash Account on ' + this.cashForm.get('date').value,\n            };\n            console.log(data);\n            this.service.transferCash(data).subscribe(\n                result => {\n                    Swal.fire({\n                        text: 'Sent!',\n                        icon: 'success',\n                    }).then((isConfirm: any) => {\n                        if (isConfirm) {\n                            // @ts-ignore\n                            this.date = null;\n                            this.chequeNo = null;\n                            this.chequeDate = null;\n                            this.bankName = null;\n                            this.purpose = null;\n                            this.employeeId = null;\n                            this.employeeName = null;\n                            this.amount = null;\n                            this.cashForm = this.fb.group({\n                                date: new FormControl('', Validators.compose([Validators.required])),\n                                amount: new FormControl('', Validators.compose([Validators.required])),\n                                bankName: new FormControl('', Validators.compose([Validators.required])),\n                            });\n                        }\n                    });\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        } else {\n            const data = {\n                userId: this.text,\n                // @ts-ignore\n                date: this.chequeForm.get('date').value,\n                mode: 'Cheque',\n                typeCash: 'Transfer Cash',\n                typeBank: 'Transfer Bank',\n                // @ts-ignore\n                amount: this.chequeForm.get('amount').value,\n                // @ts-ignore\n                bankName: this.chequeForm.get('bankName').value,\n                // @ts-ignore\n                chequeDate: this.chequeForm.get('chequeDate').value,\n                // @ts-ignore\n                chequeNo: this.chequeForm.get('chequeNo').value,\n                // @ts-ignore\n                cashPurpose:\n                    'Transfered from ' +\n                    // @ts-ignore\n                    this.chequeForm.get('bankName').value +\n                    ' on ' +\n                    // @ts-ignore\n                    this.chequeForm.get('date').value,\n                // @ts-ignore\n                bankPurpose: 'Transfered to Cash Account on ' + this.chequeForm.get('date').value,\n            };\n            console.log(data);\n            this.service.withdrawCash(data).subscribe(\n                result => {\n                    Swal.fire({\n                        text: 'Sent!',\n                        icon: 'success',\n                    }).then((isConfirm: any) => {\n                        if (isConfirm) {\n                            // @ts-ignore\n                            this.date = null;\n                            this.chequeNo = null;\n                            this.chequeDate = null;\n                            this.bankName = null;\n                            this.purpose = null;\n                            this.employeeId = null;\n                            this.employeeName = null;\n                            this.amount = null;\n                            this.chequeForm = this.fb.group({\n                                date: new FormControl('', Validators.compose([Validators.required])),\n                                amount: new FormControl('', Validators.compose([Validators.required])),\n                                bankName: new FormControl('', Validators.compose([Validators.required])),\n                                chequeDate: new FormControl('', Validators.compose([Validators.required])),\n                                chequeNo: new FormControl('', Validators.compose([Validators.required])),\n                                purpose: new FormControl('', Validators.compose([Validators.required])),\n                            });\n                        }\n                    });\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        }\n    }\n\n    showCheque() {\n        this.cheque = true;\n        this.search = false;\n        this.cash = false;\n        this.date = null;\n        this.chequeNo = null;\n        this.chequeDate = null;\n        this.bankName = null;\n        this.purpose = null;\n        this.employeeId = null;\n        this.employeeName = null;\n        this.amount = null;\n        this.searchForm = this.fb.group({\n            chequeNo: new FormControl('', Validators.compose([Validators.required])),\n        });\n    }\n\n    showCash() {\n        this.cheque = false;\n        this.search = false;\n        this.cash = true;\n        this.date = null;\n        this.chequeNo = null;\n        this.chequeDate = null;\n        this.bankName = null;\n        this.purpose = null;\n        this.employeeId = null;\n        this.employeeName = null;\n        this.amount = null;\n    }\n\n    showTable() {\n        this.date = null;\n        this.chequeDate = null;\n        this.bankName = null;\n        this.purpose = null;\n        this.employeeId = null;\n        this.employeeName = null;\n        this.amount = null;\n        this.table = false;\n        // @ts-ignore\n        this.chequeNo = this.searchForm.get('chequeNo').value;\n        console.log(this.chequeNo);\n        this.service.searchCheque(this.chequeNo).subscribe(\n            result => {\n                console.log(result.data);\n                if (result.data.length === 0) {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'This cheque does not exists!',\n                        icon: 'error',\n                    });\n                } else {\n                    console.log(result.data);\n                    this.date = result.data[0].date;\n                    this.chequeDate = result.data[0].chequeDate;\n                    this.bankName = result.data[0].bankName;\n                    this.purpose = result.data[0].particulars;\n                    this.employeeId = result.data[0].userId;\n                    this.employeeName = result.data[0].name;\n                    if (result.data[0].credit) {\n                        this.amount = result.data[0].credit;\n                    } else {\n                        this.amount = result.data[0].debit;\n                    }\n                    this.table = true;\n                }\n            },\n            error1 => {\n                Swal.fire({\n                    title: 'Oops!',\n                    text: 'Try again!',\n                    icon: 'error',\n                });\n            }\n        );\n    }\n\n    showSearch() {\n        this.cheque = false;\n        this.search = true;\n        this.cash = false;\n    }\n}\n","import { MiscellaneousService } from './miscellaneous.service';\n\nexport const services = [MiscellaneousService];\n\nexport * from './miscellaneous.service';\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class MiscellaneousService {\n    constructor(private http: HttpClient) {}\n    getBankList(): Observable<any> {\n        const url = 'http://drsunitanayak.com/getBankList';\n        const headers = new HttpHeaders();\n        headers.append('Access-Control-Allow-Origin', '*');\n        headers.append('Access-Control-Allow-Methods', 'POST,GET,OPTIONS,PUT');\n        headers.append('Accept', 'application/json');\n        headers.append('content-type', 'application/json');\n        return this.http.get<any>(url, { headers });\n    }\n    searchCheque(text: any): Observable<any> {\n        console.log(text);\n        const url = 'http://drsunitanayak.com/searchCheque';\n        const data = {\n            chequeNo: text,\n        };\n        return this.http.post<any>(url, data);\n    }\n    transferCash(data: any): Observable<any> {\n        console.log(data);\n        const url = 'http://drsunitanayak.com/transferCash';\n        return this.http.post<any>(url, data);\n    }\n    withdrawCash(data: any): Observable<any> {\n        console.log(data);\n        const url = 'http://drsunitanayak.com/withdrawCash';\n        return this.http.post<any>(url, data);\n    }\n}\n"]}