{"version":3,"sources":["webpack:///src/app/loan-entry/loan-entry.component.html","webpack:///src/app/loan-entry/loan-entry-routing.module.ts","webpack:///src/app/loan-entry/loan-entry.component.scss","webpack:///src/app/loan-entry/loan-entry.component.ts","webpack:///src/app/loan-entry/loan-entry.module.ts","webpack:///src/app/loan-entry/services/index.ts","webpack:///src/app/loan-entry/services/loan-entry.service.ts"],"names":["routes","path","component","LoanEntryRoutingModule","imports","forChild","exports","LoanEntryComponent","loanService","fb","depositData","table","corpusData","show","searchForm","group","employeeNo","compose","required","text","get","value","console","log","getData","subscribe","result","nameData","length","fire","title","icon","name","error1","$event","target","checked","getAllData","loanTerm","loanData","loans","loanAmount","duration","date","type","interest","data","userId","loanDuration","loanType","closeLoan","sendData","then","isConfirm","getCorpusData","i","balance","credit","debit","d","Date","parse","selector","template","LoanEntryModule","declarations","providers","services","LoanEntryService","http","url","post","providedIn"],"mappings":"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","file":"loan-entry-loan-entry-module-es5.js","sourcesContent":["export default \"<sb-layout-dashboard>\\n    <sb-dashboard-head title=\\\"{{'Accountant.Pages.Entry'| translate}}\\\"></sb-dashboard-head>\\n    <hr class=\\\"rounded\\\">\\n    <br>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n        <div class=\\\"col-xl-8 col-md-10\\\">\\n            <sb-card>\\n                <div class=\\\"card-header\\\"><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>{{'Accountant.Pages.Entry'| translate}}</div>\\n                <div class=\\\"card-body table-responsive\\\">\\n                    <form class=\\\"form-inline\\\" [formGroup]=\\\"searchForm\\\" (ngSubmit)=\\\"showTable()\\\">\\n                        <label>\\n                            <input type=\\\"text\\\" placeholder=\\\"Enter Employee No\\\" formControlName=\\\"employeeNo\\\"/>\\n                        </label>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"!searchForm.valid\\\">{{'Accountant.GetInfo'| translate}}</button>\\n                    </form>\\n                    <table class=\\\"table table-striped\\\" *ngIf=\\\"table\\\" id=\\\"content\\\">\\n                        <tbody>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.EmployeeNo'| translate}}</td>\\n                            <td>{{text}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.EmployeeName'| translate}}</td>\\n                            <td>{{name}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Corpus'| translate}}</td>\\n                            <td>{{corpusData| indianCurrency}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Deposit'| translate}}</td>\\n                            <td>{{depositData| indianCurrency}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.PreviousLoans'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"checkbox\\\" (change)=\\\"focusoutHandler($event)\\\" />\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Date'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"date\\\" [(ngModel)]=\\\"date\\\" name=\\\"date\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.LoanType'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <select class=\\\"custom-select\\\" [(ngModel)]=\\\"type\\\">\\n                                        <option>{{'Accountant.Tables.Personal'| translate}}</option>\\n                                        <option>{{'Accountant.Tables.Emergency'| translate}}</option>\\n                                    </select>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Interest'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"number\\\" [(ngModel)]=\\\"interest\\\" name=\\\"interest\\\" />\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Loan'| translate}} (in INR)</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"number\\\" [(ngModel)]=\\\"loanAmount\\\" name=\\\"amount\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Duration'| translate}} (in Months)</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"number\\\" [(ngModel)]=\\\"duration\\\" name=\\\"duration\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </table>\\n                    <button *ngIf=\\\"table\\\" (click)=\\\"send()\\\">{{'Accountant.Tables.Submit'| translate}}</button>\\n                </div>\\n            </sb-card>\\n        </div>\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n    </div>\\n    <div *ngIf=\\\"show\\\">\\n        <ng-container *ngFor=\\\"let data of loans; let i = index\\\">\\n            <sb-card>\\n                <div class=\\\"card-header bg-primary headers\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col\\\" style=\\\"margin-top: 10px; color: white;\\\">\\n                            <h5><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"rupee-sign\\\"]'></fa-icon>&nbsp;{{'Employee.Loan'| translate}} ({{data.loanData.date| date:'dd-MM-yyyy'}})</h5>\\n                        </div>\\n                        <div class=\\\"col\\\" style=\\\"color: white;\\\">\\n                            <span class=\\\"float-right\\\" style=\\\"margin: 10px;\\\"><h5 *ngIf=\\\"data.loanData.loanAmount; else not\\\">{{data.loanData.loanAmount| indianCurrency}}</h5></span>\\n                        </div>\\n                    </div>\\n                </div>\\n                <ng-template #not>\\n                    <td>-</td>\\n                </ng-template>\\n                <div class=\\\"card-header\\\" *ngIf=\\\"data.loanBook\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col\\\" style=\\\"margin-top: 10px;\\\">\\n                            <fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>&nbsp;{{\\\"Employee.Loanbook.Title\\\" | translate}}\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"card-body table-responsive\\\" *ngIf=\\\"data.loanBook\\\">\\n                    <table class=\\\"table table-striped\\\">\\n                        <thead>\\n                        <tr>\\n                            <th style=\\\"width: 16.66%;\\\" scope=\\\"col\\\"><span>{{\\\"Employee.Loanbook.Date\\\" | translate}}</span></th>\\n                            <th style=\\\"width: 60%;\\\" scope=\\\"col\\\"><span>{{\\\"Employee.Loanbook.Particulars\\\" | translate}}</span></th>\\n                            <th scope=\\\"col\\\"><span>{{\\\"Employee.Loanbook.Emi\\\" | translate}}</span></th>\\n                        </tr>\\n                        </thead>\\n                        <tbody>\\n                        <tr *ngFor=\\\"let val of data.loanBook\\\">\\n                            <th scope=\\\"row\\\" *ngIf=\\\"isDate(val.date); else notDate\\\">{{val.date| date:'dd-MM-yyyy'}}</th>\\n                            <ng-template #notDate>\\n                                <th scope=\\\"row\\\">{{val.date}}</th>\\n                            </ng-template>\\n                            <td *ngIf=\\\"val.particulars; else not\\\">{{val.particulars}}</td>\\n                            <td *ngIf=\\\"val.credit; else not\\\">{{val.credit| indianCurrency}}</td>\\n                        </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n                <div class=\\\"card-body table-responsive\\\" *ngIf=\\\"data.closeData && data.closeData[0].mode==='Cash';else cheque\\\">\\n                    <h3 style=\\\"font-weight: bold; text-align: center;\\\">Loan Closure Details</h3>\\n                    <table class=\\\"table table-striped\\\">\\n                        <thead>\\n                        <tr>\\n                            <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.ShowDate\\\" | translate}}</span></th>\\n                            <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.LoanStatus\\\"  | translate}}</span></th>\\n                            <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.Mode\\\" | translate}}</span></th>\\n                            <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.Pay\\\" | translate}}</span></th>\\n                        </tr>\\n                        </thead>\\n                        <tbody>\\n                        <tr>\\n                            <th scope=\\\"row\\\" *ngIf=\\\"isDate(data.closeData[0].date); else notDate\\\">{{data.closeData[0].date| date:'dd-MM-yyyy'}}</th>\\n                            <ng-template #notDate>\\n                                <th scope=\\\"row\\\">{{data.closeData[0].date}}</th>\\n                            </ng-template>\\n                            <td *ngIf=\\\"data.loanData.closeStatus; else not\\\">{{data.loanData.closeStatus}}</td>\\n                            <td *ngIf=\\\"data.closeData[0].mode; else not\\\">{{data.closeData[0].mode}}</td>\\n                            <td *ngIf=\\\"data.closeData[0].credit; else not\\\">{{data.closeData[0].credit| indianCurrency}}</td>\\n                        </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n                <ng-template #cheque>\\n                    <div class=\\\"card-body table-responsive\\\" *ngIf=\\\"data.closeData && data.closeData[0].mode==='Cheque'\\\">\\n                        <h3 style=\\\"font-weight: bold; text-align: center;\\\">{{\\\"Accountant.Tables.LoanStatus\\\" | translate}}</h3>\\n                        <table class=\\\"table table-striped\\\">\\n                            <thead>\\n                            <tr>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.ShowDate\\\" | translate}}</span></th>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.LoanStatus\\\"  | translate}}</span></th>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.Mode\\\" | translate}}</span></th>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.Pay\\\" | translate}}</span></th>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.ChequeDate\\\" | translate}}</span></th>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.BankName\\\"  | translate}}</span></th>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.ChequeNo\\\" | translate}}</span></th>\\n                            </tr>\\n                            </thead>\\n                            <tbody>\\n                            <tr>\\n                                <th scope=\\\"row\\\" *ngIf=\\\"isDate(data.closeData[0].date); else notDate\\\">{{data.closeData[0].date| date:'dd-MM-yyyy'}}</th>\\n                                <ng-template #notDate>\\n                                    <th scope=\\\"row\\\">{{data.closeData[0].date}}</th>\\n                                </ng-template>\\n                                <td *ngIf=\\\"data.loanData.closeStatus; else not\\\">{{data.loanData.closeStatus}}</td>\\n                                <td *ngIf=\\\"data.closeData[0].mode; else not\\\">{{data.closeData[0].mode}}</td>\\n                                <td *ngIf=\\\"data.closeData[0].credit; else not\\\">{{data.closeData[0].credit| indianCurrency}}</td>\\n                                <td *ngIf=\\\"data.chequeData[0].chequeDate; else not\\\">{{data.chequeData[0].chequeDate| indianCurrency}}</td>\\n                                <td *ngIf=\\\"data.chequeData[0].bankName; else not\\\">{{data.chequeData[0].bankName| indianCurrency}}</td>\\n                                <td *ngIf=\\\"data.chequeData[0].chequeNo; else not\\\">{{data.chequeData[0].chequeNo| indianCurrency}}</td>\\n                            </tr>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </ng-template>\\n            </sb-card>\\n        </ng-container>\\n    </div>\\n</sb-layout-dashboard>\\n\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { LoanEntryComponent } from './loan-entry.component';\n\nconst routes: Routes = [{ path: '', component: LoanEntryComponent }];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class LoanEntryRoutingModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvYW4tZW50cnkvbG9hbi1lbnRyeS5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { ExpenseCorpusService } from '@app/expense/services';\nimport { LoanEntryService } from '@app/loan-entry/services';\n// @ts-ignore\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'sb-loan-entry',\n    templateUrl: './loan-entry.component.html',\n    styleUrls: ['./loan-entry.component.scss'],\n})\nexport class LoanEntryComponent implements OnInit {\n    searchForm: FormGroup;\n    text: any;\n    depositData = 23478;\n    table = false;\n    loanAmount: any;\n    duration: any;\n    type: any;\n    data: any;\n    name: any;\n    interest: any;\n    date: any;\n    corpusData = 0;\n    show = false;\n    loans: any;\n    p: any;\n    loanTerm: any;\n    constructor(private loanService: LoanEntryService, public fb: FormBuilder) {\n        this.searchForm = this.fb.group({\n            employeeNo: new FormControl('', Validators.compose([Validators.required])),\n        });\n    }\n    showTable() {\n        // @ts-ignore\n        this.text = this.searchForm.get('employeeNo').value;\n        console.log(this.text);\n        this.loanService.getData(this.text).subscribe(\n            result => {\n                console.log(result);\n                if (result.nameData.length === 0) {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'This user does not exists!',\n                        icon: 'error',\n                    });\n                } else {\n                    console.log(result);\n                    this.name = result.nameData[0].name;\n                    this.table = true;\n                }\n            },\n            error1 => {\n                Swal.fire({\n                    title: 'Oops!',\n                    text: 'Try again!',\n                    icon: 'error',\n                });\n            }\n        );\n    }\n    focusoutHandler($event: any) {\n        if ($event.target.checked) {\n            this.loanService.getAllData(this.text).subscribe(\n                result => {\n                    if (result) {\n                        console.log(result);\n                        if (result.length === 0) {\n                            Swal.fire({\n                                title: 'Oops!',\n                                text: 'No Previous Loan Exists!',\n                                icon: 'error',\n                            });\n                        } else {\n                            this.loanTerm = [result.loanData.length];\n                            this.loans = result.loanData;\n                            this.show = true;\n                        }\n                    }\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        } else {\n            this.show = false;\n        }\n    }\n    send() {\n        if (\n            !this.text ||\n            !this.loanAmount ||\n            !this.duration ||\n            !this.date ||\n            !this.type ||\n            !this.interest\n        ) {\n            Swal.fire({\n                title: 'Oops!',\n                text: 'Fill all the details!',\n                icon: 'error',\n            });\n        } else {\n            this.data = {\n                userId: this.text,\n                loanAmount: this.loanAmount,\n                loanDuration: this.duration,\n                date: this.date,\n                loanType: this.type,\n                interest: this.interest,\n                closeLoan: false,\n            };\n            this.loanService.sendData(this.data).subscribe(\n                result => {\n                    Swal.fire({\n                        text: 'Sent!',\n                        icon: 'success',\n                    }).then((isConfirm: any) => {\n                        if (isConfirm) {\n                            // @ts-ignore\n                            this.table = false;\n                            this.text = null;\n                            this.date = null;\n                            this.loanAmount = null;\n                            this.type = null;\n                            this.duration = null;\n                            this.interest = null;\n                            this.show = false;\n                            this.searchForm = this.fb.group({\n                                employeeNo: new FormControl('', Validators.compose([Validators.required])),\n                            });\n                        }\n                    });\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        }\n    }\n    ngOnInit() {\n        this.loanService.getCorpusData().subscribe(\n            result => {\n                console.log(result);\n                // tslint:disable-next-line:prefer-for-of\n                for (let i = 0; i < result.balance.length; i++) {\n                    this.corpusData =\n                        this.corpusData + result.balance[i].credit - result.balance[i].debit;\n                }\n                console.log(this.corpusData);\n            },\n            error1 => {\n                Swal.fire({\n                    title: 'Oops!',\n                    text: 'Try again!',\n                    icon: 'error',\n                });\n            }\n        );\n        return this.corpusData;\n    }\n    isDate(d: any) {\n        const result = Date.parse(d);\n        if (!result) return false;\n        else return true;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppCommonModule } from '@app/app-common/app-common.module';\nimport * as service from '@app/loan-entry/services';\nimport { NavigationModule } from '@app/navigation/navigation.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { LoanEntryRoutingModule } from './loan-entry-routing.module';\nimport { LoanEntryComponent } from './loan-entry.component';\nimport { LayoutDashboardModule } from '@app/layout-dashboard/layout-dashboard.module';\n\n@NgModule({\n    declarations: [LoanEntryComponent],\n    imports: [\n        CommonModule,\n        LoanEntryRoutingModule,\n        TranslateModule,\n        FormsModule,\n        AppCommonModule,\n        NavigationModule,\n        NgxPaginationModule,\n        Ng2SearchPipeModule,\n        LayoutDashboardModule,\n        ReactiveFormsModule,\n    ],\n    providers: [...service.services],\n})\nexport class LoanEntryModule {}\n","import { LoanEntryService } from './loan-entry.service';\n\nexport const services = [LoanEntryService];\n\nexport * from './loan-entry.service';\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LoanEntryService {\n    constructor(private http: HttpClient) {}\n\n    getData(text: any): Observable<any> {\n        console.log(text);\n        const url = 'http://drsunitanayak.com:8080/getUserData';\n        const data = {\n            userId: text,\n        };\n        return this.http.post<any>(url, data);\n    }\n    getCorpusData(): Observable<any> {\n        const url = 'http://drsunitanayak.com:8080/getCorpusData';\n        return this.http.get<any>(url);\n    }\n    getAllData(text: any): Observable<any> {\n        const data = {\n            userId: text,\n        };\n        const url = 'http://drsunitanayak.com:8080/getUserLoanData';\n        return this.http.post(url, data);\n    }\n    sendData(data: any): Observable<any> {\n        console.log(data);\n        const url = 'http://drsunitanayak.com:8080/sendLoanEntry';\n        return this.http.post<any>(url, data);\n    }\n}\n"]}