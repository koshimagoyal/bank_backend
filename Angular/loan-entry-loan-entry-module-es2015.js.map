{"version":3,"sources":["./src/app/loan-entry/loan-entry.component.html","./src/app/loan-entry/loan-entry-routing.module.ts","./src/app/loan-entry/loan-entry.component.scss","./src/app/loan-entry/loan-entry.component.ts","./src/app/loan-entry/loan-entry.module.ts","./src/app/loan-entry/services/index.ts","./src/app/loan-entry/services/loan-entry.service.ts"],"names":[],"mappings":"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","file":"loan-entry-loan-entry-module-es2015.js","sourcesContent":["export default \"<sb-layout-dashboard>\\n    <sb-dashboard-head title=\\\"{{'Accountant.Pages.Entry'| translate}}\\\"></sb-dashboard-head>\\n    <hr class=\\\"rounded\\\">\\n    <br>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n        <div class=\\\"col-xl-8 col-md-10\\\">\\n            <sb-card>\\n                <div class=\\\"card-header\\\"><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>{{'Accountant.Pages.Entry'| translate}}</div>\\n                <div class=\\\"card-body table-responsive\\\">\\n                    <form class=\\\"form-inline\\\" [formGroup]=\\\"searchForm\\\" (ngSubmit)=\\\"showTable()\\\">\\n                        <label>\\n                            <input type=\\\"text\\\" placeholder=\\\"Enter Employee No\\\" formControlName=\\\"employeeNo\\\"/>\\n                        </label>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"!searchForm.valid\\\">{{'Accountant.GetInfo'| translate}}</button>\\n                    </form>\\n                    <table class=\\\"table table-striped\\\" *ngIf=\\\"table\\\" id=\\\"content\\\">\\n                        <tbody>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.EmployeeNo'| translate}}</td>\\n                            <td>{{text}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.EmployeeName'| translate}}</td>\\n                            <td>{{name}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Corpus'| translate}}</td>\\n                            <td>{{corpusData| indianCurrency}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Deposit'| translate}}</td>\\n                            <td>{{depositData| indianCurrency}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.PreviousLoans'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"checkbox\\\" (change)=\\\"focusoutHandler($event)\\\" />\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Date'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"date\\\" [(ngModel)]=\\\"date\\\" name=\\\"date\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.LoanType'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <select class=\\\"custom-select\\\" [(ngModel)]=\\\"type\\\">\\n                                        <option>{{'Accountant.Tables.Personal'| translate}}</option>\\n                                        <option>{{'Accountant.Tables.Emergency'| translate}}</option>\\n                                    </select>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Interest'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"number\\\" [(ngModel)]=\\\"interest\\\" name=\\\"interest\\\" />\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Loan'| translate}} (in INR)</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"number\\\" [(ngModel)]=\\\"loanAmount\\\" name=\\\"amount\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Duration'| translate}} (in Months)</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"number\\\" [(ngModel)]=\\\"duration\\\" name=\\\"duration\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </table>\\n                    <button *ngIf=\\\"table\\\" (click)=\\\"send()\\\">{{'Accountant.Tables.Submit'| translate}}</button>\\n                </div>\\n            </sb-card>\\n        </div>\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n    </div>\\n    <div *ngIf=\\\"show\\\">\\n        <ng-container *ngFor=\\\"let data of loans; let i = index\\\">\\n            <sb-card>\\n                <div class=\\\"card-header bg-primary headers\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col\\\" style=\\\"margin-top: 10px; color: white;\\\">\\n                            <h5><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"rupee-sign\\\"]'></fa-icon>&nbsp;{{'Employee.Loan'| translate}} ({{data.loanData.date| date:'dd-MM-yyyy'}})</h5>\\n                        </div>\\n                        <div class=\\\"col\\\" style=\\\"color: white;\\\">\\n                            <span class=\\\"float-right\\\" style=\\\"margin: 10px;\\\"><h5 *ngIf=\\\"data.loanData.loanAmount; else not\\\">{{data.loanData.loanAmount| indianCurrency}}</h5></span>\\n                        </div>\\n                    </div>\\n                </div>\\n                <ng-template #not>\\n                    <td>-</td>\\n                </ng-template>\\n                <div class=\\\"card-header\\\" *ngIf=\\\"data.loanBook\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col\\\" style=\\\"margin-top: 10px;\\\">\\n                            <fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>&nbsp;{{\\\"Employee.Loanbook.Title\\\" | translate}}\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"card-body table-responsive\\\" *ngIf=\\\"data.loanBook\\\">\\n                    <table class=\\\"table table-striped\\\">\\n                        <thead>\\n                        <tr>\\n                            <th style=\\\"width: 16.66%;\\\" scope=\\\"col\\\"><span>{{\\\"Employee.Loanbook.Date\\\" | translate}}</span></th>\\n                            <th style=\\\"width: 60%;\\\" scope=\\\"col\\\"><span>{{\\\"Employee.Loanbook.Particulars\\\" | translate}}</span></th>\\n                            <th scope=\\\"col\\\"><span>{{\\\"Employee.Loanbook.Emi\\\" | translate}}</span></th>\\n                        </tr>\\n                        </thead>\\n                        <tbody>\\n                        <tr *ngFor=\\\"let val of data.loanBook\\\">\\n                            <th scope=\\\"row\\\" *ngIf=\\\"isDate(val.date); else notDate\\\">{{val.date| date:'dd-MM-yyyy'}}</th>\\n                            <ng-template #notDate>\\n                                <th scope=\\\"row\\\">{{val.date}}</th>\\n                            </ng-template>\\n                            <td *ngIf=\\\"val.particulars; else not\\\">{{val.particulars}}</td>\\n                            <td *ngIf=\\\"val.credit; else not\\\">{{val.credit| indianCurrency}}</td>\\n                        </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n                <div class=\\\"card-body table-responsive\\\" *ngIf=\\\"data.closeData && data.closeData[0].mode==='Cash';else cheque\\\">\\n                    <h3 style=\\\"font-weight: bold; text-align: center;\\\">Loan Closure Details</h3>\\n                    <table class=\\\"table table-striped\\\">\\n                        <thead>\\n                        <tr>\\n                            <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.ShowDate\\\" | translate}}</span></th>\\n                            <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.LoanStatus\\\"  | translate}}</span></th>\\n                            <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.Mode\\\" | translate}}</span></th>\\n                            <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.Pay\\\" | translate}}</span></th>\\n                        </tr>\\n                        </thead>\\n                        <tbody>\\n                        <tr>\\n                            <th scope=\\\"row\\\" *ngIf=\\\"isDate(data.closeData[0].date); else notDate\\\">{{data.closeData[0].date| date:'dd-MM-yyyy'}}</th>\\n                            <ng-template #notDate>\\n                                <th scope=\\\"row\\\">{{data.closeData[0].date}}</th>\\n                            </ng-template>\\n                            <td *ngIf=\\\"data.loanData.closeStatus; else not\\\">{{data.loanData.closeStatus}}</td>\\n                            <td *ngIf=\\\"data.closeData[0].mode; else not\\\">{{data.closeData[0].mode}}</td>\\n                            <td *ngIf=\\\"data.closeData[0].credit; else not\\\">{{data.closeData[0].credit| indianCurrency}}</td>\\n                        </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n                <ng-template #cheque>\\n                    <div class=\\\"card-body table-responsive\\\" *ngIf=\\\"data.closeData && data.closeData[0].mode==='Cheque'\\\">\\n                        <h3 style=\\\"font-weight: bold; text-align: center;\\\">{{\\\"Accountant.Tables.LoanStatus\\\" | translate}}</h3>\\n                        <table class=\\\"table table-striped\\\">\\n                            <thead>\\n                            <tr>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.ShowDate\\\" | translate}}</span></th>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.LoanStatus\\\"  | translate}}</span></th>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.Mode\\\" | translate}}</span></th>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.Pay\\\" | translate}}</span></th>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.ChequeDate\\\" | translate}}</span></th>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.BankName\\\"  | translate}}</span></th>\\n                                <th scope=\\\"col\\\"><span>{{\\\"Accountant.Tables.ChequeNo\\\" | translate}}</span></th>\\n                            </tr>\\n                            </thead>\\n                            <tbody>\\n                            <tr>\\n                                <th scope=\\\"row\\\" *ngIf=\\\"isDate(data.closeData[0].date); else notDate\\\">{{data.closeData[0].date| date:'dd-MM-yyyy'}}</th>\\n                                <ng-template #notDate>\\n                                    <th scope=\\\"row\\\">{{data.closeData[0].date}}</th>\\n                                </ng-template>\\n                                <td *ngIf=\\\"data.loanData.closeStatus; else not\\\">{{data.loanData.closeStatus}}</td>\\n                                <td *ngIf=\\\"data.closeData[0].mode; else not\\\">{{data.closeData[0].mode}}</td>\\n                                <td *ngIf=\\\"data.closeData[0].credit; else not\\\">{{data.closeData[0].credit| indianCurrency}}</td>\\n                                <td *ngIf=\\\"data.chequeData[0].chequeDate; else not\\\">{{data.chequeData[0].chequeDate| indianCurrency}}</td>\\n                                <td *ngIf=\\\"data.chequeData[0].bankName; else not\\\">{{data.chequeData[0].bankName| indianCurrency}}</td>\\n                                <td *ngIf=\\\"data.chequeData[0].chequeNo; else not\\\">{{data.chequeData[0].chequeNo| indianCurrency}}</td>\\n                            </tr>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </ng-template>\\n            </sb-card>\\n        </ng-container>\\n    </div>\\n</sb-layout-dashboard>\\n\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { LoanEntryComponent } from './loan-entry.component';\n\nconst routes: Routes = [{ path: '', component: LoanEntryComponent }];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class LoanEntryRoutingModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvYW4tZW50cnkvbG9hbi1lbnRyeS5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { ExpenseCorpusService } from '@app/expense/services';\nimport { LoanEntryService } from '@app/loan-entry/services';\n// @ts-ignore\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'sb-loan-entry',\n    templateUrl: './loan-entry.component.html',\n    styleUrls: ['./loan-entry.component.scss'],\n})\nexport class LoanEntryComponent implements OnInit {\n    searchForm: FormGroup;\n    text: any;\n    depositData = 23478;\n    table = false;\n    loanAmount: any;\n    duration: any;\n    type: any;\n    data: any;\n    name: any;\n    interest: any;\n    date: any;\n    corpusData = 0;\n    show = false;\n    loans: any;\n    p: any;\n    loanTerm: any;\n    constructor(private loanService: LoanEntryService, public fb: FormBuilder) {\n        this.searchForm = this.fb.group({\n            employeeNo: new FormControl('', Validators.compose([Validators.required])),\n        });\n    }\n    showTable() {\n        // @ts-ignore\n        this.text = this.searchForm.get('employeeNo').value;\n        console.log(this.text);\n        this.loanService.getData(this.text).subscribe(\n            result => {\n                console.log(result);\n                if (result.nameData.length === 0) {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'This user does not exists!',\n                        icon: 'error',\n                    });\n                } else {\n                    console.log(result);\n                    this.name = result.nameData[0].name;\n                    this.table = true;\n                }\n            },\n            error1 => {\n                Swal.fire({\n                    title: 'Oops!',\n                    text: 'Try again!',\n                    icon: 'error',\n                });\n            }\n        );\n    }\n    focusoutHandler($event: any) {\n        if ($event.target.checked) {\n            this.loanService.getAllData(this.text).subscribe(\n                result => {\n                    if (result) {\n                        console.log(result);\n                        if (result.length === 0) {\n                            Swal.fire({\n                                title: 'Oops!',\n                                text: 'No Previous Loan Exists!',\n                                icon: 'error',\n                            });\n                        } else {\n                            this.loanTerm = [result.loanData.length];\n                            this.loans = result.loanData;\n                            this.show = true;\n                        }\n                    }\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        } else {\n            this.show = false;\n        }\n    }\n    send() {\n        if (\n            !this.text ||\n            !this.loanAmount ||\n            !this.duration ||\n            !this.date ||\n            !this.type ||\n            !this.interest\n        ) {\n            Swal.fire({\n                title: 'Oops!',\n                text: 'Fill all the details!',\n                icon: 'error',\n            });\n        } else {\n            this.data = {\n                userId: this.text,\n                loanAmount: this.loanAmount,\n                loanDuration: this.duration,\n                date: this.date,\n                loanType: this.type,\n                interest: this.interest,\n                closeLoan: false,\n            };\n            this.loanService.sendData(this.data).subscribe(\n                result => {\n                    Swal.fire({\n                        text: 'Sent!',\n                        icon: 'success',\n                    }).then((isConfirm: any) => {\n                        if (isConfirm) {\n                            // @ts-ignore\n                            this.table = false;\n                            this.text = null;\n                            this.date = null;\n                            this.loanAmount = null;\n                            this.type = null;\n                            this.duration = null;\n                            this.interest = null;\n                            this.show = false;\n                            this.searchForm = this.fb.group({\n                                employeeNo: new FormControl('', Validators.compose([Validators.required])),\n                            });\n                        }\n                    });\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        }\n    }\n    ngOnInit() {\n        this.loanService.getCorpusData().subscribe(\n            result => {\n                console.log(result);\n                // tslint:disable-next-line:prefer-for-of\n                for (let i = 0; i < result.balance.length; i++) {\n                    this.corpusData =\n                        this.corpusData + result.balance[i].credit - result.balance[i].debit;\n                }\n                console.log(this.corpusData);\n            },\n            error1 => {\n                Swal.fire({\n                    title: 'Oops!',\n                    text: 'Try again!',\n                    icon: 'error',\n                });\n            }\n        );\n        return this.corpusData;\n    }\n    isDate(d: any) {\n        const result = Date.parse(d);\n        if (!result) return false;\n        else return true;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppCommonModule } from '@app/app-common/app-common.module';\nimport * as service from '@app/loan-entry/services';\nimport { NavigationModule } from '@app/navigation/navigation.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { LoanEntryRoutingModule } from './loan-entry-routing.module';\nimport { LoanEntryComponent } from './loan-entry.component';\nimport { LayoutDashboardModule } from '@app/layout-dashboard/layout-dashboard.module';\n\n@NgModule({\n    declarations: [LoanEntryComponent],\n    imports: [\n        CommonModule,\n        LoanEntryRoutingModule,\n        TranslateModule,\n        FormsModule,\n        AppCommonModule,\n        NavigationModule,\n        NgxPaginationModule,\n        Ng2SearchPipeModule,\n        LayoutDashboardModule,\n        ReactiveFormsModule,\n    ],\n    providers: [...service.services],\n})\nexport class LoanEntryModule {}\n","import { LoanEntryService } from './loan-entry.service';\n\nexport const services = [LoanEntryService];\n\nexport * from './loan-entry.service';\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LoanEntryService {\n    constructor(private http: HttpClient) {}\n\n    getData(text: any): Observable<any> {\n        console.log(text);\n        const url = 'http://drsunitanayak.com:8080/getUserData';\n        const data = {\n            userId: text,\n        };\n        return this.http.post<any>(url, data);\n    }\n    getCorpusData(): Observable<any> {\n        const url = 'http://drsunitanayak.com:8080/getCorpusData';\n        return this.http.get<any>(url);\n    }\n    getAllData(text: any): Observable<any> {\n        const data = {\n            userId: text,\n        };\n        const url = 'http://drsunitanayak.com:8080/getUserLoanData';\n        return this.http.post(url, data);\n    }\n    sendData(data: any): Observable<any> {\n        console.log(data);\n        const url = 'http://drsunitanayak.com:8080/sendLoanEntry';\n        return this.http.post<any>(url, data);\n    }\n}\n"],"sourceRoot":"webpack:///"}