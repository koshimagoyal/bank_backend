{"version":3,"sources":["./src/app/credit-entry/credit-entry.component.html","./src/app/credit-entry/credit-entry-routing.module.ts","./src/app/credit-entry/credit-entry.component.scss","./src/app/credit-entry/credit-entry.component.ts","./src/app/credit-entry/credit-entry.module.ts","./src/app/credit-entry/services/credit-entry.service.ts","./src/app/credit-entry/services/index.ts"],"names":[],"mappings":"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","file":"credit-entry-credit-entry-module-es2015.js","sourcesContent":["export default \"<sb-layout-dashboard>\\n    <sb-dashboard-head title=\\\"{{'Accountant.Pages.Credit'| translate}}\\\"></sb-dashboard-head>\\n    <hr class=\\\"rounded\\\">\\n    <br>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n        <div class=\\\"col-xl-8 col-md-10\\\">\\n            <sb-card>\\n                <div class=\\\"card-header\\\"><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>{{'Accountant.Pages.Credit'| translate}}</div>\\n                <div class=\\\"card-body table-responsive\\\">\\n                    <form class=\\\"form-inline\\\" [formGroup]=\\\"searchForm\\\" (ngSubmit)=\\\"showTable()\\\">\\n                        <label>\\n                            <input type=\\\"text\\\" placeholder=\\\"Enter Employee No\\\" formControlName=\\\"employeeNo\\\"/>\\n                        </label>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"!searchForm.valid\\\">{{'Accountant.GetInfo'| translate}}</button>\\n                    </form>\\n                    <table class=\\\"table table-striped\\\" *ngIf=\\\"table\\\" id=\\\"content\\\">\\n                        <tbody>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.EmployeeNo'| translate}}</td>\\n                            <td>{{text}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.EmployeeName'| translate}}</td>\\n                            <td>{{name}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Corpus'| translate}}</td>\\n                            <td>{{corpusData| indianCurrency}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Balance'| translate}}</td>\\n                            <td>{{balance| indianCurrency}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Date'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"date\\\" [(ngModel)]=\\\"date\\\" name=\\\"date\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.CreditAmount'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"number\\\" [(ngModel)]=\\\"creditAmount\\\" name=\\\"amount\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Mode' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <select class=\\\"custom-select\\\" [(ngModel)]=\\\"type\\\">\\n                                        <option>{{'Accountant.Tables.Cash' | translate}}</option>\\n                                        <option>{{'Accountant.Tables.Cheque' | translate}}</option>\\n                                    </select>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\n                            <td>{{'Accountant.Tables.BankName' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"bankName\\\" name=\\\"bankName\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\n                            <td>{{'Accountant.Tables.ChequeDate' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"date\\\" [(ngModel)]=\\\"chequeDate\\\" name=\\\"chequeDate\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\n                            <td>{{'Accountant.Tables.ChequeNo' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"chequeNo\\\" name=\\\"chequeNo\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Remark'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"purpose\\\" name=\\\"purpose\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </table>\\n                    <button *ngIf=\\\"table\\\" (click)=\\\"send()\\\">{{'Accountant.Tables.Submit'| translate}}</button>\\n                </div>\\n            </sb-card>\\n        </div>\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n    </div>\\n</sb-layout-dashboard>\\n\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CreditEntryComponent } from './credit-entry.component';\n\nconst routes: Routes = [{ path: '', component: CreditEntryComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CreditEntryRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NyZWRpdC1lbnRyeS9jcmVkaXQtZW50cnkuY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { CreditEntryService } from '@app/credit-entry/services';\n// @ts-ignore\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { LoanEntryService } from '@app/loan-entry/services';\n\n@Component({\n    selector: 'sb-credit-entry',\n    templateUrl: './credit-entry.component.html',\n    styleUrls: ['./credit-entry.component.scss'],\n})\nexport class CreditEntryComponent implements OnInit {\n    searchForm: FormGroup;\n    text: any;\n    type: any;\n    table = false;\n    creditAmount: any;\n    purpose: any;\n    bankName: any;\n    chequeDate: any;\n    chequeNo: any;\n    data: any;\n    name: any;\n    date: any;\n    balance = 0;\n    corpusData = 0;\n    constructor(private creditService: CreditEntryService, public fb: FormBuilder) {\n        this.searchForm = this.fb.group({\n            employeeNo: new FormControl('', Validators.compose([Validators.required])),\n        });\n    }\n    showTable() {\n        // @ts-ignore\n        this.text = this.searchForm.get('employeeNo').value;\n        console.log(this.text);\n        this.creditService.getData(this.text).subscribe(\n            result => {\n                console.log(result);\n                if (result.nameData.length === 0) {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'This user does not exists!',\n                        icon: 'error',\n                    });\n                } else {\n                    console.log(result);\n                    // tslint:disable-next-line:prefer-for-of\n                    for (let i = 0; i < result.balance.length; i++) {\n                        this.balance =\n                            this.balance + result.balance[i].credit - result.balance[i].debit;\n                    }\n                    console.log(this.balance);\n                    this.name = result.nameData[0].name;\n                    this.table = true;\n                }\n            },\n            error1 => {\n                Swal.fire({\n                    title: 'Oops!',\n                    text: 'Try again!',\n                    icon: 'error',\n                });\n            }\n        );\n        return this.balance;\n    }\n    send() {\n        if (!this.text || !this.creditAmount || !this.purpose || !this.type || !this.date) {\n            Swal.fire({\n                title: 'Oops!',\n                text: 'Fill all the details!',\n                icon: 'error',\n            });\n        } else {\n            const accountData = {\n                userId: this.text,\n                credit: this.creditAmount,\n                particulars: this.purpose,\n                mode: this.type,\n                type: 'Operational',\n                date: this.date,\n                bankName: this.bankName,\n                chequeDate: this.chequeDate,\n                chequeNo: this.chequeNo,\n            };\n            this.creditService.sendData(accountData).subscribe(\n                result => {\n                    Swal.fire({\n                        text: 'Sent!',\n                        icon: 'success',\n                    }).then((isConfirm: any) => {\n                        if (isConfirm) {\n                            // @ts-ignore\n                            this.table = false;\n                            this.text = null;\n                            this.creditAmount = null;\n                            this.purpose = null;\n                            this.date = null;\n                            this.balance = 0;\n                            this.chequeNo = null;\n                            this.chequeDate = null;\n                            this.bankName = null;\n                            this.type = null;\n                            this.searchForm = this.fb.group({\n                                employeeNo: new FormControl(\n                                    '',\n                                    Validators.compose([Validators.required])\n                                ),\n                            });\n                        }\n                    });\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        }\n    }\n    ngOnInit() {\n        this.creditService.getCorpusData().subscribe(\n            result => {\n                console.log(result);\n                // tslint:disable-next-line:prefer-for-of\n                for (let i = 0; i < result.balance.length; i++) {\n                    this.corpusData =\n                        this.corpusData + result.balance[i].credit - result.balance[i].debit;\n                }\n                console.log(this.corpusData);\n            },\n            error1 => {\n                Swal.fire({\n                    title: 'Oops!',\n                    text: 'Try again!',\n                    icon: 'error',\n                });\n            }\n        );\n        return this.corpusData;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppCommonModule } from '@app/app-common/app-common.module';\nimport { NavigationModule } from '@app/navigation/navigation.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { CreditEntryRoutingModule } from './credit-entry-routing.module';\nimport { CreditEntryComponent } from './credit-entry.component';\nimport * as service from './services';\nimport { LayoutDashboardModule } from '@app/layout-dashboard/layout-dashboard.module';\n\n\n@NgModule({\n    declarations: [CreditEntryComponent],\n    imports: [\n        CommonModule,\n        CreditEntryRoutingModule,\n        TranslateModule,\n        FormsModule,\n        AppCommonModule,\n        NavigationModule,\n        LayoutDashboardModule,\n        ReactiveFormsModule,\n    ],\n    providers: [...service.services],\n})\nexport class CreditEntryModule {}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CreditEntryService {\n    constructor(private http: HttpClient) {}\n\n    getData(text: any): Observable<any> {\n        console.log(text);\n        const url = 'http://drsunitanayak.com:8080/getOperationalAccountData';\n        const data = {\n            userId: text,\n        };\n        return this.http.post<any>(url, data);\n    }\n    getCorpusData(): Observable<any> {\n        const url = 'http://drsunitanayak.com:8080/getCorpusData';\n        return this.http.get<any>(url);\n    }\n    sendData(data: any): Observable<any> {\n        console.log(data);\n        const url = 'http://drsunitanayak.com:8080/sendCreditEntry';\n        return this.http.post<any>(url, data);\n    }\n}\n","import { CreditEntryService } from './credit-entry.service';\n\nexport const services = [CreditEntryService];\n\nexport * from './credit-entry.service';\n"],"sourceRoot":"webpack:///"}