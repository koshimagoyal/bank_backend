{"version":3,"sources":["webpack:///src/app/credit-entry/credit-entry.component.html","webpack:///src/app/credit-entry/credit-entry-routing.module.ts","webpack:///src/app/credit-entry/credit-entry.component.scss","webpack:///src/app/credit-entry/credit-entry.component.ts","webpack:///src/app/credit-entry/credit-entry.module.ts","webpack:///src/app/credit-entry/services/credit-entry.service.ts","webpack:///src/app/credit-entry/services/index.ts"],"names":["routes","path","component","CreditEntryRoutingModule","imports","forChild","exports","CreditEntryComponent","creditService","fb","table","balance","corpusData","searchForm","group","employeeNo","compose","required","text","get","value","console","log","getData","subscribe","result","nameData","length","fire","title","icon","i","credit","debit","name","error1","creditAmount","purpose","type","date","accountData","userId","particulars","mode","bankName","chequeDate","chequeNo","sendData","then","isConfirm","getCorpusData","selector","template","CreditEntryModule","declarations","providers","CreditEntryService","http","url","data","post","providedIn","services"],"mappings":"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","file":"credit-entry-credit-entry-module-es5.js","sourcesContent":["export default \"<sb-layout-dashboard>\\r\\n    <sb-dashboard-head title=\\\"{{'Accountant.Pages.Credit'| translate}}\\\"></sb-dashboard-head>\\r\\n    <hr class=\\\"rounded\\\">\\r\\n    <br>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\r\\n        <div class=\\\"col-xl-8 col-md-10\\\">\\r\\n            <sb-card>\\r\\n                <div class=\\\"card-header\\\"><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>{{'Accountant.Pages.Credit'| translate}}</div>\\r\\n                <div class=\\\"card-body table-responsive\\\">\\r\\n                    <form class=\\\"form-inline\\\" [formGroup]=\\\"searchForm\\\" (ngSubmit)=\\\"showTable()\\\">\\r\\n                        <label>\\r\\n                            <input type=\\\"text\\\" placeholder=\\\"Enter Employee No\\\" formControlName=\\\"employeeNo\\\"/>\\r\\n                        </label>\\r\\n                        <button type=\\\"submit\\\" [disabled]=\\\"!searchForm.valid\\\">{{'Accountant.GetInfo'| translate}}</button>\\r\\n                    </form>\\r\\n                    <table class=\\\"table table-striped\\\" *ngIf=\\\"table\\\" id=\\\"content\\\">\\r\\n                        <tbody>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.EmployeeNo'| translate}}</td>\\r\\n                            <td>{{text}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.EmployeeName'| translate}}</td>\\r\\n                            <td>{{name}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.Corpus'| translate}}</td>\\r\\n                            <td>{{corpusData| indianCurrency}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.Balance'| translate}}</td>\\r\\n                            <td>{{balance| indianCurrency}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.Date'| translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <input type=\\\"date\\\" [(ngModel)]=\\\"date\\\" name=\\\"date\\\"/>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.CreditAmount'| translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <input type=\\\"number\\\" [(ngModel)]=\\\"creditAmount\\\" name=\\\"amount\\\"/>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.Mode' | translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <select class=\\\"custom-select\\\" [(ngModel)]=\\\"type\\\">\\r\\n                                        <option>{{'Accountant.Tables.Cash' | translate}}</option>\\r\\n                                        <option>{{'Accountant.Tables.Cheque' | translate}}</option>\\r\\n                                    </select>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\r\\n                            <td>{{'Accountant.Tables.BankName' | translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"bankName\\\" name=\\\"bankName\\\"/>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\r\\n                            <td>{{'Accountant.Tables.ChequeDate' | translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <input type=\\\"date\\\" [(ngModel)]=\\\"chequeDate\\\" name=\\\"chequeDate\\\"/>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\r\\n                            <td>{{'Accountant.Tables.ChequeNo' | translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"chequeNo\\\" name=\\\"chequeNo\\\"/>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.Remark'| translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"purpose\\\" name=\\\"purpose\\\"/>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        </tbody>\\r\\n                    </table>\\r\\n                    <button *ngIf=\\\"table\\\" (click)=\\\"send()\\\">{{'Accountant.Tables.Submit'| translate}}</button>\\r\\n                </div>\\r\\n            </sb-card>\\r\\n        </div>\\r\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\r\\n    </div>\\r\\n</sb-layout-dashboard>\\r\\n\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CreditEntryComponent } from './credit-entry.component';\r\n\r\nconst routes: Routes = [{ path: '', component: CreditEntryComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CreditEntryRoutingModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NyZWRpdC1lbnRyeS9jcmVkaXQtZW50cnkuY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\r\nimport { CreditEntryService } from '@app/credit-entry/services';\r\n// @ts-ignore\r\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { LoanEntryService } from '@app/loan-entry/services';\r\n\r\n@Component({\r\n    selector: 'sb-credit-entry',\r\n    templateUrl: './credit-entry.component.html',\r\n    styleUrls: ['./credit-entry.component.scss'],\r\n})\r\nexport class CreditEntryComponent implements OnInit {\r\n    searchForm: FormGroup;\r\n    text: any;\r\n    type: any;\r\n    table = false;\r\n    creditAmount: any;\r\n    purpose: any;\r\n    bankName: any;\r\n    chequeDate: any;\r\n    chequeNo: any;\r\n    data: any;\r\n    name: any;\r\n    date: any;\r\n    balance = 0;\r\n    corpusData = 0;\r\n    constructor(private creditService: CreditEntryService, public fb: FormBuilder) {\r\n        this.searchForm = this.fb.group({\r\n            employeeNo: new FormControl('', Validators.compose([Validators.required])),\r\n        });\r\n    }\r\n    showTable() {\r\n        // @ts-ignore\r\n        this.text = this.searchForm.get('employeeNo').value;\r\n        console.log(this.text);\r\n        this.creditService.getData(this.text).subscribe(\r\n            result => {\r\n                console.log(result);\r\n                if (result.nameData.length === 0) {\r\n                    Swal.fire({\r\n                        title: 'Oops!',\r\n                        text: 'This user does not exists!',\r\n                        icon: 'error',\r\n                    });\r\n                } else {\r\n                    console.log(result);\r\n                    // tslint:disable-next-line:prefer-for-of\r\n                    for (let i = 0; i < result.balance.length; i++) {\r\n                        this.balance =\r\n                            this.balance + result.balance[i].credit - result.balance[i].debit;\r\n                    }\r\n                    console.log(this.balance);\r\n                    this.name = result.nameData[0].name;\r\n                    this.table = true;\r\n                }\r\n            },\r\n            error1 => {\r\n                Swal.fire({\r\n                    title: 'Oops!',\r\n                    text: 'Try again!',\r\n                    icon: 'error',\r\n                });\r\n            }\r\n        );\r\n        return this.balance;\r\n    }\r\n    send() {\r\n        if (!this.text || !this.creditAmount || !this.purpose || !this.type || !this.date) {\r\n            Swal.fire({\r\n                title: 'Oops!',\r\n                text: 'Fill all the details!',\r\n                icon: 'error',\r\n            });\r\n        } else {\r\n            const accountData = {\r\n                userId: this.text,\r\n                credit: this.creditAmount,\r\n                particulars: this.purpose,\r\n                mode: this.type,\r\n                type: 'Operational',\r\n                date: this.date,\r\n                bankName: this.bankName,\r\n                chequeDate: this.chequeDate,\r\n                chequeNo: this.chequeNo,\r\n            };\r\n            this.creditService.sendData(accountData).subscribe(\r\n                result => {\r\n                    Swal.fire({\r\n                        text: 'Sent!',\r\n                        icon: 'success',\r\n                    }).then((isConfirm: any) => {\r\n                        if (isConfirm) {\r\n                            // @ts-ignore\r\n                            this.table = false;\r\n                            this.text = null;\r\n                            this.creditAmount = null;\r\n                            this.purpose = null;\r\n                            this.date = null;\r\n                            this.balance = 0;\r\n                            this.chequeNo = null;\r\n                            this.chequeDate = null;\r\n                            this.bankName = null;\r\n                            this.type = null;\r\n                            this.searchForm = this.fb.group({\r\n                                employeeNo: new FormControl(\r\n                                    '',\r\n                                    Validators.compose([Validators.required])\r\n                                ),\r\n                            });\r\n                        }\r\n                    });\r\n                },\r\n                error1 => {\r\n                    Swal.fire({\r\n                        title: 'Oops!',\r\n                        text: 'Try again!',\r\n                        icon: 'error',\r\n                    });\r\n                }\r\n            );\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.creditService.getCorpusData().subscribe(\r\n            result => {\r\n                console.log(result);\r\n                // tslint:disable-next-line:prefer-for-of\r\n                for (let i = 0; i < result.balance.length; i++) {\r\n                    this.corpusData =\r\n                        this.corpusData + result.balance[i].credit - result.balance[i].debit;\r\n                }\r\n                console.log(this.corpusData);\r\n            },\r\n            error1 => {\r\n                Swal.fire({\r\n                    title: 'Oops!',\r\n                    text: 'Try again!',\r\n                    icon: 'error',\r\n                });\r\n            }\r\n        );\r\n        return this.corpusData;\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AppCommonModule } from '@app/app-common/app-common.module';\r\nimport { NavigationModule } from '@app/navigation/navigation.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nimport { CreditEntryRoutingModule } from './credit-entry-routing.module';\r\nimport { CreditEntryComponent } from './credit-entry.component';\r\nimport * as service from './services';\r\nimport { LayoutDashboardModule } from '@app/layout-dashboard/layout-dashboard.module';\r\n\r\n\r\n@NgModule({\r\n    declarations: [CreditEntryComponent],\r\n    imports: [\r\n        CommonModule,\r\n        CreditEntryRoutingModule,\r\n        TranslateModule,\r\n        FormsModule,\r\n        AppCommonModule,\r\n        NavigationModule,\r\n        LayoutDashboardModule,\r\n        ReactiveFormsModule,\r\n    ],\r\n    providers: [...service.services],\r\n})\r\nexport class CreditEntryModule {}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CreditEntryService {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    getData(text: any): Observable<any> {\r\n        console.log(text);\r\n        const url = 'http://206.189.129.219:8080/getOperationalAccountData';\r\n        const data = {\r\n            userId: text,\r\n        };\r\n        return this.http.post<any>(url, data);\r\n    }\r\n    getCorpusData(): Observable<any> {\r\n        const url = 'http://206.189.129.219:8080/getCorpusData';\r\n        return this.http.get<any>(url);\r\n    }\r\n    sendData(data: any): Observable<any> {\r\n        console.log(data);\r\n        const url = 'http://206.189.129.219:8080/sendCreditEntry';\r\n        return this.http.post<any>(url, data);\r\n    }\r\n}\r\n","import { CreditEntryService } from './credit-entry.service';\r\n\r\nexport const services = [CreditEntryService];\r\n\r\nexport * from './credit-entry.service';\r\n"]}