{"version":3,"sources":["webpack:///src/app/credit-entry/credit-entry.component.html","webpack:///src/app/credit-entry/credit-entry-routing.module.ts","webpack:///src/app/credit-entry/credit-entry.component.scss","webpack:///src/app/credit-entry/credit-entry.component.ts","webpack:///src/app/credit-entry/credit-entry.module.ts","webpack:///src/app/credit-entry/services/credit-entry.service.ts","webpack:///src/app/credit-entry/services/index.ts"],"names":["routes","path","component","CreditEntryRoutingModule","imports","forChild","exports","CreditEntryComponent","creditService","fb","table","balance","corpusData","searchForm","group","employeeNo","compose","required","text","get","value","console","log","getData","subscribe","result","nameData","length","fire","title","icon","i","credit","debit","name","error1","creditAmount","purpose","type","date","accountData","userId","particulars","mode","bankName","chequeDate","chequeNo","sendData","then","isConfirm","getCorpusData","selector","template","CreditEntryModule","declarations","providers","CreditEntryService","http","url","data","post","providedIn","services"],"mappings":"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","file":"credit-entry-credit-entry-module-es5.js","sourcesContent":["export default \"<sb-layout-dashboard>\\n    <sb-dashboard-head title=\\\"{{'Accountant.Pages.Credit'| translate}}\\\"></sb-dashboard-head>\\n    <hr class=\\\"rounded\\\">\\n    <br>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n        <div class=\\\"col-xl-8 col-md-10\\\">\\n            <sb-card>\\n                <div class=\\\"card-header\\\"><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>{{'Accountant.Pages.Credit'| translate}}</div>\\n                <div class=\\\"card-body table-responsive\\\">\\n                    <form class=\\\"form-inline\\\" [formGroup]=\\\"searchForm\\\" (ngSubmit)=\\\"showTable()\\\">\\n                        <label>\\n                            <input type=\\\"text\\\" placeholder=\\\"Enter Employee No\\\" formControlName=\\\"employeeNo\\\"/>\\n                        </label>\\n                        <button type=\\\"submit\\\" [disabled]=\\\"!searchForm.valid\\\">{{'Accountant.GetInfo'| translate}}</button>\\n                    </form>\\n                    <table class=\\\"table table-striped\\\" *ngIf=\\\"table\\\" id=\\\"content\\\">\\n                        <tbody>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.EmployeeNo'| translate}}</td>\\n                            <td>{{text}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.EmployeeName'| translate}}</td>\\n                            <td>{{name}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Corpus'| translate}}</td>\\n                            <td>{{corpusData| indianCurrency}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Balance'| translate}}</td>\\n                            <td>{{balance| indianCurrency}}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Date'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"date\\\" [(ngModel)]=\\\"date\\\" name=\\\"date\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.CreditAmount'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"number\\\" [(ngModel)]=\\\"creditAmount\\\" name=\\\"amount\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Mode' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <select class=\\\"custom-select\\\" [(ngModel)]=\\\"type\\\">\\n                                        <option>{{'Accountant.Tables.Cash' | translate}}</option>\\n                                        <option>{{'Accountant.Tables.Cheque' | translate}}</option>\\n                                    </select>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\n                            <td>{{'Accountant.Tables.BankName' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"bankName\\\" name=\\\"bankName\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\n                            <td>{{'Accountant.Tables.ChequeDate' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"date\\\" [(ngModel)]=\\\"chequeDate\\\" name=\\\"chequeDate\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\n                            <td>{{'Accountant.Tables.ChequeNo' | translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"chequeNo\\\" name=\\\"chequeNo\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>{{'Accountant.Tables.Remark'| translate}}</td>\\n                            <td>\\n                                <label>\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"purpose\\\" name=\\\"purpose\\\"/>\\n                                </label>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </table>\\n                    <button *ngIf=\\\"table\\\" (click)=\\\"send()\\\">{{'Accountant.Tables.Submit'| translate}}</button>\\n                </div>\\n            </sb-card>\\n        </div>\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\n    </div>\\n</sb-layout-dashboard>\\n\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CreditEntryComponent } from './credit-entry.component';\n\nconst routes: Routes = [{ path: '', component: CreditEntryComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CreditEntryRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NyZWRpdC1lbnRyeS9jcmVkaXQtZW50cnkuY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { CreditEntryService } from '@app/credit-entry/services';\n// @ts-ignore\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { LoanEntryService } from '@app/loan-entry/services';\n\n@Component({\n    selector: 'sb-credit-entry',\n    templateUrl: './credit-entry.component.html',\n    styleUrls: ['./credit-entry.component.scss'],\n})\nexport class CreditEntryComponent implements OnInit {\n    searchForm: FormGroup;\n    text: any;\n    type: any;\n    table = false;\n    creditAmount: any;\n    purpose: any;\n    bankName: any;\n    chequeDate: any;\n    chequeNo: any;\n    data: any;\n    name: any;\n    date: any;\n    balance = 0;\n    corpusData = 0;\n    constructor(private creditService: CreditEntryService, public fb: FormBuilder) {\n        this.searchForm = this.fb.group({\n            employeeNo: new FormControl('', Validators.compose([Validators.required])),\n        });\n    }\n    showTable() {\n        // @ts-ignore\n        this.text = this.searchForm.get('employeeNo').value;\n        console.log(this.text);\n        this.creditService.getData(this.text).subscribe(\n            result => {\n                console.log(result);\n                if (result.nameData.length === 0) {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'This user does not exists!',\n                        icon: 'error',\n                    });\n                } else {\n                    console.log(result);\n                    // tslint:disable-next-line:prefer-for-of\n                    for (let i = 0; i < result.balance.length; i++) {\n                        this.balance =\n                            this.balance + result.balance[i].credit - result.balance[i].debit;\n                    }\n                    console.log(this.balance);\n                    this.name = result.nameData[0].name;\n                    this.table = true;\n                }\n            },\n            error1 => {\n                Swal.fire({\n                    title: 'Oops!',\n                    text: 'Try again!',\n                    icon: 'error',\n                });\n            }\n        );\n        return this.balance;\n    }\n    send() {\n        if (!this.text || !this.creditAmount || !this.purpose || !this.type || !this.date) {\n            Swal.fire({\n                title: 'Oops!',\n                text: 'Fill all the details!',\n                icon: 'error',\n            });\n        } else {\n            const accountData = {\n                userId: this.text,\n                credit: this.creditAmount,\n                particulars: this.purpose,\n                mode: this.type,\n                type: 'Operational',\n                date: this.date,\n                bankName: this.bankName,\n                chequeDate: this.chequeDate,\n                chequeNo: this.chequeNo,\n            };\n            this.creditService.sendData(accountData).subscribe(\n                result => {\n                    Swal.fire({\n                        text: 'Sent!',\n                        icon: 'success',\n                    }).then((isConfirm: any) => {\n                        if (isConfirm) {\n                            // @ts-ignore\n                            this.table = false;\n                            this.text = null;\n                            this.creditAmount = null;\n                            this.purpose = null;\n                            this.date = null;\n                            this.balance = 0;\n                            this.chequeNo = null;\n                            this.chequeDate = null;\n                            this.bankName = null;\n                            this.type = null;\n                            this.searchForm = this.fb.group({\n                                employeeNo: new FormControl(\n                                    '',\n                                    Validators.compose([Validators.required])\n                                ),\n                            });\n                        }\n                    });\n                },\n                error1 => {\n                    Swal.fire({\n                        title: 'Oops!',\n                        text: 'Try again!',\n                        icon: 'error',\n                    });\n                }\n            );\n        }\n    }\n    ngOnInit() {\n        this.creditService.getCorpusData().subscribe(\n            result => {\n                console.log(result);\n                // tslint:disable-next-line:prefer-for-of\n                for (let i = 0; i < result.balance.length; i++) {\n                    this.corpusData =\n                        this.corpusData + result.balance[i].credit - result.balance[i].debit;\n                }\n                console.log(this.corpusData);\n            },\n            error1 => {\n                Swal.fire({\n                    title: 'Oops!',\n                    text: 'Try again!',\n                    icon: 'error',\n                });\n            }\n        );\n        return this.corpusData;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppCommonModule } from '@app/app-common/app-common.module';\nimport { NavigationModule } from '@app/navigation/navigation.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { CreditEntryRoutingModule } from './credit-entry-routing.module';\nimport { CreditEntryComponent } from './credit-entry.component';\nimport * as service from './services';\nimport { LayoutDashboardModule } from '@app/layout-dashboard/layout-dashboard.module';\n\n\n@NgModule({\n    declarations: [CreditEntryComponent],\n    imports: [\n        CommonModule,\n        CreditEntryRoutingModule,\n        TranslateModule,\n        FormsModule,\n        AppCommonModule,\n        NavigationModule,\n        LayoutDashboardModule,\n        ReactiveFormsModule,\n    ],\n    providers: [...service.services],\n})\nexport class CreditEntryModule {}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CreditEntryService {\n    constructor(private http: HttpClient) {}\n\n    getData(text: any): Observable<any> {\n        console.log(text);\n        const url = 'http://drsunitanayak.com:8080/getOperationalAccountData';\n        const data = {\n            userId: text,\n        };\n        return this.http.post<any>(url, data);\n    }\n    getCorpusData(): Observable<any> {\n        const url = 'http://drsunitanayak.com:8080/getCorpusData';\n        return this.http.get<any>(url);\n    }\n    sendData(data: any): Observable<any> {\n        console.log(data);\n        const url = 'http://drsunitanayak.com:8080/sendCreditEntry';\n        return this.http.post<any>(url, data);\n    }\n}\n","import { CreditEntryService } from './credit-entry.service';\n\nexport const services = [CreditEntryService];\n\nexport * from './credit-entry.service';\n"]}