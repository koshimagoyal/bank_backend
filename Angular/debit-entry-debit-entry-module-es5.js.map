{"version":3,"sources":["webpack:///src/app/debit-entry/debit-entry.component.html","webpack:///src/app/debit-entry/debit-entry-routing.module.ts","webpack:///src/app/debit-entry/debit-entry.component.scss","webpack:///src/app/debit-entry/debit-entry.component.ts","webpack:///src/app/debit-entry/debit-entry.module.ts","webpack:///src/app/debit-entry/services/debit-entry.service.ts","webpack:///src/app/debit-entry/services/index.ts"],"names":["routes","path","component","DebitEntryRoutingModule","imports","forChild","exports","DebitEntryComponent","debitService","fb","balance","table","corpusData","searchForm","group","employeeNo","compose","required","text","debitAmount","purpose","type","date","fire","title","icon","accountData","userId","debit","particulars","mode","chequeDate","chequeNo","bankName","sendData","subscribe","result","then","isConfirm","error1","get","value","console","log","getData","nameData","length","i","credit","name","$event","target","getBankList","bankList","getCorpusData","selector","template","DebitEntryModule","declarations","providers","DebitEntryService","http","url","headers","append","data","post","providedIn","services"],"mappings":"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","file":"debit-entry-debit-entry-module-es5.js","sourcesContent":["export default \"<sb-layout-dashboard>\\r\\n    <sb-dashboard-head title=\\\"{{'Accountant.Pages.Debit'| translate}}\\\"></sb-dashboard-head>\\r\\n    <hr class=\\\"rounded\\\">\\r\\n    <br>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\r\\n        <div class=\\\"col-xl-8 col-md-10\\\">\\r\\n            <sb-card>\\r\\n                <div class=\\\"card-header\\\"><fa-icon class=\\\"mr-1\\\" [icon]='[\\\"fas\\\", \\\"table\\\"]'></fa-icon>{{'Accountant.Pages.Debit'| translate}}</div>\\r\\n                <div class=\\\"card-body table-responsive\\\">\\r\\n                    <form class=\\\"form-inline\\\" [formGroup]=\\\"searchForm\\\" (ngSubmit)=\\\"showTable()\\\">\\r\\n                        <label>\\r\\n                            <input type=\\\"text\\\" placeholder=\\\"Enter Employee No\\\" formControlName=\\\"employeeNo\\\"/>\\r\\n                        </label>\\r\\n                        <button type=\\\"submit\\\" [disabled]=\\\"!searchForm.valid\\\">{{'Accountant.GetInfo'| translate}}</button>\\r\\n                    </form>\\r\\n                    <table class=\\\"table table-striped\\\" *ngIf=\\\"table\\\" id=\\\"content\\\">\\r\\n                        <tbody>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.EmployeeNo'| translate}}</td>\\r\\n                            <td>{{text}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.EmployeeName'| translate}}</td>\\r\\n                            <td>{{name}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.Corpus'| translate}}</td>\\r\\n                            <td>{{corpusData| indianCurrency}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.Balance'| translate}}</td>\\r\\n                            <td>{{balance| indianCurrency}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.Date'| translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <input type=\\\"date\\\" [(ngModel)]=\\\"date\\\" name=\\\"date\\\"/>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.DebitAmount'| translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <input type=\\\"number\\\" [(ngModel)]=\\\"debitAmount\\\" (focusout)=\\\"debit($event)\\\" name=\\\"amount\\\"/>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.Mode' | translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <select class=\\\"custom-select\\\" [(ngModel)]=\\\"type\\\">\\r\\n                                        <option>{{'Accountant.Tables.Cash' | translate}}</option>\\r\\n                                        <option>{{'Accountant.Tables.Cheque' | translate}}</option>\\r\\n                                    </select>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\r\\n                            <td>{{'Accountant.Tables.BankName' | translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <select class=\\\"custom-select\\\" name=\\\"bankName\\\" [(ngModel)]=\\\"bankName\\\">\\r\\n                                        <option *ngFor=\\\"let val of bankList\\\">{{val.bankName}}</option>\\r\\n                                    </select>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\r\\n                            <td>{{'Accountant.Tables.ChequeDate' | translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <input type=\\\"date\\\" [(ngModel)]=\\\"chequeDate\\\" name=\\\"chequeDate\\\"/>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr *ngIf=\\\"type == 'Cheque'\\\">\\r\\n                            <td>{{'Accountant.Tables.ChequeNo' | translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"chequeNo\\\" name=\\\"chequeNo\\\"/>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>{{'Accountant.Tables.Remark'| translate}}</td>\\r\\n                            <td>\\r\\n                                <label>\\r\\n                                    <input type=\\\"text\\\" [(ngModel)]=\\\"purpose\\\" name=\\\"purpose\\\"/>\\r\\n                                </label>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        </tbody>\\r\\n                    </table>\\r\\n                    <button *ngIf=\\\"table\\\" (click)=\\\"send()\\\">{{'Accountant.Tables.Submit'| translate}}</button>\\r\\n                </div>\\r\\n            </sb-card>\\r\\n        </div>\\r\\n        <div class=\\\"col-xl-2 col-md-1\\\"></div>\\r\\n    </div>\\r\\n</sb-layout-dashboard>\\r\\n\\r\\n\\r\\n\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { DebitEntryComponent } from './debit-entry.component';\r\n\r\nconst routes: Routes = [{ path: '', component: DebitEntryComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DebitEntryRoutingModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2RlYml0LWVudHJ5L2RlYml0LWVudHJ5LmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\r\nimport { DebitEntryService } from '@app/debit-entry/services';\r\n// @ts-ignore\r\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { CreditEntryService } from '@app/credit-entry/services';\r\n@Component({\r\n    selector: 'sb-debit-entry',\r\n    templateUrl: './debit-entry.component.html',\r\n    styleUrls: ['./debit-entry.component.scss'],\r\n})\r\nexport class DebitEntryComponent implements OnInit {\r\n    searchForm: FormGroup;\r\n    text: any;\r\n    debitAmount: any;\r\n    purpose: any;\r\n    type: any;\r\n    data: any;\r\n    bankName: any;\r\n    chequeNo: any;\r\n    chequeDate: any;\r\n    name: any;\r\n    date: any;\r\n    balance = 0;\r\n    table = false;\r\n    bankList: any;\r\n    corpusData = 0;\r\n    constructor(private debitService: DebitEntryService, public fb: FormBuilder) {\r\n        this.searchForm = this.fb.group({\r\n            employeeNo: new FormControl('', Validators.compose([Validators.required])),\r\n        });\r\n    }\r\n    send() {\r\n        if (!this.text || !this.debitAmount || !this.purpose || !this.type || !this.date) {\r\n            Swal.fire({\r\n                title: 'Oops!',\r\n                text: 'Fill all the details!',\r\n                icon: 'error',\r\n            });\r\n        } else {\r\n            const accountData = {\r\n                userId: this.text,\r\n                debit: this.debitAmount,\r\n                particulars: this.purpose,\r\n                mode: this.type,\r\n                type: 'Operational',\r\n                date: this.date,\r\n                chequeDate: this.chequeDate,\r\n                chequeNo: this.chequeNo,\r\n                bankName: this.bankName,\r\n            };\r\n            this.debitService.sendData(accountData).subscribe(\r\n                result => {\r\n                    Swal.fire({\r\n                        text: 'Sent!',\r\n                        icon: 'success',\r\n                    }).then((isConfirm: any) => {\r\n                        if (isConfirm) {\r\n                            // @ts-ignore\r\n                            this.table = false;\r\n                            this.text = null;\r\n                            this.debitAmount = null;\r\n                            this.purpose = null;\r\n                            this.date = null;\r\n                            this.chequeDate = null;\r\n                            this.chequeNo = null;\r\n                            this.bankName = null;\r\n                            this.balance = 0;\r\n                            this.type = null;\r\n                            this.searchForm = this.fb.group({\r\n                                employeeNo: new FormControl('', Validators.compose([Validators.required])),\r\n                            });\r\n                        }\r\n                    });\r\n                },\r\n                error1 => {\r\n                    Swal.fire({\r\n                        title: 'Oops!',\r\n                        text: 'Try again!',\r\n                        icon: 'error',\r\n                    });\r\n                }\r\n            );\r\n        }\r\n    }\r\n    showTable() {\r\n        // @ts-ignore\r\n        this.text = this.searchForm.get('employeeNo').value;\r\n        console.log(this.text);\r\n        this.debitService.getData(this.text).subscribe(\r\n            result => {\r\n                console.log(result);\r\n                if (result.nameData.length === 0) {\r\n                    Swal.fire({\r\n                        title: 'Oops!',\r\n                        text: 'This user does not exists!',\r\n                        icon: 'error',\r\n                    });\r\n                } else {\r\n                    console.log(result);\r\n                    // tslint:disable-next-line:prefer-for-of\r\n                    for (let i = 0; i < result.balance.length; i++) {\r\n                        this.balance =\r\n                            this.balance + result.balance[i].credit - result.balance[i].debit;\r\n                    }\r\n                    console.log(this.balance);\r\n                    this.name = result.nameData[0].name;\r\n                    this.table = true;\r\n                }\r\n            },\r\n            error1 => {\r\n                Swal.fire({\r\n                    title: 'Oops!',\r\n                    text: 'Try again!',\r\n                    icon: 'error',\r\n                });\r\n            }\r\n        );\r\n        return this.balance;\r\n    }\r\n    debit($event: any) {\r\n        console.log(this.balance);\r\n        if ($event.target.value > this.balance) {\r\n            Swal.fire({\r\n                title: 'Oops!',\r\n                text: 'Balance is less than debit amount',\r\n                icon: 'error',\r\n            });\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.debitService.getBankList().subscribe(result => {\r\n            this.bankList = result;\r\n            console.log(this.bankList);\r\n        });\r\n        this.debitService.getCorpusData().subscribe(\r\n            result => {\r\n                console.log(result);\r\n                // tslint:disable-next-line:prefer-for-of\r\n                for (let i = 0; i < result.balance.length; i++) {\r\n                    this.corpusData =\r\n                        this.corpusData + result.balance[i].credit - result.balance[i].debit;\r\n                }\r\n                console.log(this.corpusData);\r\n            },\r\n            error1 => {\r\n                Swal.fire({\r\n                    title: 'Oops!',\r\n                    text: 'Try again!',\r\n                    icon: 'error',\r\n                });\r\n            }\r\n        );\r\n        return this.corpusData;\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AppCommonModule } from '@app/app-common/app-common.module';\r\nimport { NavigationModule } from '@app/navigation/navigation.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nimport { DebitEntryRoutingModule } from './debit-entry-routing.module';\r\nimport { DebitEntryComponent } from './debit-entry.component';\r\nimport * as service from './services';\r\nimport { LayoutDashboardModule } from '@app/layout-dashboard/layout-dashboard.module';\r\n\r\n@NgModule({\r\n    declarations: [DebitEntryComponent],\r\n    imports: [\r\n        CommonModule,\r\n        DebitEntryRoutingModule,\r\n        TranslateModule,\r\n        FormsModule,\r\n        AppCommonModule,\r\n        NavigationModule,\r\n        LayoutDashboardModule,\r\n        ReactiveFormsModule,\r\n    ],\r\n    providers: [...service.services],\r\n})\r\nexport class DebitEntryModule {}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class DebitEntryService {\r\n    constructor(private http: HttpClient) {}\r\n    getBankList(): Observable<any> {\r\n        const url = 'http://206.189.129.219:8080/getBankList';\r\n        const headers = new HttpHeaders();\r\n        headers.append('Access-Control-Allow-Origin', '*');\r\n        headers.append('Access-Control-Allow-Methods', 'POST,GET,OPTIONS,PUT');\r\n        headers.append('Accept', 'application/json');\r\n        headers.append('content-type', 'application/json');\r\n        return this.http.get<any>(url, { headers });\r\n    }\r\n    getData(text: any): Observable<any> {\r\n        console.log(text);\r\n        const url = 'http://206.189.129.219:8080/getOperationalAccountData';\r\n        const data = {\r\n            userId: text,\r\n        };\r\n        return this.http.post<any>(url, data);\r\n    }\r\n    getCorpusData(): Observable<any> {\r\n        const url = 'http://206.189.129.219:8080/getCorpusData';\r\n        return this.http.get<any>(url);\r\n    }\r\n    sendData(data: any): Observable<any> {\r\n        console.log(data);\r\n        const url = 'http://206.189.129.219:8080/sendDebitEntry';\r\n        return this.http.post<any>(url, data);\r\n    }\r\n}\r\n","import { DebitEntryService } from './debit-entry.service';\r\n\r\nexport const services = [DebitEntryService];\r\n\r\nexport * from './debit-entry.service';\r\n"]}